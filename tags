!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Algorithms	src/test/fft.h	/^namespace Algorithms {$/;"	n
Algorithms::FFT	src/test/fft.h	/^    class FFT {$/;"	c	namespace:Algorithms
Algorithms::FFT::FFT	src/test/fft.h	/^        FFT(unsigned int maxSize);$/;"	p	class:Algorithms::FFT	access:public	signature:(unsigned int maxSize)
Algorithms::FFT::FFT	src/test/fft.h	/^    FFT<T>::FFT(unsigned int maxSize) {$/;"	f	class:Algorithms::FFT	signature:(unsigned int maxSize)
Algorithms::FFT::bf_fft	src/test/fft.h	/^        int bf_fft(std::vector<std::complex<T>> &vec1);$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1)
Algorithms::FFT::bf_fft	src/test/fft.h	/^    int FFT<T>::bf_fft(std::vector<std::complex<T>> &vec1) {$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1)
Algorithms::FFT::bf_ifft	src/test/fft.h	/^        int bf_ifft(std::vector<std::complex<T>> &vec1);$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1)
Algorithms::FFT::bf_ifft	src/test/fft.h	/^    int FFT<T>::bf_ifft(std::vector<std::complex<T>> &vec1) {$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1)
Algorithms::FFT::ct_fft	src/test/fft.h	/^        void ct_fft(std::vector<std::complex<T>> &vec1);$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1)
Algorithms::FFT::ct_fft	src/test/fft.h	/^    void FFT<T>::ct_fft(std::vector<std::complex<T>> &vec1) {$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1)
Algorithms::FFT::ct_ifft	src/test/fft.h	/^        void ct_ifft(std::vector<std::complex<T>> &vec1);$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1)
Algorithms::FFT::ct_ifft	src/test/fft.h	/^    void FFT<T>::ct_ifft(std::vector<std::complex<T>> &vec1) {$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1)
Algorithms::FFT::m_TwiddleTable	src/test/fft.h	/^        std::vector<std::complex<T>> m_TwiddleTable;$/;"	m	class:Algorithms::FFT	access:private
Algorithms::FFT::sa_fft	src/test/fft.h	/^        unsigned int sa_fft(std::vector<std::complex<T>> &vec1,$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2)
Algorithms::FFT::sa_fft	src/test/fft.h	/^    unsigned int FFT<T>::sa_fft(std::vector<std::complex<T>> &vec1,$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2)
Algorithms::FFT::sa_ifft	src/test/fft.h	/^        unsigned int sa_ifft(std::vector<std::complex<T>> &vec1,$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2)
Algorithms::FFT::sa_ifft	src/test/fft.h	/^    unsigned int FFT<T>::sa_ifft(std::vector<std::complex<T>> &vec1,$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2)
Algorithms::FFT::~FFT	src/test/fft.h	/^        ~FFT();$/;"	p	class:Algorithms::FFT	access:public	signature:()
Algorithms::FFT::~FFT	src/test/fft.h	/^    FFT<T>::~FFT() {$/;"	f	class:Algorithms::FFT	signature:()
Algorithms::bf_core	src/test/fft.h	/^    static int bf_core(std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1,$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1, std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &twiddles, int direction_flag)
Algorithms::ct_core	src/test/fft.h	/^    static void ct_core(std::vector<std::complex<T>> &vec1,$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &twiddles, int direction_flag)
Algorithms::ct_core	src/test/fft.h	/^    static void ct_core(std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1,$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1, std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &twiddles, int direction_flag)
Algorithms::find_max	src/test/fft.h	/^    static T find_max(std::vector<std::complex<T>> &in) {$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<T>> &in)
Algorithms::normalize	src/test/fft.h	/^    static int normalize(std::vector<std::complex<T>> &in, int adjustment) {$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<T>> &in, int adjustment)
Algorithms::reorder	src/test/fft.h	/^    static void reorder(std::vector<std::complex<T>> &in) {$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<T>> &in)
Algorithms::sa_fft_core	src/test/fft.h	/^    static unsigned int sa_fft_core($/;"	f	namespace:Algorithms	signature:( std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2, std::vector<std::complex<T>> &twiddles, int direction_flag)
Algorithms::sa_fft_core	src/test/fft.h	/^    static unsigned int sa_fft_core($/;"	f	namespace:Algorithms	signature:( std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1, std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec2, std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &twiddles, int direction_flag)
CONSTEXPR	src/test/zero_cost_average.cpp	16;"	d	file:
ESCAPE	src/benchmark/benchmark.cpp	11;"	d	file:
FFT	src/test/fft.h	/^        FFT(unsigned int maxSize);$/;"	p	class:Algorithms::FFT	access:public	signature:(unsigned int maxSize)
FFT	src/test/fft.h	/^    FFT<T>::FFT(unsigned int maxSize) {$/;"	f	class:Algorithms::FFT	signature:(unsigned int maxSize)
FFT	src/test/fft.h	/^    class FFT {$/;"	c	namespace:Algorithms
FIXED_POINT_BENCHMARK_COMPLETE	src/benchmark/benchmark.cpp	237;"	d	file:
FIXED_POINT_BENCHMARK_FIXED	src/benchmark/benchmark.cpp	214;"	d	file:
FIXED_POINT_BENCHMARK_FLOAT	src/benchmark/benchmark.cpp	197;"	d	file:
FIXED_POINT_BENCHMARK_INT	src/benchmark/benchmark.cpp	202;"	d	file:
FIXED_POINT_BENCHMARK_REAL	src/benchmark/benchmark.cpp	233;"	d	file:
FIXED_POINT_FFT_H	src/test/fft.h	8;"	d
FIXED_POINT_MATH_H_	include/sg14/bits/fixed_point_math.h	11;"	d
FPTESTEXP	src/test/fixed_point_math_Q0.cpp	10;"	d	file:
FPTESTEXP	src/test/fixed_point_math_Q0.cpp	15;"	d	file:
FPTESTEXP	src/test/fixed_point_math_Q1.cpp	10;"	d	file:
FPTESTEXP	src/test/fixed_point_math_Q1.cpp	15;"	d	file:
FPTESTEXP	src/test/fixed_point_math_Q15.cpp	12;"	d	file:
FPTESTEXP	src/test/fixed_point_math_Q15.cpp	8;"	d	file:
FPTESTEXP	src/test/fixed_point_math_Q31.cpp	10;"	d	file:
FPTESTEXP	src/test/fixed_point_math_Q31.cpp	15;"	d	file:
FPTESTFORMAT	src/test/fixed_point_math_Q0.cpp	16;"	d	file:
FPTESTFORMAT	src/test/fixed_point_math_Q0.cpp	9;"	d	file:
FPTESTFORMAT	src/test/fixed_point_math_Q1.cpp	16;"	d	file:
FPTESTFORMAT	src/test/fixed_point_math_Q1.cpp	9;"	d	file:
FPTESTFORMAT	src/test/fixed_point_math_Q15.cpp	13;"	d	file:
FPTESTFORMAT	src/test/fixed_point_math_Q15.cpp	7;"	d	file:
FPTESTFORMAT	src/test/fixed_point_math_Q31.cpp	16;"	d	file:
FPTESTFORMAT	src/test/fixed_point_math_Q31.cpp	9;"	d	file:
FixedPointRepTester	src/test/fixed_point_common.h	/^struct FixedPointRepTester {$/;"	s
FixedPointRepTester::_0	src/test/fixed_point_common.h	/^    FixedPointTesterOutsize<Rep, -100> _0;$/;"	m	struct:FixedPointRepTester	access:public
FixedPointRepTester::_1	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, -10> _1;$/;"	m	struct:FixedPointRepTester	access:public
FixedPointRepTester::_2	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, -1> _2;$/;"	m	struct:FixedPointRepTester	access:public
FixedPointRepTester::_3	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, 0> _3;$/;"	m	struct:FixedPointRepTester	access:public
FixedPointRepTester::_4	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, 1> _4;$/;"	m	struct:FixedPointRepTester	access:public
FixedPointRepTester::_5	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, 10> _5;$/;"	m	struct:FixedPointRepTester	access:public
FixedPointRepTester::_6	src/test/fixed_point_common.h	/^    FixedPointTesterOutsize<Rep, 100> _6;$/;"	m	struct:FixedPointRepTester	access:public
FixedPointTester	src/test/fixed_point_common.h	/^struct FixedPointTester : public FixedPointTesterOutsize<Rep, Exponent> {$/;"	s	inherits:FixedPointTesterOutsize
FixedPointTester::min	src/test/fixed_point_common.h	/^    static constexpr fixed_point min = super::min;$/;"	m	struct:FixedPointTester	access:public
FixedPointTester::min	src/test/fixed_point_common.h	/^    static_assert(divide(84 * min, 84) == min, "basic arithmetic isn't working");$/;"	m	struct:FixedPointTester	access:public
FixedPointTester::static_assert	src/test/fixed_point_common.h	/^    static_assert((7 * min) - (4 * min) == divide(6 * min, 2), "basic arithmetic isn't working");$/;"	p	struct:FixedPointTester	access:public	signature:(7 * min) - (4 * min) == divide(6 * min, 2), Ó
FixedPointTesterOutsize	src/test/fixed_point_common.h	/^struct FixedPointTesterOutsize {$/;"	s
FixedPointTesterOutsize::exponent	src/test/fixed_point_common.h	/^    static constexpr int exponent = Exponent;$/;"	m	struct:FixedPointTesterOutsize	access:public
FixedPointTesterOutsize::min	src/test/fixed_point_common.h	/^    static constexpr fixed_point min = sg14::_impl::from_rep<fixed_point>(rep(1));$/;"	m	struct:FixedPointTesterOutsize	access:public
FixedPointTesterOutsize::static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( exponent == fixed_point::exponent, Ó)
FixedPointTesterOutsize::static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< decltype(min + min), ::fixed_point<decltype(declval<rep>() + declval<rep>()), exponent>>::value, Ó)
FixedPointTesterOutsize::static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< decltype(min - min), ::fixed_point<decltype(declval<rep>() - declval<rep>()), exponent>>::value, Ó)
FixedPointTesterOutsize::static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< fixed_point, sg14::_impl::common_type_t<fixed_point, fixed_point>>::value, Ó)
FixedPointTesterOutsize::static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< fixed_point, sg14::_impl::common_type_t<fixed_point>>::value, Ó)
FixedPointTesterOutsize::static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< sg14::_impl::common_type_t<fixed_point>, sg14::_impl::common_type_t<fixed_point, fixed_point>>::value, Ó)
FixedPointTesterOutsize::static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same<rep, typename fixed_point::rep>::value, Ó)
FixedPointTesterOutsize::static_assert	src/test/fixed_point_common.h	/^    static_assert(is_same<$/;"	p	struct:FixedPointTesterOutsize	access:public	signature:(is_same< sg14::_impl::common_type_t<fixed_point>, ::fixed_point< typename std::common_type<Rep>::type, Exponent>>::value, Ó)
FixedPointTesterOutsize::static_assert	src/test/fixed_point_common.h	/^    static_assert(min.data() == rep(1), "all Rep types should be able to store the number 1!");$/;"	p	struct:FixedPointTesterOutsize	access:public	signature:(min.data() == rep(1), Ó)
LL	src/test/utils.cpp	/^static_assert(abs(make_fixed<63, 0>(-9223372036854775807))==9223372036854775807LL, "sg14::abs test failed");$/;"	v
LL	src/test/utils.cpp	/^static_assert(abs(make_fixed<63, 0>(9223372036854775807))==9223372036854775807LL, "sg14::abs test failed");$/;"	v
LL	src/test/utils.cpp	/^static_assert(sqrt(make_fixed<63, 0>(9223372036854775807))==3037000499LL, "sg14::sqrt test failed");$/;"	v
Operator	include/sg14/auxiliary/overflow.h	/^        -> decltype(Operator()(lhs, rhs))$/;"	f	struct:_overflow_impl::operate	access:public	signature:()
Operator	include/sg14/auxiliary/precise_integer.h	/^        -> decltype(Operator()(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:()
SG14_BOOST_MULTIPRECISION_H	include/sg14/auxiliary/boost.multiprecision.h	11;"	d
SG14_BOOST_SIMD_H	include/sg14/auxiliary/boost.simd.h	11;"	d
SG14_COMMON_H	include/sg14/bits/common.h	10;"	d
SG14_CONFIG_H	include/sg14/bits/config.h	8;"	d
SG14_CONST_INTEGER_H	include/sg14/auxiliary/const_integer.h	11;"	d
SG14_ELASTIC_FIXED_POINT_H	include/sg14/auxiliary/elastic_fixed_point.h	11;"	d
SG14_ELASTIC_INTEGER_H	include/sg14/auxiliary/elastic_integer.h	11;"	d
SG14_EXCEPTIONS_ENABLED	include/sg14/bits/config.h	37;"	d
SG14_FIXED_POINT_ARITHMETIC_H	include/sg14/bits/fixed_point_arithmetic.h	11;"	d
SG14_FIXED_POINT_COMMON_TYPE_H	include/sg14/bits/fixed_point_common_type.h	11;"	d
SG14_FIXED_POINT_DEF_H	include/sg14/bits/fixed_point_type.h	11;"	d
SG14_FIXED_POINT_EXTRAS_H	include/sg14/bits/fixed_point_extras.h	13;"	d
SG14_FIXED_POINT_NAMED_H	include/sg14/bits/fixed_point_named.h	11;"	d
SG14_FIXED_POINT_OPERATORS_H	include/sg14/bits/fixed_point_operators.h	11;"	d
SG14_FIXED_POINT_SINGLE_HEADER	src/single_header/fixed_point.h	11;"	d
SG14_FIXED_POINT_SINGLE_HEADER	src/single_header/header.h	11;"	d
SG14_INT128_ENABLED	include/sg14/bits/config.h	21;"	d
SG14_INTEGER_BIT_SHIFT_DEFINE	include/sg14/auxiliary/safe_integer.h	/^    SG14_INTEGER_BIT_SHIFT_DEFINE(<<);$/;"	p	namespace:sg14	signature:(<)
SG14_INTEGER_BIT_SHIFT_DEFINE	include/sg14/auxiliary/safe_integer.h	22;"	d
SG14_LIMITS_H	include/sg14/bits/limits.h	11;"	d
SG14_MAKE_FIXED_H	include/sg14/bits/fixed_point_make.h	11;"	d
SG14_MULTIPRECISION_H	include/sg14/auxiliary/multiprecision.h	11;"	d
SG14_NUMERIC_H	include/sg14/auxiliary/numeric.h	11;"	d
SG14_NUMERIC_LIMITS_128_PROVIDED	include/sg14/bits/limits.h	22;"	d
SG14_NUMERIC_TRAITS	include/sg14/num_traits.h	11;"	d
SG14_OVERFLOW_H	include/sg14/auxiliary/overflow.h	11;"	d
SG14_PRECISE_INTEGER_H	include/sg14/auxiliary/precise_integer.h	8;"	d
SG14_SAFE_INTEGER_H	include/sg14/auxiliary/safe_integer.h	11;"	d
SG14_TYPE_TRAITS_H	include/sg14/bits/type_traits.h	11;"	d
SG14_number_base_H	include/sg14/bits/number_base.h	8;"	d
TEST	src/test/boost.multiprecision.cpp	/^TEST(fixed_point_multiprecision, add)$/;"	f	signature:(fixed_point_multiprecision, add)
TEST	src/test/boost.multiprecision.cpp	/^TEST(fixed_point_multiprecision, divide)$/;"	f	signature:(fixed_point_multiprecision, divide)
TEST	src/test/boost.multiprecision.cpp	/^TEST(fixed_point_multiprecision, multiply)$/;"	f	signature:(fixed_point_multiprecision, multiply)
TEST	src/test/boost.multiprecision.cpp	/^TEST(fixed_point_multiprecision, subtract)$/;"	f	signature:(fixed_point_multiprecision, subtract)
TEST	src/test/boost.multiprecision.cpp	/^TEST(multiprecision, add)$/;"	f	signature:(multiprecision, add)
TEST	src/test/boost.multiprecision.cpp	/^TEST(multiprecision, divide)$/;"	f	signature:(multiprecision, divide)
TEST	src/test/boost.multiprecision.cpp	/^TEST(multiprecision, multiply)$/;"	f	signature:(multiprecision, multiply)
TEST	src/test/boost.multiprecision.cpp	/^TEST(multiprecision, subtract)$/;"	f	signature:(multiprecision, subtract)
TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, add) {$/;"	f	namespace:__anon5	signature:(boost_simd, add)
TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, conversion) {$/;"	f	namespace:__anon5	signature:(boost_simd, conversion)
TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, equality) {$/;"	f	namespace:__anon5	signature:(boost_simd, equality)
TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, inequality) {$/;"	f	namespace:__anon5	signature:(boost_simd, inequality)
TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, multiply) {$/;"	f	namespace:__anon5	signature:(boost_simd, multiply)
TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, scale) {$/;"	f	namespace:__anon5	signature:(boost_simd, scale)
TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, shift_left) {$/;"	f	namespace:__anon5	signature:(boost_simd, shift_left)
TEST	src/test/cppnow2017.cpp	/^TEST(cppnow2017, safe_integer_example)$/;"	f	signature:(cppnow2017, safe_integer_example)
TEST	src/test/fft.cpp	/^TEST(fft, blockfft_fixed_point)$/;"	f	signature:(fft, blockfft_fixed_point)
TEST	src/test/fft.cpp	/^TEST(fft, blockifft_fixed_point)$/;"	f	signature:(fft, blockifft_fixed_point)
TEST	src/test/fft.cpp	/^TEST(fft, ctfft_fixed_point)$/;"	f	signature:(fft, ctfft_fixed_point)
TEST	src/test/fft.cpp	/^TEST(fft, ctifft_fixed_point)$/;"	f	signature:(fft, ctifft_fixed_point)
TEST	src/test/fft.cpp	/^TEST(fft, safft_double)$/;"	f	signature:(fft, safft_double)
TEST	src/test/fft.cpp	/^TEST(fft, safft_fixed_point)$/;"	f	signature:(fft, safft_fixed_point)
TEST	src/test/fft.cpp	/^TEST(fft, saifft_fixed_point)$/;"	f	signature:(fft, saifft_fixed_point)
TEST	src/test/fixed_point_math_common.h	/^TEST(math, FPTESTFORMAT) {$/;"	f	signature:(math, FPTESTFORMAT)
TEST	src/test/glm.cpp	/^    TEST(glm, char_multiply) {$/;"	f	namespace:__anon2	signature:(glm, char_multiply)
TEST	src/test/glm.cpp	/^    TEST(glm, fp_char_multiply) {$/;"	f	namespace:__anon2	signature:(glm, fp_char_multiply)
TEST	src/test/index.cpp	/^TEST(index, advanced_arithmetic_example)$/;"	f	signature:(index, advanced_arithmetic_example)
TEST	src/test/index.cpp	/^TEST(index, basic_arithmetic_example)$/;"	f	signature:(index, basic_arithmetic_example)
TEST	src/test/index.cpp	/^TEST(index, boost_example)$/;"	f	signature:(index, boost_example)
TEST	src/test/index.cpp	/^TEST(index, declaration_example)$/;"	f	signature:(index, declaration_example)
TEST	src/test/index.cpp	/^TEST(index, elastic_example)$/;"	f	signature:(index, elastic_example)
TEST	src/test/multiprecision.cpp	/^TEST(fixed_point_multiprecision, add)$/;"	f	signature:(fixed_point_multiprecision, add)
TEST	src/test/multiprecision.cpp	/^TEST(fixed_point_multiprecision, divide)$/;"	f	signature:(fixed_point_multiprecision, divide)
TEST	src/test/multiprecision.cpp	/^TEST(fixed_point_multiprecision, multiply)$/;"	f	signature:(fixed_point_multiprecision, multiply)
TEST	src/test/multiprecision.cpp	/^TEST(fixed_point_multiprecision, subtract)$/;"	f	signature:(fixed_point_multiprecision, subtract)
TEST	src/test/multiprecision.cpp	/^TEST(multiprecision, add)$/;"	f	signature:(multiprecision, add)
TEST	src/test/multiprecision.cpp	/^TEST(multiprecision, divide)$/;"	f	signature:(multiprecision, divide)
TEST	src/test/multiprecision.cpp	/^TEST(multiprecision, multiply)$/;"	f	signature:(multiprecision, multiply)
TEST	src/test/multiprecision.cpp	/^TEST(multiprecision, subtract)$/;"	f	signature:(multiprecision, subtract)
TEST	src/test/numeric.cpp	/^        TEST(numeric, leading_bits) {$/;"	f	namespace:__anon13::test_leading_bits	signature:(numeric, leading_bits)
TEST	src/test/p0037.cpp	/^TEST(proposal, examples)$/;"	f	signature:(proposal, examples)
TEST	src/test/p0037.cpp	/^TEST(proposal, make_fixed)$/;"	f	signature:(proposal, make_fixed)
TEST	src/test/p0037.cpp	/^TEST(proposal, make_ufixed)$/;"	f	signature:(proposal, make_ufixed)
TEST	src/test/p0037.cpp	/^TEST(proposal, named_arithmetic2)$/;"	f	signature:(proposal, named_arithmetic2)
TEST	src/test/p0037.cpp	/^TEST(proposal, overflow) {$/;"	f	signature:(proposal, overflow)
TEST	src/test/p0037.cpp	/^TEST(proposal, zero)$/;"	f	signature:(proposal, zero)
TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_uint8_ok)$/;"	f	namespace:sample1	signature:(p0381, multiply_uint8_ok)
TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_uint8_overflow)$/;"	f	namespace:sample1	signature:(p0381, multiply_uint8_overflow)
TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_ok)$/;"	f	namespace:sample2	signature:(p0381, multiply_unsigned_ok)
TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_ok)$/;"	f	namespace:sample3	signature:(p0381, multiply_unsigned_ok)
TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_ok)$/;"	f	namespace:sample5	signature:(p0381, multiply_unsigned_ok)
TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_overflow)$/;"	f	namespace:sample2	signature:(p0381, multiply_unsigned_overflow)
TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_still_ok)$/;"	f	namespace:sample3	signature:(p0381, multiply_unsigned_still_ok)
TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_still_ok)$/;"	f	namespace:sample5	signature:(p0381, multiply_unsigned_still_ok)
TEST	src/test/p0675.cpp	/^    TEST(P0675, compose_from_components) {$/;"	f	namespace:__anon7	signature:(P0675, compose_from_components)
TEST	src/test/p0675.cpp	/^    TEST(P0675, compose_from_fundamental) {$/;"	f	namespace:__anon7	signature:(P0675, compose_from_fundamental)
TEST	src/test/p0675.cpp	/^    TEST(P0675, smart_add) {$/;"	f	namespace:__anon7	signature:(P0675, smart_add)
TEST	src/test/p0675.cpp	/^    TEST(P0675, smart_multiply) {$/;"	f	namespace:__anon7	signature:(P0675, smart_multiply)
TEST	src/test/readme.cpp	/^TEST(readme, instance)$/;"	f	signature:(readme, instance)
TEST	src/test/utils.cpp	/^TEST(utils_tests, cos)$/;"	f	signature:(utils_tests, cos)
TEST	src/test/utils.cpp	/^TEST(utils_tests, sin)$/;"	f	signature:(utils_tests, sin)
TEST	src/test/zero_cost_average.cpp	/^TEST(zero_cost_average, elastic_fixed_point) {$/;"	f	signature:(zero_cost_average, elastic_fixed_point)
TEST	src/test/zero_cost_average.cpp	/^TEST(zero_cost_average, elastic_integer) {$/;"	f	signature:(zero_cost_average, elastic_integer)
TEST	src/test/zero_cost_average.cpp	/^TEST(zero_cost_average, fixed_point) {$/;"	f	signature:(zero_cost_average, fixed_point)
TEST	src/test/zero_cost_average.cpp	/^TEST(zero_cost_average, integer) {$/;"	f	signature:(zero_cost_average, integer)
TEST_IGNORE_MSVC_INTERNAL_ERRORS	src/test/fixed_point_native_integer.cpp	15;"	d	file:
TEST_IGNORE_MSVC_INTERNAL_ERRORS	src/test/fixed_point_saturated_integer.cpp	15;"	d	file:
TEST_IGNORE_MSVC_INTERNAL_ERRORS	src/test/fixed_point_throwing_integer.cpp	15;"	d	file:
TEST_IGNORE_MSVC_INTERNAL_ERRORS_NATIVE	src/test/fixed_point_native_integer.cpp	14;"	d	file:
TEST_IGNORE_MSVC_INTERNAL_ERRORS_SATURATED	src/test/fixed_point_saturated_integer.cpp	14;"	d	file:
TEST_IGNORE_MSVC_INTERNAL_ERRORS_THROWING	src/test/fixed_point_throwing_integer.cpp	14;"	d	file:
TEST_LABEL	src/test/fixed_point_built_in.cpp	12;"	d	file:
TEST_LABEL	src/test/fixed_point_native_integer.cpp	11;"	d	file:
TEST_LABEL	src/test/fixed_point_saturated_integer.cpp	11;"	d	file:
TEST_LABEL	src/test/fixed_point_throwing_integer.cpp	11;"	d	file:
TEST_NATIVE_OVERFLOW	src/test/fixed_point_built_in.cpp	11;"	d	file:
TEST_NATIVE_OVERFLOW	src/test/fixed_point_native_integer.cpp	10;"	d	file:
TEST_SATURATED_OVERFLOW	src/test/fixed_point_saturated_integer.cpp	10;"	d	file:
TEST_THROWING_OVERFLOW	src/test/fixed_point_throwing_integer.cpp	10;"	d	file:
TOKENPASTE	src/test/fixed_point_common.h	17;"	d
TOKENPASTE2	src/test/fixed_point_common.h	/^TEST(TOKENPASTE2(TEST_LABEL, compound_assignment), from_compound_assignment)$/;"	p	signature:(TEST_LABEL, compound_assignment)
TOKENPASTE2	src/test/fixed_point_common.h	/^TEST(TOKENPASTE2(TEST_LABEL, copy_assignment), from_alternative_specialization)$/;"	p	signature:(TEST_LABEL, copy_assignment)
TOKENPASTE2	src/test/fixed_point_common.h	/^TEST(TOKENPASTE2(TEST_LABEL, copy_assignment), from_floating_point)$/;"	p	signature:(TEST_LABEL, copy_assignment)
TOKENPASTE2	src/test/fixed_point_common.h	/^TEST(TOKENPASTE2(TEST_LABEL, copy_assignment), from_integer)$/;"	p	signature:(TEST_LABEL, copy_assignment)
TOKENPASTE2	src/test/fixed_point_common.h	/^TEST(TOKENPASTE2(TEST_LABEL, sqrt_exception), from_alternative_specialization)$/;"	p	signature:(TEST_LABEL, sqrt_exception)
TOKENPASTE2	src/test/fixed_point_common.h	18;"	d
TOKENPASTE2	src/test/fixed_point_throwing_integer.cpp	/^TEST(TOKENPASTE2(TEST_LABEL, overflow_exception), assignment)$/;"	p	file:	signature:(TEST_LABEL, overflow_exception)
TOKENPASTE2	src/test/fixed_point_throwing_integer.cpp	/^TEST(TOKENPASTE2(TEST_LABEL, overflow_exception), shift_left)$/;"	p	file:	signature:(TEST_LABEL, overflow_exception)
U	src/test/num_traits.cpp	/^        static_assert(identical(scale<unsigned>(3, 2, 15), 98304U),$/;"	m	namespace:__anon8::test_scale	file:
U	src/test/overflow.cpp	/^        static_assert(identical(subtract(saturated_overflow, 0U, -1), 1U), "sg14::subtract test failed");$/;"	m	namespace:__anon10::test_saturated	file:
_0	src/test/fixed_point_common.h	/^    FixedPointTesterOutsize<Rep, -100> _0;$/;"	m	struct:FixedPointRepTester	access:public
_1	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, -10> _1;$/;"	m	struct:FixedPointRepTester	access:public
_2	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, -1> _2;$/;"	m	struct:FixedPointRepTester	access:public
_3	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, 0> _3;$/;"	m	struct:FixedPointRepTester	access:public
_4	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, 1> _4;$/;"	m	struct:FixedPointRepTester	access:public
_5	src/test/fixed_point_common.h	/^    FixedPointTester<Rep, 10> _5;$/;"	m	struct:FixedPointRepTester	access:public
_6	src/test/fixed_point_common.h	/^    FixedPointTesterOutsize<Rep, 100> _6;$/;"	m	struct:FixedPointRepTester	access:public
_NDEBUG	src/test/cppnow2017.cpp	104;"	d	file:
_USE_MATH_DEFINES	src/test/fft.cpp	7;"	d	file:
__anon10::test_impl	src/test/overflow.cpp	/^    namespace test_impl {$/;"	n	namespace:__anon10	file:
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<int16_t>::value==15,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<int16_t>::value==15, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<int32_t>::value==31,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<int32_t>::value==31, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<int64_t>::value==63,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<int64_t>::value==63, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<int8_t>::value==7,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<int8_t>::value==7, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<uint16_t>::value==0,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<uint16_t>::value==0, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<uint32_t>::value==0,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<uint32_t>::value==0, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<uint64_t>::value==0,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<uint64_t>::value==0, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<uint8_t>::value==0,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<uint8_t>::value==0, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<int16_t>::value==15,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<int16_t>::value==15, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<int32_t>::value==31,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<int32_t>::value==31, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<int64_t>::value==63,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<int64_t>::value==63, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<uint16_t>::value==16,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<uint16_t>::value==16, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<uint32_t>::value==32,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<uint32_t>::value==32, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<uint64_t>::value==64,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<uint64_t>::value==64, Ó)
__anon10::test_impl::static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<uint8_t>::value==8,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<uint8_t>::value==8, Ó)
__anon10::test_native_overflow	src/test/overflow.cpp	/^    namespace test_native_overflow {$/;"	n	namespace:__anon10	file:
__anon10::test_native_overflow::identical	src/test/overflow.cpp	/^        static_assert(identical(convert<std::int32_t>(native_overflow, std::uint8_t{55}), 55), "sg14::convert test failed");$/;"	p	namespace:__anon10::test_native_overflow	file:	signature:(convert<std::int32_t>(
__anon10::test_native_overflow::identical	src/test/overflow.cpp	/^        static_assert(identical(sg14::_overflow_impl::operate<sg14::native_overflow_tag, sg14::_impl::subtract_op>()(INT8_C(0), INT8_C(0)), 0), "sg14::subtract test failed");$/;"	p	namespace:__anon10::test_native_overflow	file:	signature:(sg14::_overflow_impl::operate<sg14::native_overflow_tag, sg14::_impl::subtract_op>(
__anon10::test_native_overflow::identical	src/test/overflow.cpp	/^        static_assert(identical(subtract(native_overflow, INT8_C(0), INT8_C(0)), 0), "sg14::subtract test failed");$/;"	p	namespace:__anon10::test_native_overflow	file:	signature:(subtract(
__anon10::test_saturated	src/test/overflow.cpp	/^    namespace test_saturated {$/;"	n	namespace:__anon10	file:
__anon10::test_saturated::U	src/test/overflow.cpp	/^        static_assert(identical(subtract(saturated_overflow, 0U, -1), 1U), "sg14::subtract test failed");$/;"	m	namespace:__anon10::test_saturated	file:
__anon10::test_saturated::identical	src/test/overflow.cpp	/^        static_assert(identical(convert<std::int32_t>(saturated_overflow, std::uint8_t{55}), 55), "sg14::convert test failed");$/;"	p	namespace:__anon10::test_saturated	file:	signature:(convert<std::int32_t>(
__anon10::test_saturated::identical	src/test/overflow.cpp	/^        static_assert(identical(subtract(saturated_overflow, INT8_C(0), INT8_C(0)), 0), "sg14::subtract test failed");$/;"	p	namespace:__anon10::test_saturated	file:	signature:(subtract(
__anon10::test_saturated::operate	src/test/overflow.cpp	/^        static_assert(sg14::_overflow_impl::operate<sg14::saturated_overflow_tag, sg14::_impl::less_than_op>()(-1, 1u), "sg14::_overflow_impl::operate test failed");$/;"	p	namespace:__anon10::test_saturated	file:	signature:()
__anon10::test_saturated::std::numeric_limits::max	src/test/overflow.cpp	/^                std::numeric_limits<int32_t>::max()), "sg14::multiply test failed");$/;"	p	class:__anon10::test_saturated::std::numeric_limits	file:	signature:()
__anon10::test_saturated::std::numeric_limits::max	src/test/overflow.cpp	/^                std::numeric_limits<short>::max()), "sg14::convert test failed");$/;"	p	class:__anon10::test_saturated::std::numeric_limits	file:	signature:()
__anon10::test_throwing_overflow	src/test/overflow.cpp	/^    namespace test_throwing_overflow {$/;"	n	namespace:__anon10	file:
__anon11::equal_tag	src/test/safe_integer.cpp	/^    static_assert(operate(saturated_integer<int16_t>(32767), saturated_integer<int16_t>(5000000000L), equal_tag), "");$/;"	m	namespace:__anon11	file:
__anon11::identical	src/test/safe_integer.cpp	/^    static_assert(identical($/;"	p	namespace:__anon11	file:	signature:(sg14::_impl::operate(
__anon12::test_safe_integer	src/test/safe_integer.cpp	/^    struct test_safe_integer {$/;"	s	namespace:__anon12	file:
__anon12::test_safe_integer::default_initialized	src/test/safe_integer.cpp	/^        static constexpr auto default_initialized = safe_integer{0};$/;"	m	struct:__anon12::test_safe_integer	file:	access:public
__anon12::test_safe_integer::static_assert	src/test/safe_integer.cpp	/^        static_assert(default_initialized == 0, "sg14::safe_integer test failed");$/;"	p	struct:__anon12::test_safe_integer	file:	access:public	signature:(default_initialized == 0, Ó)
__anon12::test_safe_integer::static_assert	src/test/safe_integer.cpp	/^        static_assert(default_initialized*default_initialized == default_initialized, "sg14::safe_integer test failed");$/;"	p	struct:__anon12::test_safe_integer	file:	access:public	signature:(default_initialized*default_initialized == default_initialized, Ó)
__anon13::test_leading_bits	src/test/numeric.cpp	/^    namespace test_leading_bits {$/;"	n	namespace:__anon13	file:
__anon13::test_leading_bits::TEST	src/test/numeric.cpp	/^        TEST(numeric, leading_bits) {$/;"	f	namespace:__anon13::test_leading_bits	signature:(numeric, leading_bits)
__anon13::test_leading_bits::leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(0)) == 32, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
__anon13::test_leading_bits::leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(1)) == 31, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
__anon13::test_leading_bits::leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(127)) == 25, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
__anon13::test_leading_bits::leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(2)) == 30, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
__anon13::test_leading_bits::leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(3)) == 30, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
__anon13::test_leading_bits::leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(4)) == 29, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
__anon13::test_leading_bits::leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(63)) == 26, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
__anon13::test_leading_bits::leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(64)) == 25, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
__anon13::test_numeric_impl	src/test/numeric.cpp	/^    namespace test_numeric_impl {$/;"	n	namespace:__anon13	file:
__anon13::test_numeric_impl::test_trailing_bits_positive	src/test/numeric.cpp	/^        namespace test_trailing_bits_positive {$/;"	n	namespace:__anon13::test_numeric_impl	file:
__anon13::test_numeric_impl::test_used_bits_positive	src/test/numeric.cpp	/^        namespace test_used_bits_positive {$/;"	n	namespace:__anon13::test_numeric_impl	file:
__anon13::test_numeric_impl::test_used_bits_positive::used_bits_positive	src/test/numeric.cpp	/^            static_assert(used_bits_positive(std::numeric_limits<int64_t>::max())==63,$/;"	p	namespace:__anon13::test_numeric_impl::test_used_bits_positive	file:	signature:(std::numeric_limits<int64_t>::max(
__anon13::test_numeric_impl::test_used_bits_positive::used_bits_positive	src/test/numeric.cpp	/^            static_assert(used_bits_positive(std::numeric_limits<uint64_t>::max())==64,$/;"	p	namespace:__anon13::test_numeric_impl::test_used_bits_positive	file:	signature:(std::numeric_limits<uint64_t>::max(
__anon13::test_trailing_bits	src/test/numeric.cpp	/^    namespace test_trailing_bits {$/;"	n	namespace:__anon13	file:
__anon13::test_trailing_bits::trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<int64_t>::lowest()+1)==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<int64_t>::lowest(
__anon13::test_trailing_bits::trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<int64_t>::max())==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<int64_t>::max(
__anon13::test_trailing_bits::trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<int64_t>::min()+1)==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<int64_t>::min(
__anon13::test_trailing_bits::trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<uint64_t>::max())==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<uint64_t>::max(
__anon13::test_trailing_bits::trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<uint64_t>::min())==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<uint64_t>::min(
__anon13::test_used_bits	src/test/numeric.cpp	/^    namespace test_used_bits {$/;"	n	namespace:__anon13	file:
__anon13::test_used_bits::used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(UINT64_C(0))==0,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(UINT64_C(
__anon13::test_used_bits::used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<int64_t>::lowest())==63,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<int64_t>::lowest(
__anon13::test_used_bits::used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<int64_t>::lowest()+1)==63,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<int64_t>::lowest(
__anon13::test_used_bits::used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<int64_t>::max())==63,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<int64_t>::max(
__anon13::test_used_bits::used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<int64_t>::min()+1)==63,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<int64_t>::min(
__anon13::test_used_bits::used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<uint64_t>::max())==64,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<uint64_t>::max(
__anon13::test_used_bits::used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<uint64_t>::min())==0,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<uint64_t>::min(
__anon13::test_used_bits_symmetric	src/test/numeric.cpp	/^    namespace test_used_bits_symmetric {$/;"	n	namespace:__anon13	file:
__anon13::test_used_bits_symmetric::used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<int64_t>::lowest()+1)==63,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<int64_t>::lowest(
__anon13::test_used_bits_symmetric::used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<int64_t>::max())==63,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<int64_t>::max(
__anon13::test_used_bits_symmetric::used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<int64_t>::min()+1)==63,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<int64_t>::min(
__anon13::test_used_bits_symmetric::used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<uint64_t>::max())==64,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<uint64_t>::max(
__anon13::test_used_bits_symmetric::used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<uint64_t>::min())==0,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<uint64_t>::min(
__anon14::bare_metal	src/test/p0554.cpp	/^    namespace bare_metal {$/;"	n	namespace:__anon14	file:
__anon14::bare_metal::a	src/test/p0554.cpp	/^        constexpr auto a = (int8_t)(7.f * 8);      \/\/ the value 7 stored in a byte with 3 fractional bits$/;"	m	namespace:__anon14::bare_metal	file:
__anon14::bare_metal::b	src/test/p0554.cpp	/^        constexpr auto b = (int8_t)(3.125f * 16);  \/\/ the value 3.125 stored in a byte with 4 fractional bits$/;"	m	namespace:__anon14::bare_metal	file:
__anon14::bare_metal::c	src/test/p0554.cpp	/^        constexpr auto c = a * b;                  \/\/ the value 21.875 stored in an `int` with 7 fractional bits$/;"	m	namespace:__anon14::bare_metal	file:
__anon14::bare_metal::d	src/test/p0554.cpp	/^        constexpr auto d = (float)c \/ 128;         \/\/ 21.875f$/;"	m	namespace:__anon14::bare_metal	file:
__anon14::bare_metal::identical	src/test/p0554.cpp	/^        static_assert(identical(d, 21.875f), "position_paper test failed");$/;"	p	namespace:__anon14::bare_metal	file:	signature:(d, 21.875f)
__anon14::division	src/test/p0554.cpp	/^    namespace division {$/;"	n	namespace:__anon14	file:
__anon14::division::identical	src/test/p0554.cpp	/^        static_assert(identical(quotient, elastic_fixed_point<7, 7>{.5}), "position_paper test failed");$/;"	p	namespace:__anon14::division	file:	signature:(quotient, elastic_fixed_point<7, 7>{.5})
__anon14::division::quotient	src/test/p0554.cpp	/^        constexpr auto quotient = numerator \/ denominator;$/;"	m	namespace:__anon14::division	file:
__anon14::type_safe	src/test/p0554.cpp	/^    namespace type_safe {$/;"	n	namespace:__anon14	file:
__anon14::type_safe::a	src/test/p0554.cpp	/^        constexpr auto a = fixed_point<int8_t, -3>(7.f);     \/\/ the value 7 stored in a byte with 3 fractional bits$/;"	m	namespace:__anon14::type_safe	file:
__anon14::type_safe::b	src/test/p0554.cpp	/^        constexpr auto b = fixed_point<int8_t, -4>(3.125f);  \/\/ the value 3.125 stored in a byte with 4 fractional bits$/;"	m	namespace:__anon14::type_safe	file:
__anon14::type_safe::c	src/test/p0554.cpp	/^        constexpr auto c = a * b;                            \/\/ the value 21.875 stored in an `int` with 7 fractional bits$/;"	m	namespace:__anon14::type_safe	file:
__anon14::type_safe::d	src/test/p0554.cpp	/^        constexpr auto d = (float)c;                         \/\/ 21.875f$/;"	m	namespace:__anon14::type_safe	file:
__anon14::type_safe::identical	src/test/p0554.cpp	/^        static_assert(identical(d, 21.875f), "position_paper test failed");$/;"	p	namespace:__anon14::type_safe	file:	signature:(d, 21.875f)
__anon15::default_parameters	src/test/safe_elastic_integer.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon15	file:
__anon15::default_parameters::static_assert	src/test/safe_elastic_integer.cpp	/^        static_assert($/;"	p	namespace:__anon15::default_parameters	file:	signature:( is_same<safe_elastic_integer<1>::rep::rep, int>::value, Ó)
__anon15::test_add	src/test/safe_elastic_integer.cpp	/^    namespace test_add {$/;"	n	namespace:__anon15	file:
__anon15::test_comparison	src/test/safe_elastic_integer.cpp	/^    namespace test_comparison {$/;"	n	namespace:__anon15	file:
__anon15::test_digits	src/test/safe_elastic_integer.cpp	/^    namespace test_digits {$/;"	n	namespace:__anon15	file:
__anon15::test_is_composite	src/test/safe_elastic_integer.cpp	/^    namespace test_is_composite {$/;"	n	namespace:__anon15	file:
__anon15::test_leading_bits	src/test/safe_elastic_integer.cpp	/^    namespace test_leading_bits {$/;"	n	namespace:__anon15	file:
__anon15::test_make_safe_elastic	src/test/safe_elastic_integer.cpp	/^    namespace test_make_safe_elastic {$/;"	n	namespace:__anon15	file:
__anon15::test_multiply	src/test/safe_elastic_integer.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon15	file:
__anon15::test_numeric_limits	src/test/safe_elastic_integer.cpp	/^    namespace test_numeric_limits {$/;"	n	namespace:__anon15	file:
__anon15::test_numeric_limits::std::numeric_limits::max	src/test/safe_elastic_integer.cpp	/^        static_assert(std::numeric_limits<safe_saturating_integer_2>::lowest() < std::numeric_limits<safe_saturating_integer_2>::max(), "");$/;"	p	class:__anon15::test_numeric_limits::std::numeric_limits	file:	signature:()
__anon15::test_scale	src/test/safe_elastic_integer.cpp	/^    namespace test_scale {$/;"	n	namespace:__anon15	file:
__anon15::test_used_bits	src/test/safe_elastic_integer.cpp	/^    namespace test_used_bits {$/;"	n	namespace:__anon15	file:
__anon16::default_parameters	src/test/precise_safe_elastic_integer.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon16	file:
__anon16::test_make_psei	src/test/precise_safe_elastic_integer.cpp	/^    namespace test_make_psei {$/;"	n	namespace:__anon16	file:
__anon16::test_multiply	src/test/precise_safe_elastic_integer.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon16	file:
__anon17::test_max	src/test/common.cpp	/^    namespace test_max {$/;"	n	namespace:__anon17	file:
__anon17::test_min	src/test/common.cpp	/^    namespace test_min {$/;"	n	namespace:__anon17	file:
__anon18::default_parameters	src/test/precise_elastic_integer.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon18	file:
__anon18::test_make_precise_elastic	src/test/precise_elastic_integer.cpp	/^    namespace test_make_precise_elastic {$/;"	n	namespace:__anon18	file:
__anon18::test_multiply	src/test/precise_elastic_integer.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon18	file:
__anon18::test_scale	src/test/precise_elastic_integer.cpp	/^    namespace test_scale {$/;"	n	namespace:__anon18	file:
__anon19::test_ctor	src/test/precise_fixed_point.cpp	/^    namespace test_ctor {$/;"	n	namespace:__anon19	file:
__anon19::test_ctor::data	src/test/precise_fixed_point.cpp	/^                precise_fixed_point<>(-8).data(),$/;"	p	namespace:__anon19::test_ctor	file:	signature:()
__anon19::test_numeric_limits	src/test/precise_fixed_point.cpp	/^    namespace test_numeric_limits {$/;"	n	namespace:__anon19	file:
__anon19::test_numeric_limits::static_assert	src/test/precise_fixed_point.cpp	/^        static_assert(std::numeric_limits<precise_integer<>>::is_integer, "std::numeric_limits<precise_integer<>> test failed");$/;"	p	namespace:__anon19::test_numeric_limits	file:	signature:(std::numeric_limits<precise_integer<>>::is_integer, Ó)
__anon19::test_numeric_limits::static_assert	src/test/precise_fixed_point.cpp	/^        static_assert(std::numeric_limits<precise_integer<>>::is_specialized, "std::numeric_limits<precise_integer<>> test failed");$/;"	p	namespace:__anon19::test_numeric_limits	file:	signature:(std::numeric_limits<precise_integer<>>::is_specialized, Ó)
__anon1::elastic_integer_test	src/test/elastic_integer.cpp	/^    struct elastic_integer_test {$/;"	s	namespace:__anon1	file:
__anon1::elastic_integer_test::digits	src/test/elastic_integer.cpp	/^        static constexpr int digits = value_type::digits;$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
__anon1::elastic_integer_test::is_signed	src/test/elastic_integer.cpp	/^        static constexpr bool is_signed = numeric_limits::is_signed;$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
__anon1::elastic_integer_test::lowest	src/test/elastic_integer.cpp	/^        static_assert(numeric_limits::lowest()==lowest, "numeric_limits<elastic_integer<>>::lowest test failed");$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
__anon1::elastic_integer_test::max	src/test/elastic_integer.cpp	/^        static_assert(numeric_limits::max()==max, "numeric_limits<elastic_integer<>>::max test failed");$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
__anon1::elastic_integer_test::min	src/test/elastic_integer.cpp	/^        static_assert(numeric_limits::min()==min, "numeric_limits<elastic_integer<>>::min test failed");$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
__anon1::elastic_integer_test::static_assert	src/test/elastic_integer.cpp	/^        static_assert(is_signed==std::numeric_limits<narrowest>::is_signed, "narrowest is different signedness");$/;"	p	struct:__anon1::elastic_integer_test	file:	access:public	signature:(is_signed==std::numeric_limits<narrowest>::is_signed, Ó)
__anon1::elastic_integer_test::static_assert	src/test/elastic_integer.cpp	/^        static_assert(is_signed==std::numeric_limits<typename value_type::rep>::is_signed,$/;"	p	struct:__anon1::elastic_integer_test	file:	access:public	signature:(is_signed==std::numeric_limits<typename value_type::rep>::is_signed, Ó)
__anon1::elastic_integer_test::static_assert	src/test/elastic_integer.cpp	/^        static_assert(numeric_limits::is_integer, "numeric_limits<elastic_integer<>>::is_integer test failed");$/;"	p	struct:__anon1::elastic_integer_test	file:	access:public	signature:(numeric_limits::is_integer, Ó)
__anon1::elastic_integer_test::static_assert	src/test/elastic_integer.cpp	/^        static_assert(zero==0., "elastic_integer comparison test failed");$/;"	p	struct:__anon1::elastic_integer_test	file:	access:public	signature:(zero==0., Ó)
__anon1::elastic_integer_test::zero_squared	src/test/elastic_integer.cpp	/^        static constexpr auto zero_squared = zero*zero;$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
__anon1::lowest	src/test/elastic_integer.cpp	/^    static_assert(std::numeric_limits<elastic_integer<8, int>>::lowest()==-255, "");$/;"	p	namespace:__anon1	file:	signature:()
__anon1::lowest	src/test/elastic_integer.cpp	/^    static_assert(std::numeric_limits<int8_t>::lowest()==-128, "");$/;"	p	namespace:__anon1	file:	signature:()
__anon1::max	src/test/elastic_integer.cpp	/^    static_assert(std::numeric_limits<elastic_integer<8, int>>::max()==255, "");$/;"	p	namespace:__anon1	file:	signature:()
__anon1::static_assert	src/test/elastic_integer.cpp	/^    static_assert(std::is_same<elastic_integer<7, int>::rep, int>::value, "");$/;"	p	namespace:__anon1	file:	signature:(std::is_same<elastic_integer<7, int>::rep, int>::value, Ó)
__anon1::test_bitwise_not	src/test/elastic_integer.cpp	/^    namespace test_bitwise_not {$/;"	n	namespace:__anon1	file:
__anon1::test_compare	src/test/elastic_integer.cpp	/^    namespace test_compare {$/;"	n	namespace:__anon1	file:
__anon1::test_ctor	src/test/elastic_integer.cpp	/^    namespace test_ctor {$/;"	n	namespace:__anon1	file:
__anon1::test_digits	src/test/elastic_integer.cpp	/^    namespace test_digits {$/;"	n	namespace:__anon1	file:
__anon1::test_divide	src/test/elastic_integer.cpp	/^    namespace test_divide {$/;"	n	namespace:__anon1	file:
__anon1::test_from_value	src/test/elastic_integer.cpp	/^    namespace test_from_value {$/;"	n	namespace:__anon1	file:
__anon1::test_is_elastic_integer	src/test/elastic_integer.cpp	/^    namespace test_is_elastic_integer {$/;"	n	namespace:__anon1	file:
__anon1::test_is_elastic_integer::static_assert	src/test/elastic_integer.cpp	/^        static_assert(is_elastic_integer<elastic_integer<10, int>>::value,$/;"	p	namespace:__anon1::test_is_elastic_integer	file:	signature:(is_elastic_integer<elastic_integer<10, int>>::value, Ó)
__anon1::test_make_elastic_integer	src/test/elastic_integer.cpp	/^    namespace test_make_elastic_integer {$/;"	n	namespace:__anon1	file:
__anon1::test_multiply	src/test/elastic_integer.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon1	file:
__anon1::test_multiply::identical	src/test/elastic_integer.cpp	/^        static_assert(identical(sg14::_impl::to_rep(elastic_integer<4>{13}), 13), "sg14::elastic_integer test failed");$/;"	p	namespace:__anon1::test_multiply	file:	signature:(sg14::_impl::to_rep(
__anon1::test_multiply::static_assert	src/test/elastic_integer.cpp	/^        static_assert(sg14::_impl::precedes<elastic_integer<1>, int32_t>::value, "");$/;"	p	namespace:__anon1::test_multiply	file:	signature:(sg14::_impl::precedes<elastic_integer<1>, int32_t>::value, Ó)
__anon1::test_operate	src/test/elastic_integer.cpp	/^    namespace test_operate {$/;"	n	namespace:__anon1	file:
__anon1::test_operate::identical	src/test/elastic_integer.cpp	/^        static_assert(identical($/;"	p	namespace:__anon1::test_operate	file:	signature:(typename std::common_type<elastic_integer<31>, elastic_integer<32, unsigned>>::type{}, elastic_integer<32>{})
__anon1::test_operate::static_assert	src/test/elastic_integer.cpp	/^        static_assert(precedes<elastic_integer<1>, int32_t>::value, "");$/;"	p	namespace:__anon1::test_operate	file:	signature:(precedes<elastic_integer<1>, int32_t>::value, Ó)
__anon1::test_scale	src/test/elastic_integer.cpp	/^    namespace test_scale {$/;"	n	namespace:__anon1	file:
__anon1::test_subtract	src/test/elastic_integer.cpp	/^    namespace test_subtract {$/;"	n	namespace:__anon1	file:
__anon1::test_subtract::std::numeric_limits::max	src/test/elastic_integer.cpp	/^                        std::numeric_limits<elastic_integer<10>>::max()-std::numeric_limits<elastic_integer<9>>::max(),$/;"	p	class:__anon1::test_subtract::std::numeric_limits	file:	signature:()
__anon1::test_subtract::std::numeric_limits::max	src/test/elastic_integer.cpp	/^                        std::numeric_limits<elastic_integer<15, unsigned>>::max()+std::numeric_limits<elastic_integer<19>>::max(),$/;"	p	class:__anon1::test_subtract::std::numeric_limits	file:	signature:()
__anon1::test_unary_add	src/test/elastic_integer.cpp	/^    namespace test_unary_add {$/;"	n	namespace:__anon1	file:
__anon1::test_unary_subtract	src/test/elastic_integer.cpp	/^    namespace test_unary_subtract {$/;"	n	namespace:__anon1	file:
__anon20::test_const_integer	src/test/const_integer.cpp	/^    namespace test_const_integer {$/;"	n	namespace:__anon20	file:
__anon20::test_const_integer::identical	src/test/const_integer.cpp	/^        static_assert(identical(static_cast<int>(const_integer<long, 77213>{}), 77213), "sg14::const_integer test failed");$/;"	p	namespace:__anon20::test_const_integer	file:	signature:(static_cast<int>(
__anon20::test_const_integer_impl	src/test/const_integer.cpp	/^    namespace test_const_integer_impl {$/;"	n	namespace:__anon20	file:
__anon20::test_const_integer_impl::test_digits_to_integral	src/test/const_integer.cpp	/^        namespace test_digits_to_integral {$/;"	n	namespace:__anon20::test_const_integer_impl	file:
__anon20::test_const_integer_impl::test_digits_to_integral::identical	src/test/const_integer.cpp	/^            static_assert(identical(digits_to_integral<'1'>::value, INTMAX_C(1)),$/;"	p	namespace:__anon20::test_const_integer_impl::test_digits_to_integral	file:	signature:(digits_to_integral<Ã>::value, INTMAX_C(1))
__anon20::test_const_integer_impl::test_operate	src/test/const_integer.cpp	/^        namespace test_operate {$/;"	n	namespace:__anon20::test_const_integer_impl	file:
__anon20::test_literals	src/test/const_integer.cpp	/^    namespace test_literals {$/;"	n	namespace:__anon20	file:
__anon21::default_parameters	src/test/precise_safe_elastic_fixed_point.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon21	file:
__anon21::test_make_psefp	src/test/precise_safe_elastic_fixed_point.cpp	/^    namespace test_make_psefp {$/;"	n	namespace:__anon21	file:
__anon21::test_multiply	src/test/precise_safe_elastic_fixed_point.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon21	file:
__anon22::arithmetic	src/test/precise_integer.cpp	/^    namespace arithmetic {$/;"	n	namespace:__anon22	file:
__anon22::closest	src/test/precise_integer.cpp	/^    namespace closest {$/;"	n	namespace:__anon22	file:
__anon22::default_parameters	src/test/precise_integer.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon22	file:
__anon22::default_parameters::static_assert	src/test/precise_integer.cpp	/^        static_assert(is_same<precise_integer<>::rep, default_rep>::value, "sg14::precise_integer parameter default test failed");$/;"	p	namespace:__anon22::default_parameters	file:	signature:(is_same<precise_integer<>::rep, default_rep>::value, Ó)
__anon22::default_parameters::static_assert	src/test/precise_integer.cpp	/^        static_assert(is_same<precise_integer<>::rounding, default_tag<default_rep>>::value, "sg14::precise_integer parameter default test failed");$/;"	p	namespace:__anon22::default_parameters	file:	signature:(is_same<precise_integer<>::rounding, default_tag<default_rep>>::value, Ó)
__anon22::is_number	src/test/precise_integer.cpp	/^    namespace is_number {$/;"	n	namespace:__anon22	file:
__anon22::number_base_traits	src/test/precise_integer.cpp	/^    namespace number_base_traits {$/;"	n	namespace:__anon22	file:
__anon22::number_base_traits::static_assert	src/test/precise_integer.cpp	/^        static_assert(is_derived_from_number_base<precise_integer<>>::value, "");$/;"	p	namespace:__anon22::number_base_traits	file:	signature:(is_derived_from_number_base<precise_integer<>>::value, Ó)
__anon22::test_closest_rounding_tag	src/test/precise_integer.cpp	/^    namespace test_closest_rounding_tag {$/;"	n	namespace:__anon22	file:
__anon22::test_closest_rounding_tag::identical	src/test/precise_integer.cpp	/^        static_assert(identical(closest_rounding_tag::convert<int>(-1.), -1), "sg14::closest_rounding_tag test failed");$/;"	p	namespace:__anon22::test_closest_rounding_tag	file:	signature:(closest_rounding_tag::convert<int>(
__anon22::test_comparison	src/test/precise_integer.cpp	/^    namespace test_comparison {$/;"	n	namespace:__anon22	file:
__anon22::test_conversion_operator	src/test/precise_integer.cpp	/^    namespace test_conversion_operator {$/;"	n	namespace:__anon22	file:
__anon22::test_conversion_operator::identical	src/test/precise_integer.cpp	/^        static_assert(identical(static_cast<int>(precise_integer<>{9876}), 9876), "precise_integer conversion test failed");$/;"	p	namespace:__anon22::test_conversion_operator	file:	signature:(static_cast<int>(
__anon22::test_operate	src/test/precise_integer.cpp	/^    namespace test_operate {$/;"	n	namespace:__anon22	file:
__anon22::test_traits	src/test/precise_integer.cpp	/^    namespace test_traits {$/;"	n	namespace:__anon22	file:
__anon22::test_traits::test_from_rep	src/test/precise_integer.cpp	/^        namespace test_from_rep {$/;"	n	namespace:__anon22::test_traits	file:
__anon22::test_traits::test_from_value	src/test/precise_integer.cpp	/^        namespace test_from_value {$/;"	n	namespace:__anon22::test_traits	file:
__anon22::test_traits::test_make_signed_t	src/test/precise_integer.cpp	/^        namespace test_make_signed_t {$/;"	n	namespace:__anon22::test_traits	file:
__anon22::test_traits::test_make_signed_t::static_assert	src/test/precise_integer.cpp	/^            static_assert(std::is_same<precise_integer<short>, make_signed_t<precise_integer<unsigned short>>>::value,$/;"	p	namespace:__anon22::test_traits::test_make_signed_t	file:	signature:(std::is_same<precise_integer<short>, make_signed_t<precise_integer<unsigned short>>>::value, Ó)
__anon22::test_traits::test_make_unsigned_t	src/test/precise_integer.cpp	/^        namespace test_make_unsigned_t {$/;"	n	namespace:__anon22::test_traits	file:
__anon22::test_traits::test_make_unsigned_t::static_assert	src/test/precise_integer.cpp	/^            static_assert($/;"	p	namespace:__anon22::test_traits::test_make_unsigned_t	file:	signature:( std::is_same<precise_integer<unsigned long long>, make_unsigned_t<precise_integer<long long>>>::value, Ó)
__anon22::test_traits::test_to_rep	src/test/precise_integer.cpp	/^        namespace test_to_rep {$/;"	n	namespace:__anon22::test_traits	file:
__anon2::TEST	src/test/glm.cpp	/^    TEST(glm, char_multiply) {$/;"	f	namespace:__anon2	signature:(glm, char_multiply)
__anon2::TEST	src/test/glm.cpp	/^    TEST(glm, fp_char_multiply) {$/;"	f	namespace:__anon2	signature:(glm, fp_char_multiply)
__anon3::define_a_fast_object_using_elastic_literal	src/test/snippets.cpp	/^namespace define_a_fast_object_using_elastic_literal {$/;"	n	namespace:__anon3	file:
__anon3::define_a_fast_object_using_elastic_literal::static_assert	src/test/snippets.cpp	/^static_assert(n==34, "n now has the value, 1536");$/;"	p	namespace:__anon3::define_a_fast_object_using_elastic_literal	file:	signature:(n==34, Ó)
__anon3::define_a_fast_object_using_elastic_literal::static_assert	src/test/snippets.cpp	/^static_assert(std::is_same<decltype(n), const elastic_fixed_point<6, -1>>::value, "type only uses 1 bit of range");$/;"	p	namespace:__anon3::define_a_fast_object_using_elastic_literal	file:	signature:(std::is_same<decltype(n), const elastic_fixed_point<6, -1>>::value, Ó)
__anon3::define_a_fast_object_using_make_elastic	src/test/snippets.cpp	/^namespace define_a_fast_object_using_make_elastic {$/;"	n	namespace:__anon3	file:
__anon3::define_a_fast_object_using_make_elastic::n	src/test/snippets.cpp	/^constexpr auto n = make_elastic_fixed_point(const_integer<std::uint8_t, 0xAA>{});$/;"	m	namespace:__anon3::define_a_fast_object_using_make_elastic	file:
__anon3::define_a_fast_object_using_make_elastic::static_assert	src/test/snippets.cpp	/^static_assert(n==0xAA, "n now has the value, 1024");$/;"	p	namespace:__anon3::define_a_fast_object_using_make_elastic	file:	signature:(n==0xAA, Ó)
__anon3::define_a_fast_object_using_make_elastic::static_assert	src/test/snippets.cpp	/^static_assert(std::is_same<decltype(n), const elastic_fixed_point<8, -1, int>>::value, "by default make_elastic_fixed_point uses the most efficient type it can");$/;"	p	namespace:__anon3::define_a_fast_object_using_make_elastic	file:	signature:(std::is_same<decltype(n), const elastic_fixed_point<8, -1, int>>::value, Ó)
__anon3::define_a_fixed_point_value	src/test/snippets.cpp	/^namespace define_a_fixed_point_value {$/;"	n	namespace:__anon3	file:
__anon3::define_a_fixed_point_value::n	src/test/snippets.cpp	/^constexpr auto n = fixed_point<char, -3>{-2.75};$/;"	m	namespace:__anon3::define_a_fixed_point_value	file:
__anon3::define_a_fixed_point_value::static_assert	src/test/snippets.cpp	/^static_assert(n==-2.75, "fixed-point type was unable to store the value");$/;"	p	namespace:__anon3::define_a_fixed_point_value	file:	signature:(n==-2.75, Ó)
__anon3::define_a_small_object_using_make_elastic	src/test/snippets.cpp	/^namespace define_a_small_object_using_make_elastic {$/;"	n	namespace:__anon3	file:
__anon3::define_a_small_object_using_make_elastic::n	src/test/snippets.cpp	/^constexpr auto n = make_elastic_fixed_point<char>(const_integer<short, 1536>{});$/;"	m	namespace:__anon3::define_a_small_object_using_make_elastic	file:
__anon3::define_a_small_object_using_make_elastic::static_assert	src/test/snippets.cpp	/^static_assert(n==1536, "n now has the value, 1536");$/;"	p	namespace:__anon3::define_a_small_object_using_make_elastic	file:	signature:(n==1536, Ó)
__anon3::define_a_small_object_using_make_elastic::static_assert	src/test/snippets.cpp	/^static_assert(std::is_same<decltype(n), const elastic_fixed_point<11, -9, char>>::value, "by default make_elastic_fixed_point uses the most efficient type it can");$/;"	p	namespace:__anon3::define_a_small_object_using_make_elastic	file:	signature:(std::is_same<decltype(n), const elastic_fixed_point<11, -9, char>>::value, Ó)
__anon3::use_make_fixed	src/test/snippets.cpp	/^namespace use_make_fixed {$/;"	n	namespace:__anon3	file:
__anon3::use_make_fixed::static_assert	src/test/snippets.cpp	/^static_assert(std::is_same<make_fixed<7, 8, signed>, fixed_point<int16_t, -8>>::value, "failed to use make_fixed");$/;"	p	namespace:__anon3::use_make_fixed	file:	signature:(std::is_same<make_fixed<7, 8, signed>, fixed_point<int16_t, -8>>::value, Ó)
__anon3::use_resize_1	src/test/snippets.cpp	/^namespace use_resize_1 {$/;"	n	namespace:__anon3	file:
__anon3::use_resize_2	src/test/snippets.cpp	/^namespace use_resize_2 {$/;"	n	namespace:__anon3	file:
__anon3::use_resize_3	src/test/snippets.cpp	/^namespace use_resize_3 {$/;"	n	namespace:__anon3	file:
__anon4::rebind_s	src/test/boost.simd.cpp	/^    struct rebind_s<U, fpp<T, N, Exponent>> {$/;"	s	namespace:__anon4	file:
__anon5::TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, add) {$/;"	f	namespace:__anon5	signature:(boost_simd, add)
__anon5::TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, conversion) {$/;"	f	namespace:__anon5	signature:(boost_simd, conversion)
__anon5::TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, equality) {$/;"	f	namespace:__anon5	signature:(boost_simd, equality)
__anon5::TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, inequality) {$/;"	f	namespace:__anon5	signature:(boost_simd, inequality)
__anon5::TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, multiply) {$/;"	f	namespace:__anon5	signature:(boost_simd, multiply)
__anon5::TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, scale) {$/;"	f	namespace:__anon5	signature:(boost_simd, scale)
__anon5::TEST	src/test/boost.simd.cpp	/^    TEST(boost_simd, shift_left) {$/;"	f	namespace:__anon5	signature:(boost_simd, shift_left)
__anon5::test_numeric_limits	src/test/boost.simd.cpp	/^    namespace test_numeric_limits {$/;"	n	namespace:__anon5	file:
__anon5::test_numeric_limits::static_assert	src/test/boost.simd.cpp	/^        static_assert(std::numeric_limits<pack < float>>::is_iec559, "");$/;"	p	namespace:__anon5::test_numeric_limits	file:	signature:(std::numeric_limits<pack < float>>::is_iec559, Ó)
__anon5::test_numeric_limits::static_assert	src/test/boost.simd.cpp	/^        static_assert(std::numeric_limits<pack<int>>::is_integer, "");$/;"	p	namespace:__anon5::test_numeric_limits	file:	signature:(std::numeric_limits<pack<int>>::is_integer, Ó)
__anon5::test_set_digits	src/test/boost.simd.cpp	/^    namespace test_set_digits {$/;"	n	namespace:__anon5	file:
__anon5::test_set_make_signed	src/test/boost.simd.cpp	/^    namespace test_set_make_signed {$/;"	n	namespace:__anon5	file:
__anon5::test_set_make_unsigned	src/test/boost.simd.cpp	/^    namespace test_set_make_unsigned {$/;"	n	namespace:__anon5	file:
__anon6::smart_integer	src/test/p0675.cpp	/^    struct smart_integer : public sg14::_impl::number_base<smart_integer<Rep>, Rep> {$/;"	s	namespace:__anon6	file:	inherits:sg14::_impl::number_base
__anon6::smart_integer::smart_integer	src/test/p0675.cpp	/^        constexpr smart_integer(const Rep& rhs) : sg14::_impl::number_base<smart_integer<Rep>, Rep>{rhs} {}$/;"	f	struct:__anon6::smart_integer	access:public	signature:(const Rep& rhs)
__anon7::TEST	src/test/p0675.cpp	/^    TEST(P0675, compose_from_components) {$/;"	f	namespace:__anon7	signature:(P0675, compose_from_components)
__anon7::TEST	src/test/p0675.cpp	/^    TEST(P0675, compose_from_fundamental) {$/;"	f	namespace:__anon7	signature:(P0675, compose_from_fundamental)
__anon7::TEST	src/test/p0675.cpp	/^    TEST(P0675, smart_add) {$/;"	f	namespace:__anon7	signature:(P0675, smart_add)
__anon7::TEST	src/test/p0675.cpp	/^    TEST(P0675, smart_multiply) {$/;"	f	namespace:__anon7	signature:(P0675, smart_multiply)
__anon7::desirata	src/test/p0675.cpp	/^    namespace desirata {$/;"	n	namespace:__anon7	file:
__anon7::desirata::num_digits_v	src/test/p0675.cpp	/^        template<class T> constexpr auto num_digits_v = sg14::digits_v<T>;$/;"	m	namespace:__anon7::desirata	file:
__anon7::desirata::static_assert	src/test/p0675.cpp	/^        static_assert(is_composite_v<fixed_point<short>>);$/;"	p	namespace:__anon7::desirata	file:	signature:(is_composite_v<fixed_point<short>>)
__anon7::desirata::static_assert	src/test/p0675.cpp	/^        static_assert(num_digits_v<int64_t> == 63);$/;"	p	namespace:__anon7::desirata	file:	signature:(num_digits_v<int64_t> == 63)
__anon8::test_digits_type	src/test/num_traits.cpp	/^    namespace test_digits_type {$/;"	n	namespace:__anon8	file:
__anon8::test_digits_type::static_assert	src/test/num_traits.cpp	/^        static_assert(std::is_same<$/;"	p	namespace:__anon8::test_digits_type	file:	signature:(std::is_same< typename std::remove_cv<decltype(std::numeric_limits<void>::digits)>::type, sg14::_digits_type>::value, Ó)
__anon8::test_is_integer_or_float	src/test/num_traits.cpp	/^    namespace test_is_integer_or_float {$/;"	n	namespace:__anon8	file:
__anon8::test_is_integer_or_float::static_assert	src/test/num_traits.cpp	/^        static_assert(is_integer_or_float<float>::value, "sg14::_integer_impl::is_integer_or_float test failed");$/;"	p	namespace:__anon8::test_is_integer_or_float	file:	signature:(is_integer_or_float<float>::value, Ó)
__anon8::test_scale	src/test/num_traits.cpp	/^    namespace test_scale {$/;"	n	namespace:__anon8	file:
__anon8::test_scale::U	src/test/num_traits.cpp	/^        static_assert(identical(scale<unsigned>(3, 2, 15), 98304U),$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::b00000011	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b00111001, 2, -4) == 0b00000011, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::b0000011	src/test/num_traits.cpp	/^        static_assert(scale<int8_t>(+0b0111001, 2, -4) == +0b0000011, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::b00011001	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b01100100, 2, -2) == 0b00011001, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::b0011001	src/test/num_traits.cpp	/^        static_assert(scale<int8_t>(+0b1100100, 2, -2) == +0b0011001, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::b101101100000	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b10110110, 2, 4) == 0b101101100000, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::b1101000	src/test/num_traits.cpp	/^        static_assert(scale<int8_t>(+0b0011010, 2, 2) == +0b1101000, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::b11101000	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b00111010, 2, 2) == 0b11101000, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::b11101011	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b11101011, 2, 0) == 0b11101011, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::b1111010100000000	src/test/num_traits.cpp	/^        static_assert(identical(scale<uint8_t>(0b11110101, 2, 8), 0b1111010100000000), "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_scale::x40000000	src/test/num_traits.cpp	/^        static_assert(scale<int32_t>(1, 2, 30) == 0x40000000, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
__anon8::test_set_digits	src/test/num_traits.cpp	/^    namespace test_set_digits {$/;"	n	namespace:__anon8	file:
__anon8::test_to_rep	src/test/num_traits.cpp	/^    namespace test_to_rep {$/;"	n	namespace:__anon8	file:
__anon9::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(digits<set_digits_t<elastic_integer<15, uint8_t>, 22>>::value == 22, "sg14::elastic_integer test failed");$/;"	p	namespace:__anon9	file:	signature:(digits<set_digits_t<elastic_integer<15, uint8_t>, 22>>::value == 22, Ó)
__anon9::u	src/test/elastic_fixed_point.cpp	/^    static_assert(shift_left<1, sg14::elastic_integer<32, unsigned>>(0) == 0u, "");$/;"	m	namespace:__anon9	file:
__anon9::u	src/test/elastic_fixed_point.cpp	/^    static_assert(shift_left<1, sg14::elastic_integer<64, unsigned>>(0) == 0u, "");$/;"	m	namespace:__anon9	file:
_const_integer_impl	include/sg14/auxiliary/const_integer.h	/^    namespace _const_integer_impl {$/;"	n	namespace:sg14
_const_integer_impl	src/single_header/fixed_point.h	/^    namespace _const_integer_impl {$/;"	n	namespace:sg14
_elastic_integer_impl	include/sg14/auxiliary/elastic_integer.h	/^    namespace _elastic_integer_impl {$/;"	n	namespace:sg14
_elastic_integer_impl	include/sg14/auxiliary/elastic_integer.h	/^    namespace _elastic_integer_impl {$/;"	n	namespace:std
_elastic_integer_impl	src/single_header/fixed_point.h	/^    namespace _elastic_integer_impl {$/;"	n	namespace:sg14
_elastic_integer_impl	src/single_header/fixed_point.h	/^    namespace _elastic_integer_impl {$/;"	n	namespace:std
_fixed_point_operators_impl	include/sg14/bits/fixed_point_operators.h	/^    namespace _fixed_point_operators_impl {$/;"	n	namespace:sg14
_fixed_point_operators_impl	src/single_header/fixed_point.h	/^    namespace _fixed_point_operators_impl {$/;"	n	namespace:sg14::_impl::sg14
_impl	include/sg14/auxiliary/elastic_integer.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/auxiliary/numeric.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/auxiliary/precise_integer.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/auxiliary/safe_integer.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/bits/common.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/bits/fixed_point_arithmetic.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/bits/fixed_point_common_type.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/bits/fixed_point_extras.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/bits/fixed_point_math.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/bits/fixed_point_operators.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/bits/fixed_point_type.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/bits/number_base.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/bits/type_traits.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	include/sg14/num_traits.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	src/single_header/fixed_point.h	/^    namespace _impl {$/;"	n	namespace:sg14
_impl	src/single_header/fixed_point.h	/^    namespace _impl {$/;"	n	namespace:sg14::_impl::sg14
_impl	src/test/p0675.cpp	/^    namespace _impl {$/;"	n	namespace:sg14	file:
_integer_impl	include/sg14/auxiliary/safe_integer.h	/^    namespace _integer_impl {$/;"	n	namespace:sg14
_num_traits_impl	include/sg14/num_traits.h	/^    namespace _num_traits_impl {$/;"	n	namespace:sg14
_num_traits_impl	src/single_header/fixed_point.h	/^    namespace _num_traits_impl {$/;"	n	namespace:sg14
_numeric_impl	include/sg14/auxiliary/numeric.h	/^    namespace _numeric_impl {$/;"	n	namespace:sg14
_numeric_impl	src/single_header/fixed_point.h	/^    namespace _numeric_impl {$/;"	n	namespace:sg14
_overflow_impl	include/sg14/auxiliary/overflow.h	/^    namespace _overflow_impl {$/;"	n
_overflow_impl	include/sg14/auxiliary/overflow.h	/^    namespace _overflow_impl {$/;"	n	namespace:sg14
_overflow_impl::is_multiply_overflow	include/sg14/auxiliary/overflow.h	/^        constexpr bool is_multiply_overflow(const Lhs& lhs, const Rhs& rhs)$/;"	f	namespace:_overflow_impl	signature:(const Lhs& lhs, const Rhs& rhs)
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<OverflowTag, _impl::divide_op> {$/;"	s	namespace:_overflow_impl
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<native_overflow_tag, Operator,$/;"	s	namespace:_overflow_impl
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<native_overflow_tag, _impl::multiply_op> {$/;"	s	namespace:_overflow_impl
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<native_overflow_tag, _impl::subtract_op> {$/;"	s	namespace:_overflow_impl
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<saturated_overflow_tag, Operator,$/;"	s	namespace:_overflow_impl
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<saturated_overflow_tag, _impl::multiply_op> {$/;"	s	namespace:_overflow_impl
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<saturated_overflow_tag, _impl::subtract_op> {$/;"	s	namespace:_overflow_impl
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<throwing_overflow_tag, Operator,$/;"	s	namespace:_overflow_impl
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<throwing_overflow_tag, _impl::multiply_op> {$/;"	s	namespace:_overflow_impl
_overflow_impl::operate	include/sg14/auxiliary/overflow.h	/^        struct operate<throwing_overflow_tag, _impl::subtract_op> {$/;"	s	namespace:_overflow_impl
_overflow_impl::operate::Operator	include/sg14/auxiliary/overflow.h	/^        -> decltype(Operator()(lhs, rhs))$/;"	f	struct:_overflow_impl::operate	access:public	signature:()
_overflow_impl::operate::decltype	include/sg14/auxiliary/overflow.h	/^            -> decltype(lhs*rhs)$/;"	f	struct:_overflow_impl::operate	access:public	signature:(lhs*rhs)
_precise_integer_impl	include/sg14/auxiliary/precise_integer.h	/^    namespace _precise_integer_impl {$/;"	n	namespace:sg14
_rep	include/sg14/bits/number_base.h	/^            rep _rep;$/;"	m	class:sg14::_impl::number_base	access:private
_rep	src/single_header/fixed_point.h	/^            rep _rep;$/;"	m	class:sg14::_impl::number_base	access:private
_rep	src/test/cppnow2017.cpp	/^        Rep _rep;$/;"	m	class:prototypes::safe_integer	file:	access:private
_s	include/sg14/bits/limits.h	/^            constexpr _s(uint64_t upper, uint64_t lower) : value(lower + (SG14_INT128{upper} << 64)) {}$/;"	f	struct:std::numeric_limits::_s	access:public	signature:(uint64_t upper, uint64_t lower)
_s	include/sg14/bits/limits.h	/^            constexpr _s(uint64_t upper, uint64_t lower) : value(lower + (SG14_UINT128{upper} << 64)) {}$/;"	f	struct:std::numeric_limits::_s	access:public	signature:(uint64_t upper, uint64_t lower)
_s	include/sg14/bits/limits.h	/^        struct _s {$/;"	s	struct:std::numeric_limits	access:public
_sized_integer_impl	include/sg14/auxiliary/boost.multiprecision.h	/^    namespace _sized_integer_impl {$/;"	n	namespace:sg14
_sized_integer_impl	include/sg14/auxiliary/multiprecision.h	/^    namespace _sized_integer_impl {$/;"	n	namespace:sg14
a	src/test/cppnow2017.cpp	/^    auto a = safe_elastic_integer<4>{14}*safe_elastic_integer<3>{6};$/;"	m	namespace:composite	file:
a	src/test/cppnow2017.cpp	/^    constexpr auto a = elastic_integer<4, unsigned>{10};$/;"	m	namespace:elastic_integer_example	file:
a	src/test/p0554.cpp	/^        constexpr auto a = (int8_t)(7.f * 8);      \/\/ the value 7 stored in a byte with 3 fractional bits$/;"	m	namespace:__anon14::bare_metal	file:
a	src/test/p0554.cpp	/^        constexpr auto a = fixed_point<int8_t, -3>(7.f);     \/\/ the value 7 stored in a byte with 3 fractional bits$/;"	m	namespace:__anon14::type_safe	file:
a1	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a1;$/;"	m	class:sg14::_impl::fp::poly_coeffs
a1	src/test/p0037.cpp	/^    constexpr auto a1 = fixed_point<int8_t, 32>{0x7f00000000LL};$/;"	m	namespace:named_arithmetic4	file:
a2	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a2;$/;"	m	class:sg14::_impl::fp::poly_coeffs
a2	src/test/p0037.cpp	/^    constexpr auto a2 = fixed_point<int8_t, 0>{0x7f};$/;"	m	namespace:named_arithmetic4	file:
a3	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a3;$/;"	m	class:sg14::_impl::fp::poly_coeffs
a4	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a4;$/;"	m	class:sg14::_impl::fp::poly_coeffs
a5	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a5;$/;"	m	class:sg14::_impl::fp::poly_coeffs
a6	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a6;$/;"	m	class:sg14::_impl::fp::poly_coeffs
a7	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a7;$/;"	m	class:sg14::_impl::fp::poly_coeffs
abs	src/test/utils.cpp	/^static_assert(abs(make_fixed<7, 0>(-123))==123, "sg14::abs test failed");$/;"	p	file:	signature:(make_fixed<7, 0>(
abs	src/test/utils.cpp	/^static_assert(abs(make_fixed<7, 0>(66))==66, "sg14::abs test failed");$/;"	p	file:	signature:(make_fixed<7, 0>(
abs	src/test/utils.cpp	/^static_assert(abs(make_fixed<7, 8>(-5))==5, "sg14::abs test failed");$/;"	p	file:	signature:(make_fixed<7, 8>(
abs	src/test/utils.cpp	/^static_assert(abs(make_ufixed<8, 0>(123))==123, "sg14::abs test failed");$/;"	p	file:	signature:(make_ufixed<8, 0>(
abs	src/test/utils.cpp	/^static_assert(abs(make_ufixed<8, 0>(66))==66, "sg14::abs test failed");$/;"	p	file:	signature:(make_ufixed<8, 0>(
abs	src/test/utils.cpp	/^static_assert(abs(make_ufixed<8, 8>(5))==5, "sg14::abs test failed");$/;"	p	file:	signature:(make_ufixed<8, 8>(
acme	src/test/cppnow2017.cpp	/^    namespace acme {$/;"	n	namespace:acme_debug	file:
acme	src/test/cppnow2017.cpp	/^    namespace acme {$/;"	n	namespace:acme_ndebug	file:
acme_debug	src/test/cppnow2017.cpp	/^namespace acme_debug {$/;"	n	file:
acme_debug::acme	src/test/cppnow2017.cpp	/^    namespace acme {$/;"	n	namespace:acme_debug	file:
acme_debug::square	src/test/cppnow2017.cpp	/^    auto square(acme::integer<short> f)$/;"	f	namespace:acme_debug	signature:(acme::integer<short> f)
acme_debug::static_assert	src/test/cppnow2017.cpp	/^    static_assert(is_same<decltype(square(2)), int>::value, "error in CppNow 2017 slide");$/;"	p	namespace:acme_debug	file:	signature:(is_same<decltype(square(2)), int>::value, Ó)
acme_debug::static_assert	src/test/cppnow2017.cpp	/^    static_assert(is_same<decltype(square(2)), safe_integer<int>>::value, "error in CppNow 2017 slide");$/;"	p	namespace:acme_debug	file:	signature:(is_same<decltype(square(2)), safe_integer<int>>::value, Ó)
acme_ndebug	src/test/cppnow2017.cpp	/^namespace acme_ndebug {$/;"	n	file:
acme_ndebug::acme	src/test/cppnow2017.cpp	/^    namespace acme {$/;"	n	namespace:acme_ndebug	file:
acme_ndebug::square	src/test/cppnow2017.cpp	/^    auto square(acme::integer<short> f)$/;"	f	namespace:acme_ndebug	signature:(acme::integer<short> f)
acme_ndebug::static_assert	src/test/cppnow2017.cpp	/^    static_assert(is_same<decltype(square(2)), int>::value, "error in CppNow 2017 slide");$/;"	p	namespace:acme_ndebug	file:	signature:(is_same<decltype(square(2)), int>::value, Ó)
add	src/benchmark/benchmark.cpp	/^static void add(benchmark::State& state)$/;"	f	file:	signature:(benchmark::State& state)
add_op	include/sg14/bits/common.h	/^        struct add_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
add_op	src/single_header/fixed_point.h	/^        struct add_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
advanced_arithmetic_example	src/test/index.cpp	/^void advanced_arithmetic_example()$/;"	f	signature:()
are_composite	include/sg14/num_traits.h	/^        struct are_composite<> : std::false_type {$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::false_type
are_composite	include/sg14/num_traits.h	/^        struct are_composite<ArgHead, ArgTail...>$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::integral_constant
are_composite	src/single_header/fixed_point.h	/^        struct are_composite<> : std::false_type {$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::false_type
are_composite	src/single_header/fixed_point.h	/^        struct are_composite<ArgHead, ArgTail...>$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::integral_constant
are_integer_class_operands	include/sg14/auxiliary/elastic_integer.h	/^        struct are_integer_class_operands {$/;"	s	namespace:sg14::_elastic_integer_impl
are_integer_class_operands	include/sg14/auxiliary/safe_integer.h	/^        struct are_integer_class_operands {$/;"	s	namespace:sg14::_integer_impl
are_integer_class_operands	src/single_header/fixed_point.h	/^        struct are_integer_class_operands {$/;"	s	namespace:sg14::_elastic_integer_impl
args	src/benchmark/review.py	/^    args = parser.parse_args()$/;"	v
arithmetic	include/sg14/bits/fixed_point_arithmetic.h	/^            namespace arithmetic {$/;"	n	namespace:sg14::_impl::fp
arithmetic	src/test/precise_integer.cpp	/^    namespace arithmetic {$/;"	n	namespace:__anon22	file:
arithmetic_op	include/sg14/bits/common.h	/^        struct arithmetic_op {$/;"	s	namespace:sg14::_impl
arithmetic_op	src/single_header/fixed_point.h	/^        struct arithmetic_op {$/;"	s	namespace:sg14::_impl
average_elastic	src/test/zero_cost_average.cpp	/^CONSTEXPR float average_elastic(float input1, float input2) {$/;"	f	signature:(float input1, float input2)
average_elastic_integer	src/test/zero_cost_average.cpp	/^CONSTEXPR float average_elastic_integer(float input1, float input2) {$/;"	f	signature:(float input1, float input2)
average_fixed_point	src/test/zero_cost_average.cpp	/^CONSTEXPR float average_fixed_point(float input1, float input2) {$/;"	f	signature:(float input1, float input2)
average_integer	src/test/zero_cost_average.cpp	/^CONSTEXPR float average_integer(float input1, float input2) {$/;"	f	signature:(float input1, float input2)
b	src/test/cppnow2017.cpp	/^    constexpr auto b = a+a;  \/\/ elastic_integer<5, unsigned>;$/;"	m	namespace:elastic_integer_example	file:
b	src/test/p0554.cpp	/^        constexpr auto b = (int8_t)(3.125f * 16);  \/\/ the value 3.125 stored in a byte with 4 fractional bits$/;"	m	namespace:__anon14::bare_metal	file:
b	src/test/p0554.cpp	/^        constexpr auto b = fixed_point<int8_t, -4>(3.125f);  \/\/ the value 3.125 stored in a byte with 4 fractional bits$/;"	m	namespace:__anon14::type_safe	file:
b00000011	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b00111001, 2, -4) == 0b00000011, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
b0000011	src/test/num_traits.cpp	/^        static_assert(scale<int8_t>(+0b0111001, 2, -4) == +0b0000011, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
b00011001	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b01100100, 2, -2) == 0b00011001, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
b0011001	src/test/num_traits.cpp	/^        static_assert(scale<int8_t>(+0b1100100, 2, -2) == +0b0011001, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
b101101100000	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b10110110, 2, 4) == 0b101101100000, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
b1101000	src/test/num_traits.cpp	/^        static_assert(scale<int8_t>(+0b0011010, 2, 2) == +0b1101000, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
b11101000	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b00111010, 2, 2) == 0b11101000, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
b11101011	src/test/num_traits.cpp	/^        static_assert(scale<uint8_t>(0b11101011, 2, 0) == 0b11101011, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
b1111010100000000	src/test/num_traits.cpp	/^        static_assert(identical(scale<uint8_t>(0b11110101, 2, 8), 0b1111010100000000), "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
bare_metal	src/test/p0554.cpp	/^    namespace bare_metal {$/;"	n	namespace:__anon14	file:
bare_saturate	src/test/zero_cost_free_functions.cpp	/^int bare_saturate(int a, int b) {$/;"	f	signature:(int a, int b)
base_class	include/sg14/auxiliary/elastic_integer.h	/^        struct base_class {$/;"	s	namespace:sg14::_elastic_integer_impl
base_class	src/single_header/fixed_point.h	/^        struct base_class {$/;"	s	namespace:sg14::_elastic_integer_impl
basic_arithmetic_example	src/test/index.cpp	/^void basic_arithmetic_example()$/;"	f	signature:()
benchmark	src/benchmark/review.py	/^def benchmark(args, commit, commits):$/;"	f	access:public
benchmarks_from_buffer	src/benchmark/report.py	/^def benchmarks_from_buffer(buffer):$/;"	f	access:public
bf_core	src/test/fft.h	/^    static int bf_core(std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1,$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1, std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &twiddles, int direction_flag)
bf_fft	src/test/fft.h	/^        int bf_fft(std::vector<std::complex<T>> &vec1);$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1)
bf_fft	src/test/fft.h	/^    int FFT<T>::bf_fft(std::vector<std::complex<T>> &vec1) {$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1)
bf_ifft	src/test/fft.h	/^        int bf_ifft(std::vector<std::complex<T>> &vec1);$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1)
bf_ifft	src/test/fft.h	/^    int FFT<T>::bf_ifft(std::vector<std::complex<T>> &vec1) {$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1)
binary_pair	include/sg14/bits/fixed_point_arithmetic.h	/^                struct binary_pair<Lhs, fixed_point<RhsRep, RhsExponent>>$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:binary_pair_base
binary_pair	include/sg14/bits/fixed_point_arithmetic.h	/^                struct binary_pair<fixed_point<LhsRep, LhsExponent>, Rhs>$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:binary_pair_base
binary_pair	include/sg14/bits/fixed_point_arithmetic.h	/^                struct binary_pair<fixed_point<LhsRep, LhsExponent>, fixed_point<RhsRep, RhsExponent>>$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:binary_pair_base
binary_pair_base	include/sg14/bits/fixed_point_arithmetic.h	/^                struct binary_pair_base {$/;"	s	namespace:sg14::_impl::fp::arithmetic
bit_count	src/test/elastic_fixed_point.cpp	/^constexpr int bit_count(const T& n)$/;"	f	signature:(const T& n)
bitwise_and_op	include/sg14/bits/common.h	/^        struct bitwise_and_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
bitwise_and_op	src/single_header/fixed_point.h	/^        struct bitwise_and_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
bitwise_or_op	include/sg14/bits/common.h	/^        struct bitwise_or_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
bitwise_or_op	src/single_header/fixed_point.h	/^        struct bitwise_or_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
bitwise_xor_op	include/sg14/bits/common.h	/^        struct bitwise_xor_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
bitwise_xor_op	src/single_header/fixed_point.h	/^        struct bitwise_xor_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
bm_circle_intersect_generic	src/benchmark/benchmark.cpp	/^FIXED_POINT_BENCHMARK_REAL(bm_circle_intersect_generic);$/;"	v
bm_circle_intersect_generic	src/benchmark/benchmark.cpp	/^static void bm_circle_intersect_generic(benchmark::State& state)$/;"	f	file:	signature:(benchmark::State& state)
bm_magnitude_squared	src/benchmark/benchmark.cpp	/^FIXED_POINT_BENCHMARK_REAL(bm_magnitude_squared);$/;"	v
bm_magnitude_squared	src/benchmark/benchmark.cpp	/^static void bm_magnitude_squared(benchmark::State& state)$/;"	f	file:	signature:(benchmark::State& state)
bm_sqrt	src/benchmark/benchmark.cpp	/^FIXED_POINT_BENCHMARK_REAL(bm_sqrt);$/;"	v
bm_sqrt	src/benchmark/benchmark.cpp	/^static void bm_sqrt(benchmark::State& state)$/;"	f	file:	signature:(benchmark::State& state)
boost	src/test/boost.multiprecision.cpp	/^namespace boost {$/;"	n	file:
boost	src/test/multiprecision.cpp	/^namespace boost {$/;"	n	file:
boost::throw_exception	src/test/boost.multiprecision.cpp	/^    void throw_exception(std::exception const &) {$/;"	f	namespace:boost	signature:(std::exception const &)
boost::throw_exception	src/test/multiprecision.cpp	/^    void throw_exception(std::exception const &) {$/;"	f	namespace:boost	signature:(std::exception const &)
boost_example	src/test/index.cpp	/^void boost_example()$/;"	f	signature:()
c	src/test/cppnow2017.cpp	/^    constexpr auto c = -b;  \/\/ elastic_integer<5, signed>;$/;"	m	namespace:elastic_integer_example	file:
c	src/test/p0554.cpp	/^        constexpr auto c = a * b;                            \/\/ the value 21.875 stored in an `int` with 7 fractional bits$/;"	m	namespace:__anon14::type_safe	file:
c	src/test/p0554.cpp	/^        constexpr auto c = a * b;                  \/\/ the value 21.875 stored in an `int` with 7 fractional bits$/;"	m	namespace:__anon14::bare_metal	file:
cast_to_common_type	include/sg14/auxiliary/elastic_integer.h	/^        -> decltype(op(cast_to_common_type(lhs, rhs), cast_to_common_type(rhs, lhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs, lhs)
cast_to_common_type	src/single_header/fixed_point.h	/^        -> decltype(op(cast_to_common_type(lhs, rhs), cast_to_common_type(rhs, lhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs, lhs)
circle_intersect_generic	src/benchmark/benchmark.cpp	/^static void circle_intersect_generic(benchmark::State& state)$/;"	f	file:	signature:(benchmark::State& state)
circle_intersect_generic	src/common/sample_functions.h	/^bool circle_intersect_generic(Real x1, Real y1, Real r1, Real x2, Real y2, Real r2)$/;"	f	signature:(Real x1, Real y1, Real r1, Real x2, Real y2, Real r2)
clobber	src/benchmark/benchmark.cpp	/^void clobber()$/;"	f	signature:()
closest	src/test/precise_integer.cpp	/^    namespace closest {$/;"	n	namespace:__anon22	file:
closest_rounding_tag	include/sg14/auxiliary/precise_integer.h	/^    struct closest_rounding_tag {$/;"	s	namespace:sg14
collate	src/benchmark/review.py	/^def collate(collection):$/;"	f	access:public
collect	src/benchmark/review.py	/^def collect(args, commits):$/;"	f	access:public
combine	include/sg14/auxiliary/const_integer.h	/^        constexpr std::intmax_t combine(int base, std::intmax_t val, int p0, TT... pp)$/;"	f	namespace:sg14::_const_integer_impl	signature:(int base, std::intmax_t val, int p0, TT... pp)
combine	include/sg14/auxiliary/const_integer.h	/^        constexpr std::intmax_t combine(int, std::intmax_t p)$/;"	f	namespace:sg14::_const_integer_impl	signature:(int, std::intmax_t p)
combine	src/single_header/fixed_point.h	/^        constexpr std::intmax_t combine(int base, std::intmax_t val, int p0, TT... pp)$/;"	f	namespace:sg14::_const_integer_impl	signature:(int base, std::intmax_t val, int p0, TT... pp)
combine	src/single_header/fixed_point.h	/^        constexpr std::intmax_t combine(int, std::intmax_t p)$/;"	f	namespace:sg14::_const_integer_impl	signature:(int, std::intmax_t p)
common_type	include/sg14/auxiliary/const_integer.h	/^    struct common_type<Lhs, sg14::const_integer<Integral, Value, Digits, Zeros>>$/;"	s	namespace:std	inherits:common_type
common_type	include/sg14/auxiliary/const_integer.h	/^    struct common_type<sg14::const_integer<Integral, Value, Digits, Zeros>, Rhs>$/;"	s	namespace:std	inherits:common_type
common_type	include/sg14/auxiliary/elastic_integer.h	/^    struct common_type<Lhs, sg14::elastic_integer<RhsDigits, RhsNarrowest>>$/;"	s	namespace:std	inherits:common_type
common_type	include/sg14/auxiliary/elastic_integer.h	/^    struct common_type<sg14::elastic_integer<LhsDigits, LhsNarrowest>, Rhs>$/;"	s	namespace:std	inherits:common_type
common_type	include/sg14/auxiliary/elastic_integer.h	/^    struct common_type<sg14::elastic_integer<LhsDigits, LhsNarrowest>, sg14::elastic_integer<RhsDigits, RhsNarrowest>> {$/;"	s	namespace:std
common_type	include/sg14/auxiliary/safe_integer.h	/^        struct common_type<$/;"	s	namespace:sg14::_integer_impl
common_type	include/sg14/auxiliary/safe_integer.h	/^        struct common_type<Lhs, safe_integer<RhsRep, RhsOverflowTag>>$/;"	s	namespace:sg14::_integer_impl	inherits:common_type
common_type	include/sg14/auxiliary/safe_integer.h	/^    struct common_type<$/;"	s	namespace:std	inherits:sg14::_integer_impl::common_type
common_type	include/sg14/auxiliary/safe_integer.h	/^    struct common_type<$/;"	s	namespace:std	inherits:std::common_type
common_type	include/sg14/bits/fixed_point_common_type.h	/^    struct common_type<Lhs, sg14::fixed_point<RhsRep, RhsExponent>> {$/;"	s	namespace:std
common_type	include/sg14/bits/fixed_point_common_type.h	/^    struct common_type<sg14::fixed_point<LhsRep, LhsExponent>, Rhs> {$/;"	s	namespace:std
common_type	include/sg14/bits/fixed_point_common_type.h	/^    struct common_type<sg14::fixed_point<LhsRep, LhsExponent>, sg14::fixed_point<RhsRep, RhsExponent>> {$/;"	s	namespace:std
common_type	include/sg14/bits/fixed_point_common_type.h	/^    struct common_type<sg14::fixed_point<Rep, Exponent>> {$/;"	s	namespace:std
common_type	src/single_header/fixed_point.h	/^    struct common_type<Lhs, sg14::const_integer<Integral, Value, Digits, Zeros>>$/;"	s	namespace:std	inherits:common_type
common_type	src/single_header/fixed_point.h	/^    struct common_type<Lhs, sg14::elastic_integer<RhsDigits, RhsNarrowest>>$/;"	s	namespace:std	inherits:common_type
common_type	src/single_header/fixed_point.h	/^    struct common_type<Lhs, sg14::fixed_point<RhsRep, RhsExponent>> {$/;"	s	namespace:sg14::_impl::std
common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::const_integer<Integral, Value, Digits, Zeros>, Rhs>$/;"	s	namespace:std	inherits:common_type
common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::elastic_integer<LhsDigits, LhsNarrowest>, Rhs>$/;"	s	namespace:std	inherits:common_type
common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::elastic_integer<LhsDigits, LhsNarrowest>, sg14::elastic_integer<RhsDigits, RhsNarrowest>> {$/;"	s	namespace:std
common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::fixed_point<LhsRep, LhsExponent>, Rhs> {$/;"	s	namespace:sg14::_impl::std
common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::fixed_point<LhsRep, LhsExponent>, sg14::fixed_point<RhsRep, RhsExponent>> {$/;"	s	namespace:sg14::_impl::std
common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::fixed_point<Rep, Exponent>> {$/;"	s	namespace:sg14::_impl::std
common_type_mixed	include/sg14/bits/fixed_point_common_type.h	/^                struct common_type_mixed<$/;"	s	namespace:sg14::_impl::fp::ct	inherits:std::common_type
common_type_mixed	include/sg14/bits/fixed_point_common_type.h	/^                struct common_type_mixed<fixed_point$/;"	s	namespace:sg14::_impl::fp::ct	inherits:std::common_type
common_type_mixed	src/single_header/fixed_point.h	/^                struct common_type_mixed<$/;"	s	namespace:sg14::_impl::sg14::_impl::fp::ct	inherits:std::common_type
common_type_mixed	src/single_header/fixed_point.h	/^                struct common_type_mixed<fixed_point$/;"	s	namespace:sg14::_impl::sg14::_impl::fp::ct	inherits:std::common_type
compare	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::compare(lhs, rhs, _impl::equal_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::equal_tag)
compare	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::compare(lhs, rhs, _impl::equal_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::equal_tag)
comparison_op	include/sg14/bits/common.h	/^        struct comparison_op {$/;"	s	namespace:sg14::_impl
comparison_op	src/single_header/fixed_point.h	/^        struct comparison_op {$/;"	s	namespace:sg14::_impl
composite	src/test/cppnow2017.cpp	/^namespace composite {$/;"	n	file:
composite::a	src/test/cppnow2017.cpp	/^    auto a = safe_elastic_integer<4>{14}*safe_elastic_integer<3>{6};$/;"	m	namespace:composite	file:
composite::operator *	src/test/cppnow2017.cpp	/^    constexpr auto operator*(safe_integer<Rep1> const& a, safe_integer<Rep2> const& b)$/;"	f	namespace:composite	signature:(safe_integer<Rep1> const& a, safe_integer<Rep2> const& b)
composite::static_assert	src/test/cppnow2017.cpp	/^    static_assert(is_same<decltype(a), safe_elastic_integer<7>>::value, "error in CppNow 2017 slide");$/;"	p	namespace:composite	file:	signature:(is_same<decltype(a), safe_elastic_integer<7>>::value, Ó)
const_integer	include/sg14/auxiliary/const_integer.h	/^    class const_integer {$/;"	c	namespace:sg14
const_integer	src/single_header/fixed_point.h	/^    class const_integer {$/;"	c	namespace:sg14
contribution	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int contribution(int operand_digits) { return operand_digits == 1 ? 0 : operand_digits; }$/;"	f	struct:sg14::_impl::policy	access:public	signature:(int operand_digits)
contribution	src/single_header/fixed_point.h	/^            static constexpr int contribution(int operand_digits) { return operand_digits == 1 ? 0 : operand_digits; }$/;"	f	struct:sg14::_impl::policy	access:public	signature:(int operand_digits)
convert	include/sg14/auxiliary/precise_integer.h	/^        static constexpr To convert(const From& from)$/;"	f	struct:sg14::closest_rounding_tag	access:public	signature:(const From& from)
csv_from_report	src/benchmark/report.py	/^def csv_from_report(table):$/;"	f	access:public
ct	include/sg14/bits/fixed_point_common_type.h	/^            namespace ct {$/;"	n	namespace:sg14::_impl::fp
ct	src/single_header/fixed_point.h	/^            namespace ct {$/;"	n	namespace:sg14::_impl::sg14::_impl::fp
ct_core	src/test/fft.h	/^    static void ct_core(std::vector<std::complex<T>> &vec1,$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &twiddles, int direction_flag)
ct_core	src/test/fft.h	/^    static void ct_core(std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1,$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1, std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &twiddles, int direction_flag)
ct_fft	src/test/fft.h	/^        void ct_fft(std::vector<std::complex<T>> &vec1);$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1)
ct_fft	src/test/fft.h	/^    void FFT<T>::ct_fft(std::vector<std::complex<T>> &vec1) {$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1)
ct_ifft	src/test/fft.h	/^        void ct_ifft(std::vector<std::complex<T>> &vec1);$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1)
ct_ifft	src/test/fft.h	/^    void FFT<T>::ct_ifft(std::vector<std::complex<T>> &vec1) {$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1)
d	src/test/cppnow2017.cpp	/^    constexpr auto d = elastic_integer<8, signed>{256};$/;"	m	namespace:elastic_integer_example	file:
d	src/test/p0037.cpp	/^    constexpr auto d = fixed_point<uint32_t, -16>{2};$/;"	m	namespace:named_arithmetic5	file:
d	src/test/p0554.cpp	/^        constexpr auto d = (float)c \/ 128;         \/\/ 21.875f$/;"	m	namespace:__anon14::bare_metal	file:
d	src/test/p0554.cpp	/^        constexpr auto d = (float)c;                         \/\/ 21.875f$/;"	m	namespace:__anon14::type_safe	file:
data	include/sg14/bits/number_base.h	/^            constexpr const rep& data() const$/;"	f	class:sg14::_impl::number_base	access:public	signature:() const
data	include/sg14/bits/number_base.h	/^            constexpr rep& data()$/;"	f	class:sg14::_impl::number_base	access:public	signature:()
data	src/single_header/fixed_point.h	/^            constexpr const rep& data() const$/;"	f	class:sg14::_impl::number_base	access:public	signature:() const
data	src/test/cppnow2017.cpp	/^        constexpr Rep const& data() const { return _rep; }$/;"	f	class:prototypes::safe_integer	access:public	signature:() const
data	src/test/precise_fixed_point.cpp	/^                precise_fixed_point<>(-8).data(),$/;"	p	namespace:__anon19::test_ctor	file:	signature:()
declaration_example	src/test/index.cpp	/^void declaration_example()$/;"	f	signature:()
decltype	include/sg14/auxiliary/overflow.h	/^            -> decltype(lhs*rhs)$/;"	f	struct:_overflow_impl::operate	access:public	signature:(lhs*rhs)
decltype	include/sg14/auxiliary/overflow.h	/^    -> decltype(lhs*rhs)$/;"	f	signature:(lhs*rhs)
decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs&rhs)$/;"	f	struct:sg14::_impl::bitwise_and_op	access:public	signature:(lhs&rhs)
decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs*rhs)$/;"	f	struct:sg14::_impl::multiply_op	access:public	signature:(lhs*rhs)
decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs<=rhs)$/;"	f	struct:sg14::_impl::less_than_or_equal_op	access:public	signature:(lhs<=rhs)
decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs<rhs)$/;"	f	struct:sg14::_impl::less_than_op	access:public	signature:(lhs<rhs) { return lhs<rhs; } }; struct greater_than_op : comparison_op { template<class Lhs, class Rhs> constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs>rhs)
decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs==rhs)$/;"	f	struct:sg14::_impl::equal_op	access:public	signature:(lhs==rhs)
decltype	include/sg14/bits/number_base.h	/^        -> decltype(lhs = lhs * rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs * rhs)
decltype	include/sg14/bits/number_base.h	/^        -> decltype(lhs = lhs + rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs + rhs)
decltype	include/sg14/bits/number_base.h	/^        -> decltype(lhs = lhs - rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs - rhs)
decltype	include/sg14/bits/number_base.h	/^        -> decltype(lhs = lhs \/ rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs / rhs)
decltype	include/sg14/bits/number_base.h	/^        -> decltype(number.data()){$/;"	f	struct:sg14::to_rep	access:public	signature:(number.data())
decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs&rhs)$/;"	f	struct:sg14::_impl::bitwise_and_op	access:public	signature:(lhs&rhs)
decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs*rhs)$/;"	f	struct:sg14::_impl::multiply_op	access:public	signature:(lhs*rhs)
decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs<=rhs)$/;"	f	struct:sg14::_impl::less_than_or_equal_op	access:public	signature:(lhs<=rhs)
decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs<rhs)$/;"	f	struct:sg14::_impl::less_than_op	access:public	signature:(lhs<rhs) { return lhs<rhs; } }; struct greater_than_op : comparison_op { template<class Lhs, class Rhs> constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs>rhs)
decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs==rhs)$/;"	f	struct:sg14::_impl::equal_op	access:public	signature:(lhs==rhs)
decltype	src/single_header/fixed_point.h	/^        -> decltype(lhs = lhs * rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs * rhs)
decltype	src/single_header/fixed_point.h	/^        -> decltype(lhs = lhs + rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs + rhs)
decltype	src/single_header/fixed_point.h	/^        -> decltype(lhs = lhs - rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs - rhs)
decltype	src/single_header/fixed_point.h	/^        -> decltype(lhs = lhs \/ rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs / rhs)
decltype	src/single_header/fixed_point.h	/^        -> decltype(number.data()){$/;"	f	struct:sg14::to_rep	access:public	signature:(number.data())
default_initialized	src/test/safe_integer.cpp	/^        static constexpr auto default_initialized = safe_integer{0};$/;"	m	struct:__anon12::test_safe_integer	file:	access:public
default_parameters	src/test/precise_elastic_integer.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon18	file:
default_parameters	src/test/precise_integer.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon22	file:
default_parameters	src/test/precise_safe_elastic_fixed_point.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon21	file:
default_parameters	src/test/precise_safe_elastic_integer.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon16	file:
default_parameters	src/test/safe_elastic_integer.cpp	/^    namespace default_parameters {$/;"	n	namespace:__anon15	file:
define_a_fast_object_using_elastic_literal	src/test/snippets.cpp	/^namespace define_a_fast_object_using_elastic_literal {$/;"	n	namespace:__anon3	file:
define_a_fast_object_using_make_elastic	src/test/snippets.cpp	/^namespace define_a_fast_object_using_make_elastic {$/;"	n	namespace:__anon3	file:
define_a_fixed_point_value	src/test/snippets.cpp	/^namespace define_a_fixed_point_value {$/;"	n	namespace:__anon3	file:
define_a_small_object_using_make_elastic	src/test/snippets.cpp	/^namespace define_a_small_object_using_make_elastic {$/;"	n	namespace:__anon3	file:
desirata	src/test/p0675.cpp	/^    namespace desirata {$/;"	n	namespace:__anon7	file:
determining	src/test/p0381.cpp	/^namespace determining {$/;"	n	file:
digits	include/sg14/auxiliary/boost.multiprecision.h	/^    struct digits<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>>$/;"	s	namespace:sg14	inherits:std::integral_constant
digits	include/sg14/auxiliary/boost.multiprecision.h	/^    struct digits<_bmp::number<Backend, ExpressionTemplates>>$/;"	s	namespace:sg14	inherits:digits
digits	include/sg14/auxiliary/const_integer.h	/^        static constexpr int digits = Digits;$/;"	m	class:sg14::const_integer	access:public
digits	include/sg14/auxiliary/const_integer.h	/^        static constexpr int digits = Digits;$/;"	m	struct:std::numeric_limits	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr _digits_type digits = Digits;$/;"	m	struct:sg14::_elastic_integer_impl::base_class	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = LhsTraits::digits;$/;"	m	struct:sg14::_impl::policy	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits) + (LhsTraits::is_signed | RhsTraits::is_signed);$/;"	m	struct:sg14::_impl::policy	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits)+1;$/;"	m	struct:sg14::_impl::policy	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits);$/;"	m	struct:sg14::_impl::policy	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = _impl::min(LhsTraits::digits, RhsTraits::digits);$/;"	m	struct:sg14::_impl::policy	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = max(1, contribution(LhsTraits::digits)+contribution(RhsTraits::digits));$/;"	m	struct:sg14::_impl::policy	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^        static constexpr int digits = Digits;$/;"	m	class:sg14::elastic_integer	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^        static constexpr int digits = Digits;$/;"	m	struct:std::numeric_limits	access:public
digits	include/sg14/auxiliary/elastic_integer.h	/^    struct digits<elastic_integer<Digits, Narrowest>> : std::integral_constant<_digits_type, Digits> {$/;"	s	namespace:sg14	inherits:std::integral_constant
digits	include/sg14/auxiliary/multiprecision.h	/^    struct digits<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>>$/;"	s	namespace:sg14	inherits:std::integral_constant
digits	include/sg14/auxiliary/multiprecision.h	/^    struct digits<_bmp::number<Backend, ExpressionTemplates>>$/;"	s	namespace:sg14	inherits:digits
digits	include/sg14/auxiliary/precise_integer.h	/^    struct digits<precise_integer<Rep, RoundingTag>> : digits<Rep> {$/;"	s	namespace:sg14	inherits:digits
digits	include/sg14/auxiliary/safe_integer.h	/^    struct digits<safe_integer<Rep, OverflowTag>> : digits<Rep> {$/;"	s	namespace:sg14	inherits:digits
digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int digits = Lhs::digits+Rhs::digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int digits = _impl::max(necessary_digits, promotion_digits);$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
digits	include/sg14/bits/fixed_point_extras.h	/^        struct digits<fixed_point<Rep, Exponent>> : digits<Rep> {$/;"	s	namespace:sg14	inherits:digits
digits	include/sg14/bits/limits.h	/^        static const int digits = CHAR_BIT*sizeof(SG14_INT128)-1;$/;"	m	struct:std::numeric_limits	access:public
digits	include/sg14/bits/limits.h	/^        static const int digits = CHAR_BIT*sizeof(SG14_INT128);$/;"	m	struct:std::numeric_limits	access:public
digits	src/single_header/fixed_point.h	/^            static constexpr _digits_type digits = Digits;$/;"	m	struct:sg14::_elastic_integer_impl::base_class	access:public
digits	src/single_header/fixed_point.h	/^            static constexpr int digits = LhsTraits::digits;$/;"	m	struct:sg14::_impl::policy	access:public
digits	src/single_header/fixed_point.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits) + (LhsTraits::is_signed | RhsTraits::is_signed);$/;"	m	struct:sg14::_impl::policy	access:public
digits	src/single_header/fixed_point.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits)+1;$/;"	m	struct:sg14::_impl::policy	access:public
digits	src/single_header/fixed_point.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits);$/;"	m	struct:sg14::_impl::policy	access:public
digits	src/single_header/fixed_point.h	/^            static constexpr int digits = _impl::min(LhsTraits::digits, RhsTraits::digits);$/;"	m	struct:sg14::_impl::policy	access:public
digits	src/single_header/fixed_point.h	/^            static constexpr int digits = max(1, contribution(LhsTraits::digits)+contribution(RhsTraits::digits));$/;"	m	struct:sg14::_impl::policy	access:public
digits	src/single_header/fixed_point.h	/^        static constexpr int digits = Digits;$/;"	m	class:sg14::const_integer	access:public
digits	src/single_header/fixed_point.h	/^        static constexpr int digits = Digits;$/;"	m	class:sg14::elastic_integer	access:public
digits	src/single_header/fixed_point.h	/^        static constexpr int digits = Digits;$/;"	m	struct:std::numeric_limits	access:public
digits	src/single_header/fixed_point.h	/^    struct digits<elastic_integer<Digits, Narrowest>> : std::integral_constant<_digits_type, Digits> {$/;"	s	namespace:sg14	inherits:std::integral_constant
digits	src/test/elastic_fixed_point.cpp	/^    static constexpr int digits = integer_digits+fractional_digits;$/;"	m	struct:positive_elastic_test	file:	access:public
digits	src/test/elastic_fixed_point.cpp	/^    static_assert(bit_count<typename rep::rep>(max_integer.data())==digits, "numeric_limits test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
digits	src/test/elastic_integer.cpp	/^        static constexpr int digits = value_type::digits;$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
digits10	include/sg14/bits/limits.h	/^        static const int digits10 = 38;$/;"	m	struct:std::numeric_limits	access:public
digits_to_integral	include/sg14/auxiliary/const_integer.h	/^        struct digits_to_integral {$/;"	s	namespace:sg14::_const_integer_impl
digits_to_integral	include/sg14/auxiliary/const_integer.h	/^        struct digits_to_integral<'0', 'X', Digits...> {$/;"	s	namespace:sg14::_const_integer_impl
digits_to_integral	include/sg14/auxiliary/const_integer.h	/^        struct digits_to_integral<'0', 'x', Digits...> {$/;"	s	namespace:sg14::_const_integer_impl
digits_to_integral	src/single_header/fixed_point.h	/^        struct digits_to_integral {$/;"	s	namespace:sg14::_const_integer_impl
digits_to_integral	src/single_header/fixed_point.h	/^        struct digits_to_integral<'0', 'X', Digits...> {$/;"	s	namespace:sg14::_const_integer_impl
digits_to_integral	src/single_header/fixed_point.h	/^        struct digits_to_integral<'0', 'x', Digits...> {$/;"	s	namespace:sg14::_const_integer_impl
div	src/benchmark/benchmark.cpp	/^FIXED_POINT_BENCHMARK_COMPLETE(div);$/;"	v
div	src/benchmark/benchmark.cpp	/^static void div(benchmark::State& state)$/;"	f	file:	signature:(benchmark::State& state)
divide_op	include/sg14/bits/common.h	/^        struct divide_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
divide_op	src/single_header/fixed_point.h	/^        struct divide_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
division	src/test/p0554.cpp	/^    namespace division {$/;"	n	namespace:__anon14	file:
dummy	include/sg14/bits/fixed_point_math.h	/^            template<class Rep, int Exponent, _impl::enable_if_t<(Exponent>=0), int> dummy = 0>$/;"	m	namespace:sg14::_impl::fp
elastic_example1	src/test/index.cpp	/^void elastic_example1()$/;"	f	signature:()
elastic_example2	src/test/index.cpp	/^void elastic_example2()$/;"	f	signature:()
elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        constexpr elastic_integer(Number n)$/;"	f	class:sg14::elastic_integer	access:public	signature:(Number n)
elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        constexpr elastic_integer(const elastic_integer& rhs)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const elastic_integer& rhs)
elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        constexpr elastic_integer(const_integer<Integral, Value, Digits, Exponent>)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const_integer<Integral, Value, Digits, Exponent>)
elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        explicit constexpr elastic_integer(const elastic_integer<FromWidth, FromNarrowest>& rhs)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const elastic_integer<FromWidth, FromNarrowest>& rhs)
elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^    class elastic_integer : public _elastic_integer_impl::base_class_t<Digits, Narrowest> {$/;"	c	namespace:sg14	inherits:_elastic_integer_impl::base_class_t
elastic_integer	src/single_header/fixed_point.h	/^        constexpr elastic_integer(Number n)$/;"	f	class:sg14::elastic_integer	access:public	signature:(Number n)
elastic_integer	src/single_header/fixed_point.h	/^        constexpr elastic_integer(const elastic_integer& rhs)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const elastic_integer& rhs)
elastic_integer	src/single_header/fixed_point.h	/^        constexpr elastic_integer(const_integer<Integral, Value, Digits, Exponent>)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const_integer<Integral, Value, Digits, Exponent>)
elastic_integer	src/single_header/fixed_point.h	/^        explicit constexpr elastic_integer(const elastic_integer<FromWidth, FromNarrowest>& rhs)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const elastic_integer<FromWidth, FromNarrowest>& rhs)
elastic_integer	src/single_header/fixed_point.h	/^    class elastic_integer : public _elastic_integer_impl::base_class_t<Digits, Narrowest> {$/;"	c	namespace:sg14	inherits:_elastic_integer_impl::base_class_t
elastic_integer	src/test/cppnow2017.cpp	/^    class elastic_integer {$/;"	c	namespace:prototypes	file:
elastic_integer_example	src/test/cppnow2017.cpp	/^namespace elastic_integer_example {$/;"	n	file:
elastic_integer_example::a	src/test/cppnow2017.cpp	/^    constexpr auto a = elastic_integer<4, unsigned>{10};$/;"	m	namespace:elastic_integer_example	file:
elastic_integer_example::b	src/test/cppnow2017.cpp	/^    constexpr auto b = a+a;  \/\/ elastic_integer<5, unsigned>;$/;"	m	namespace:elastic_integer_example	file:
elastic_integer_example::c	src/test/cppnow2017.cpp	/^    constexpr auto c = -b;  \/\/ elastic_integer<5, signed>;$/;"	m	namespace:elastic_integer_example	file:
elastic_integer_example::d	src/test/cppnow2017.cpp	/^    constexpr auto d = elastic_integer<8, signed>{256};$/;"	m	namespace:elastic_integer_example	file:
elastic_integer_example::identical	src/test/cppnow2017.cpp	/^    static_assert(identical(a, elastic_integer<4, unsigned>{10}), "error in CppNow 2017 slide");$/;"	p	namespace:elastic_integer_example	file:	signature:(a, elastic_integer<4, unsigned>{10})
elastic_integer_example::identical	src/test/cppnow2017.cpp	/^    static_assert(identical(b, elastic_integer<5, unsigned>{20}), "error in CppNow 2017 slide");$/;"	p	namespace:elastic_integer_example	file:	signature:(b, elastic_integer<5, unsigned>{20})
elastic_integer_example::identical	src/test/cppnow2017.cpp	/^    static_assert(identical(c, elastic_integer<5, signed>{-20}), "error in CppNow 2017 slide");$/;"	p	namespace:elastic_integer_example	file:	signature:(c, elastic_integer<5, signed>{-20})
elastic_integer_example::identical	src/test/cppnow2017.cpp	/^    static_assert(identical(d, elastic_integer<8, signed>{256}), "error in CppNow 2017 slide");$/;"	p	namespace:elastic_integer_example	file:	signature:(d, elastic_integer<8, signed>{256})
elastic_integer_test	src/test/elastic_integer.cpp	/^    struct elastic_integer_test {$/;"	s	namespace:__anon1	file:
elastic_test	src/test/elastic_fixed_point.cpp	/^struct elastic_test :$/;"	s	file:	inherits:unsigned_elastic_test,signed_elastic_test
elastic_test_with_integer_digits	src/test/elastic_fixed_point.cpp	/^struct elastic_test_with_integer_digits$/;"	s	file:	inherits:elastic_test,elastic_test,elastic_test
elastic_value	src/test/make_elastic_fixed_point.cpp	/^    static constexpr auto elastic_value = make_elastic_fixed_point(value);$/;"	m	struct:make_elastic_test	file:	access:public
enable_for_range	include/sg14/num_traits.h	/^        struct enable_for_range$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::enable_ifsg14::from_value_t
enable_for_range	src/single_header/fixed_point.h	/^        struct enable_for_range$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::enable_ifsg14::from_value_t
enable_if_op	include/sg14/auxiliary/const_integer.h	/^        struct enable_if_op<$/;"	s	namespace:sg14::_const_integer_impl
enable_if_op	src/single_header/fixed_point.h	/^        struct enable_if_op<$/;"	s	namespace:sg14::_const_integer_impl
equal_op	include/sg14/bits/common.h	/^        struct equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
equal_op	src/single_header/fixed_point.h	/^        struct equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
equal_tag	src/test/safe_integer.cpp	/^    static_assert(operate(saturated_integer<int16_t>(32767), saturated_integer<int16_t>(5000000000L), equal_tag), "");$/;"	m	namespace:__anon11	file:
equal_tag	src/test/safe_integer.cpp	/^static_assert(sg14::_impl::operate(saturated_integer<uint8_t>(-1), 0, sg14::_impl::equal_tag),$/;"	m	class:sg14::_impl	file:
escape_codedive2015	src/benchmark/benchmark.cpp	/^void escape_codedive2015(T&& p)$/;"	f	signature:(T&& p)
escape_cppcon2015	src/benchmark/benchmark.cpp	/^void escape_cppcon2015(T&&)$/;"	f	signature:(T&&)
escape_cppcon2015	src/benchmark/benchmark.cpp	/^void escape_cppcon2015(void const* p)$/;"	f	signature:(void const* p)
evaluate_polynomial	include/sg14/bits/fixed_point_math.h	/^            constexpr inline fixed_point<Rep, Exponent> evaluate_polynomial($/;"	f	namespace:sg14::_impl::fp	signature:( fixed_point<Rep, Exponent> xf)
exp2	include/sg14/bits/fixed_point_math.h	/^    constexpr fixed_point<Rep, Exponent> exp2(fixed_point<Rep, Exponent> x) {$/;"	f	signature:(fixed_point<Rep, Exponent> x)
exponent	include/sg14/auxiliary/const_integer.h	/^        static constexpr int exponent = Exponent;$/;"	m	class:sg14::const_integer	access:public
exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int exponent = Lhs::exponent-Rhs::digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::intermediate	access:public
exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int exponent = rep_op_exponent<OperationTag, Lhs, Rhs>::value;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
exponent	src/single_header/fixed_point.h	/^        static constexpr int exponent = Exponent;$/;"	m	class:sg14::const_integer	access:public
exponent	src/test/fixed_point_common.h	/^    static constexpr int exponent = Exponent;$/;"	m	struct:FixedPointTesterOutsize	access:public
extract_names	src/benchmark/review.py	/^def extract_names(collection):$/;"	f	access:public
extras	include/sg14/bits/fixed_point_extras.h	/^            namespace extras {$/;"	n	namespace:sg14::_impl::fp
f	include/sg14/auxiliary/numeric.h	/^            static constexpr int f(Integer value)$/;"	f	struct:sg14::_numeric_impl::trailing_bits	access:public	signature:(Integer value)
f	src/single_header/fixed_point.h	/^            static constexpr int f(Integer value)$/;"	f	struct:sg14::_numeric_impl::trailing_bits	access:public	signature:(Integer value)
f	src/test/p0037.cpp	/^    constexpr auto f = fixed_point<uint8_t, -4>{15.9375};$/;"	m	namespace:named_arithmetic1	file:
f	src/test/p0037.cpp	/^    constexpr auto f = fixed_point<unsigned, -28>{15.9375};$/;"	m	namespace:named_arithmetic3	file:
filter_row	src/benchmark/report.py	/^    def filter_row(row):$/;"	f	function:table_from_benchmarks	access:public
find_max	src/test/fft.h	/^    static T find_max(std::vector<std::complex<T>> &in) {$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<T>> &in)
fixed_point	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(lhs*fixed_point<RhsInteger>(rhs))$/;"	f	namespace:sg14	signature:(rhs)
fixed_point	src/single_header/fixed_point.h	/^    -> decltype(lhs*fixed_point<RhsInteger>(rhs))$/;"	f	namespace:sg14::_impl::sg14	signature:(rhs)
fixed_point	src/test/fixed_point_common.h	/^static_assert(fixed_point<uint8, 4>(fixed_point<int16, -4>(768))==768, "sg14::fixed_point test failed");$/;"	p	signature:(fixed_point<int16, -4>(
fp	include/sg14/bits/fixed_point_arithmetic.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
fp	include/sg14/bits/fixed_point_common_type.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
fp	include/sg14/bits/fixed_point_extras.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
fp	include/sg14/bits/fixed_point_math.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
fp	include/sg14/bits/fixed_point_type.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
fp	src/single_header/fixed_point.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
fp	src/single_header/fixed_point.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl::sg14::_impl
fractional_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int fractional_digits = Lhs::fractional_digits+Rhs::integer_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
fractional_digits	src/test/elastic_fixed_point.cpp	/^    static constexpr int fractional_digits = elastic_type::fractional_digits;$/;"	m	struct:positive_elastic_test	file:	access:public
from_data	include/sg14/bits/number_base.h	/^            static constexpr Derived from_data(const rep& r)$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const rep& r)
from_data	src/single_header/fixed_point.h	/^            static constexpr Derived from_data(const rep& r)$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const rep& r)
from_rep	include/sg14/auxiliary/precise_integer.h	/^        -> decltype(from_rep<precise_integer<op_result<Operator, LhsRep, RhsRep>, RoundingTag>>(Operator()(lhs.data(), rhs.data())))$/;"	f	namespace:sg14::_impl	signature:(Operator(
from_rep	include/sg14/bits/number_base.h	/^    struct from_rep<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
from_rep	src/single_header/fixed_point.h	/^    struct from_rep<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
from_rep	src/test/safe_integer.cpp	/^    static_assert(from_rep<native_integer<short>>()(1), "");$/;"	p	namespace:test_from_rep	file:	signature:()
from_rep	src/test/safe_integer.cpp	/^    static_assert(from_rep<throwing_integer<short>>()(1), "");$/;"	p	namespace:test_from_rep	file:	signature:()
from_value	include/sg14/auxiliary/elastic_integer.h	/^    struct from_value<elastic_integer<Digits, Narrowest>, Value> {$/;"	s	namespace:sg14
from_value	include/sg14/auxiliary/precise_integer.h	/^    struct from_value<precise_integer<Rep, RoundingTag>, Value> {$/;"	s	namespace:sg14
from_value	include/sg14/auxiliary/safe_integer.h	/^    struct from_value<safe_integer<Rep, OverflowTag>, Value> {$/;"	s	namespace:sg14
from_value	include/sg14/bits/fixed_point_extras.h	/^    struct from_value<fixed_point<Rep, Exponent>, Value> {$/;"	s	namespace:sg14
from_value	include/sg14/bits/number_base.h	/^        -> decltype(op(static_cast<const LhsDerived &>(lhs), from_value<LhsDerived>(rhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs)
from_value	src/single_header/fixed_point.h	/^        -> decltype(op(static_cast<const LhsDerived &>(lhs), from_value<LhsDerived>(rhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs)
from_value	src/single_header/fixed_point.h	/^    struct from_value<elastic_integer<Digits, Narrowest>, Value> {$/;"	s	namespace:sg14
get_commits	src/benchmark/review.py	/^def get_commits(args):$/;"	f	access:public
get_rep	include/sg14/auxiliary/elastic_integer.h	/^        struct get_rep<elastic_integer<Digits, Narrowest>> {$/;"	s	namespace:sg14::_impl
get_rep	include/sg14/auxiliary/precise_integer.h	/^        struct get_rep<precise_integer<Rep, RoundingTag>> {$/;"	s	namespace:sg14::_impl
get_rep	include/sg14/auxiliary/safe_integer.h	/^        struct get_rep<safe_integer<Rep, OverflowTag>> {$/;"	s	namespace:sg14::_impl
get_rep	include/sg14/bits/fixed_point_extras.h	/^        struct get_rep<fixed_point<Rep, Exponent>> {$/;"	s	namespace:sg14::_impl
get_rep	src/single_header/fixed_point.h	/^        struct get_rep<elastic_integer<Digits, Narrowest>> {$/;"	s	namespace:sg14::_impl
greater_than_or_equal_op	include/sg14/bits/common.h	/^        struct greater_than_or_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
greater_than_or_equal_op	src/single_header/fixed_point.h	/^        struct greater_than_or_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
help_text	src/benchmark/report.py	/^help_text = "please provide CSV-formatted google\/benchmark output"$/;"	v
identical	include/sg14/bits/type_traits.h	/^        constexpr bool identical(const A& a, const B& b)$/;"	f	namespace:sg14::_impl	signature:(const A& a, const B& b)
identical	src/single_header/fixed_point.h	/^        constexpr bool identical(const A& a, const B& b)$/;"	f	namespace:sg14::_impl	signature:(const A& a, const B& b)
identical	src/test/const_integer.cpp	/^            static_assert(identical(digits_to_integral<'1'>::value, INTMAX_C(1)),$/;"	p	namespace:__anon20::test_const_integer_impl::test_digits_to_integral	file:	signature:(digits_to_integral<Ã>::value, INTMAX_C(1))
identical	src/test/const_integer.cpp	/^        static_assert(identical(static_cast<int>(const_integer<long, 77213>{}), 77213), "sg14::const_integer test failed");$/;"	p	namespace:__anon20::test_const_integer	file:	signature:(static_cast<int>(
identical	src/test/cppnow2017.cpp	/^    static_assert(identical(a, elastic_integer<4, unsigned>{10}), "error in CppNow 2017 slide");$/;"	p	namespace:elastic_integer_example	file:	signature:(a, elastic_integer<4, unsigned>{10})
identical	src/test/cppnow2017.cpp	/^    static_assert(identical(b, elastic_integer<5, unsigned>{20}), "error in CppNow 2017 slide");$/;"	p	namespace:elastic_integer_example	file:	signature:(b, elastic_integer<5, unsigned>{20})
identical	src/test/cppnow2017.cpp	/^    static_assert(identical(c, elastic_integer<5, signed>{-20}), "error in CppNow 2017 slide");$/;"	p	namespace:elastic_integer_example	file:	signature:(c, elastic_integer<5, signed>{-20})
identical	src/test/cppnow2017.cpp	/^    static_assert(identical(d, elastic_integer<8, signed>{256}), "error in CppNow 2017 slide");$/;"	p	namespace:elastic_integer_example	file:	signature:(d, elastic_integer<8, signed>{256})
identical	src/test/elastic_integer.cpp	/^        static_assert(identical($/;"	p	namespace:__anon1::test_operate	file:	signature:(typename std::common_type<elastic_integer<31>, elastic_integer<32, unsigned>>::type{}, elastic_integer<32>{})
identical	src/test/elastic_integer.cpp	/^        static_assert(identical(sg14::_impl::to_rep(elastic_integer<4>{13}), 13), "sg14::elastic_integer test failed");$/;"	p	namespace:__anon1::test_multiply	file:	signature:(sg14::_impl::to_rep(
identical	src/test/number_test.h	/^    static_assert(identical(lowest_from_rep, lowest), "sg14::_impl::to_rep & from_rep test failed");$/;"	p	struct:number_test	access:public	signature:(lowest_from_rep, lowest)
identical	src/test/number_test.h	/^    static_assert(identical(max_from_rep, max), "sg14::_impl::to_rep & from_rep test failed");$/;"	p	struct:number_test	access:public	signature:(max_from_rep, max)
identical	src/test/number_test.h	/^    static_assert(identical(zero_from_rep, zero), "sg14::_impl::to_rep & from_rep test failed");$/;"	p	struct:number_test	access:public	signature:(zero_from_rep, zero)
identical	src/test/overflow.cpp	/^        static_assert(identical(convert<std::int32_t>(native_overflow, std::uint8_t{55}), 55), "sg14::convert test failed");$/;"	p	namespace:__anon10::test_native_overflow	file:	signature:(convert<std::int32_t>(
identical	src/test/overflow.cpp	/^        static_assert(identical(convert<std::int32_t>(saturated_overflow, std::uint8_t{55}), 55), "sg14::convert test failed");$/;"	p	namespace:__anon10::test_saturated	file:	signature:(convert<std::int32_t>(
identical	src/test/overflow.cpp	/^        static_assert(identical(sg14::_overflow_impl::operate<sg14::native_overflow_tag, sg14::_impl::subtract_op>()(INT8_C(0), INT8_C(0)), 0), "sg14::subtract test failed");$/;"	p	namespace:__anon10::test_native_overflow	file:	signature:(sg14::_overflow_impl::operate<sg14::native_overflow_tag, sg14::_impl::subtract_op>(
identical	src/test/overflow.cpp	/^        static_assert(identical(subtract(native_overflow, INT8_C(0), INT8_C(0)), 0), "sg14::subtract test failed");$/;"	p	namespace:__anon10::test_native_overflow	file:	signature:(subtract(
identical	src/test/overflow.cpp	/^        static_assert(identical(subtract(saturated_overflow, INT8_C(0), INT8_C(0)), 0), "sg14::subtract test failed");$/;"	p	namespace:__anon10::test_saturated	file:	signature:(subtract(
identical	src/test/p0037.cpp	/^    static_assert(identical(p, fixed_point<uint16_t, -8>{254.00390625}), "Incorrect information in proposal section, Named Arithmetic Functions");$/;"	p	namespace:named_arithmetic1	file:	signature:(p, fixed_point<uint16_t, -8>{254.00390625})
identical	src/test/p0037.cpp	/^    static_assert(identical(p, fixed_point<uint64_t, -56>{254.00390625}),$/;"	p	namespace:named_arithmetic3	file:	signature:(p, fixed_point<uint64_t, -56>{254.00390625})
identical	src/test/p0037.cpp	/^    static_assert(identical(q1, fixed_point<uint64_t, -32>{0.5}), "Incorrect information in proposal section, Named Arithmetic Functions");$/;"	p	namespace:named_arithmetic5	file:	signature:(q1, fixed_point<uint64_t, -32>{0.5})
identical	src/test/p0037.cpp	/^    static_assert(identical(q2, fixed_point<uint32_t, 0>{0}), "Incorrect information in proposal section, Named Arithmetic Functions");$/;"	p	namespace:named_arithmetic5	file:	signature:(q2, fixed_point<uint32_t, 0>{0})
identical	src/test/p0037.cpp	/^    static_assert(identical(s, fixed_point<int64_t, 0>{0x7f0000007fLL}), "Incorrect information in proposal section, Named Arithmetic Functions");$/;"	p	namespace:named_arithmetic4	file:	signature:(s, fixed_point<int64_t, 0>{0x7f0000007fLL})
identical	src/test/p0554.cpp	/^        static_assert(identical(d, 21.875f), "position_paper test failed");$/;"	p	namespace:__anon14::bare_metal	file:	signature:(d, 21.875f)
identical	src/test/p0554.cpp	/^        static_assert(identical(d, 21.875f), "position_paper test failed");$/;"	p	namespace:__anon14::type_safe	file:	signature:(d, 21.875f)
identical	src/test/p0554.cpp	/^        static_assert(identical(quotient, elastic_fixed_point<7, 7>{.5}), "position_paper test failed");$/;"	p	namespace:__anon14::division	file:	signature:(quotient, elastic_fixed_point<7, 7>{.5})
identical	src/test/precise_integer.cpp	/^        static_assert(identical(closest_rounding_tag::convert<int>(-1.), -1), "sg14::closest_rounding_tag test failed");$/;"	p	namespace:__anon22::test_closest_rounding_tag	file:	signature:(closest_rounding_tag::convert<int>(
identical	src/test/precise_integer.cpp	/^        static_assert(identical(static_cast<int>(precise_integer<>{9876}), 9876), "precise_integer conversion test failed");$/;"	p	namespace:__anon22::test_conversion_operator	file:	signature:(static_cast<int>(
identical	src/test/safe_integer.cpp	/^    static_assert(identical($/;"	p	namespace:__anon11	file:	signature:(sg14::_impl::operate(
identical	src/test/safe_integer.cpp	/^static_assert(identical($/;"	p	file:	signature:(saturated_integer<short>(
int_digits	src/test/make_elastic_fixed_point.cpp	/^static constexpr auto int_digits = std::numeric_limits<int>::digits;$/;"	v	file:
integer_class	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int integer_class = is_elastic_integer<Lhs>::value+is_elastic_integer<Rhs>::value;$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
integer_class	include/sg14/auxiliary/safe_integer.h	/^            static constexpr int integer_class = is_safe_integer<Lhs>::value + is_safe_integer<Rhs>::value;$/;"	m	struct:sg14::_integer_impl::are_integer_class_operands	access:public
integer_class	src/single_header/fixed_point.h	/^            static constexpr int integer_class = is_elastic_integer<Lhs>::value+is_elastic_integer<Rhs>::value;$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
integer_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int integer_digits = Lhs::integer_digits+Rhs::fractional_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
integer_digits	src/test/elastic_fixed_point.cpp	/^    static constexpr int integer_digits = elastic_type::integer_digits;$/;"	m	struct:positive_elastic_test	file:	access:public
integer_or_float	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int integer_or_float =$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
integer_or_float	include/sg14/auxiliary/safe_integer.h	/^            static constexpr int integer_or_float = _impl::is_integer_or_float<Lhs>::value + _impl::is_integer_or_float<Rhs>::value;$/;"	m	struct:sg14::_integer_impl::are_integer_class_operands	access:public
integer_or_float	src/single_header/fixed_point.h	/^            static constexpr int integer_or_float =$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<lean_tag, OperationTag, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<lean_tag, _impl::divide_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<lean_tag, _impl::multiply_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<wide_tag, OperationTag, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<wide_tag, _impl::divide_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<wide_tag, _impl::multiply_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
is_arithmetic	include/sg14/bits/common.h	/^            static constexpr bool is_arithmetic = true;$/;"	m	struct:sg14::_impl::arithmetic_op	access:public
is_arithmetic	src/single_header/fixed_point.h	/^            static constexpr bool is_arithmetic = true;$/;"	m	struct:sg14::_impl::arithmetic_op	access:public
is_class_derived_from_number_base	include/sg14/bits/number_base.h	/^        struct is_class_derived_from_number_base : std::false_type {};$/;"	s	namespace:sg14::_impl	inherits:std::false_type
is_class_derived_from_number_base	include/sg14/bits/number_base.h	/^        struct is_class_derived_from_number_base<$/;"	s	namespace:sg14::_impl	inherits:std::true_type
is_class_derived_from_number_base	src/single_header/fixed_point.h	/^        struct is_class_derived_from_number_base : std::false_type {};$/;"	s	namespace:sg14::_impl	inherits:std::false_type
is_class_derived_from_number_base	src/single_header/fixed_point.h	/^        struct is_class_derived_from_number_base<$/;"	s	namespace:sg14::_impl	inherits:std::true_type
is_comparison	include/sg14/bits/common.h	/^            static constexpr bool is_comparison = true;$/;"	m	struct:sg14::_impl::comparison_op	access:public
is_comparison	src/single_header/fixed_point.h	/^            static constexpr bool is_comparison = true;$/;"	m	struct:sg14::_impl::comparison_op	access:public
is_composite	include/sg14/bits/number_base.h	/^    struct is_composite<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> : std::true_type {$/;"	s	namespace:sg14	inherits:std::true_type
is_composite	include/sg14/num_traits.h	/^    struct is_composite : std::false_type {$/;"	s	namespace:sg14	inherits:std::false_type
is_composite	src/single_header/fixed_point.h	/^    struct is_composite : std::false_type {$/;"	s	namespace:sg14	inherits:std::false_type
is_composite	src/single_header/fixed_point.h	/^    struct is_composite<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> : std::true_type {$/;"	s	namespace:sg14	inherits:std::true_type
is_composite_v	include/sg14/num_traits.h	/^    constexpr auto is_composite_v = is_composite<T>::value;$/;"	m	namespace:sg14
is_const_integer	include/sg14/auxiliary/const_integer.h	/^    struct is_const_integer : std::false_type {};$/;"	s	namespace:sg14	inherits:std::false_type
is_const_integer	include/sg14/auxiliary/const_integer.h	/^    struct is_const_integer<const_integer<Integral, Value>> : std::true_type {};$/;"	s	namespace:sg14	inherits:std::true_type
is_const_integer	src/single_header/fixed_point.h	/^    struct is_const_integer : std::false_type {};$/;"	s	namespace:sg14	inherits:std::false_type
is_const_integer	src/single_header/fixed_point.h	/^    struct is_const_integer<const_integer<Integral, Value>> : std::true_type {};$/;"	s	namespace:sg14	inherits:std::true_type
is_derived_from_number_base	include/sg14/bits/number_base.h	/^        struct is_derived_from_number_base : std::false_type {};$/;"	s	namespace:sg14::_impl	inherits:std::false_type
is_derived_from_number_base	include/sg14/bits/number_base.h	/^        struct is_derived_from_number_base<Derived, enable_if_t<std::is_class<Derived>::value>>$/;"	s	namespace:sg14::_impl	inherits:is_class_derived_from_number_base
is_derived_from_number_base	src/single_header/fixed_point.h	/^        struct is_derived_from_number_base : std::false_type {};$/;"	s	namespace:sg14::_impl	inherits:std::false_type
is_derived_from_number_base	src/single_header/fixed_point.h	/^        struct is_derived_from_number_base<Derived, enable_if_t<std::is_class<Derived>::value>>$/;"	s	namespace:sg14::_impl	inherits:is_class_derived_from_number_base
is_elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        struct is_elastic_integer : std::false_type {$/;"	s	namespace:sg14::_elastic_integer_impl	inherits:std::false_type
is_elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        struct is_elastic_integer<elastic_integer<Digits, Narrowest>> : std::true_type {$/;"	s	namespace:sg14::_elastic_integer_impl	inherits:std::true_type
is_elastic_integer	src/single_header/fixed_point.h	/^        struct is_elastic_integer : std::false_type {$/;"	s	namespace:sg14::_elastic_integer_impl	inherits:std::false_type
is_elastic_integer	src/single_header/fixed_point.h	/^        struct is_elastic_integer<elastic_integer<Digits, Narrowest>> : std::true_type {$/;"	s	namespace:sg14::_elastic_integer_impl	inherits:std::true_type
is_equal_to	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(lowest, zero), "numeric_limits test failed");$/;"	p	struct:unsigned_elastic_test	file:	access:public	signature:(lowest, zero)
is_equal_to	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(negative_min, negative_min), "comparison test error");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(negative_min, negative_min)
is_equal_to	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(zero, negative_zero), "comparison test error");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(zero, negative_zero)
is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(lowest, lowest), "comparison test error");$/;"	p	struct:number_test	access:public	signature:(lowest, lowest)
is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(max, max), "comparison test error");$/;"	p	struct:number_test	access:public	signature:(max, max)
is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(zero, 0.), "comparison test error");$/;"	p	struct:number_test	access:public	signature:(zero, 0.)
is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(zero, value_type(0.)), "zero-initialized value is not represented using zero");$/;"	p	struct:number_test	access:public	signature:(zero, value_type(0.))
is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(zero, zero), "comparison test error");$/;"	p	struct:number_test	access:public	signature:(zero, zero)
is_equal_to	src/test/number_test.h	/^constexpr bool is_equal_to(const Lhs& lhs, const Rhs& rhs)$/;"	f	signature:(const Lhs& lhs, const Rhs& rhs)
is_heterogeneous	include/sg14/bits/fixed_point_operators.h	/^        constexpr bool is_heterogeneous() {$/;"	f	namespace:sg14::_fixed_point_operators_impl	signature:()
is_heterogeneous	src/single_header/fixed_point.h	/^        constexpr bool is_heterogeneous() {$/;"	f	namespace:sg14::_impl::sg14::_fixed_point_operators_impl	signature:()
is_integer	include/sg14/bits/fixed_point_extras.h	/^        static constexpr bool is_integer = false;$/;"	m	struct:std::numeric_limits	access:public
is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than(lowest, min), "numeric_limits test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(lowest, min)
is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than(lowest, min), "numeric_limits test failed");$/;"	p	struct:unsigned_elastic_test	file:	access:public	signature:(lowest, min)
is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than(negative_min, min), "numeric_limits test failed");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(negative_min, min)
is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than(zero, min), "numeric_limits test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(zero, min)
is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than<elastic_type>(negative_min, min), "comparison test error");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(negative_min, min)
is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than<elastic_type>(negative_min, zero), "comparison test error");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(negative_min, zero)
is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than<elastic_type>(zero, min), "comparison test error");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(zero, min)
is_less_than	src/test/number_test.h	/^    static_assert(is_less_than(lowest, max), "numeric_limits test failed");$/;"	p	struct:number_test	access:public	signature:(lowest, max)
is_less_than	src/test/number_test.h	/^constexpr bool is_less_than(const Lesser& lesser, const Greater& greater)$/;"	f	signature:(const Lesser& lesser, const Greater& greater)
is_multiply_overflow	include/sg14/auxiliary/overflow.h	/^        constexpr bool is_multiply_overflow(const Lhs& lhs, const Rhs& rhs)$/;"	f	namespace:_overflow_impl	signature:(const Lhs& lhs, const Rhs& rhs)
is_number	src/test/precise_integer.cpp	/^    namespace is_number {$/;"	n	namespace:__anon22	file:
is_precise_integer	include/sg14/auxiliary/precise_integer.h	/^        struct is_precise_integer : std::false_type {$/;"	s	namespace:sg14::_precise_integer_impl	inherits:std::false_type
is_precise_integer	include/sg14/auxiliary/precise_integer.h	/^        struct is_precise_integer<precise_integer<Rep, RoundingTag>> : std::true_type {$/;"	s	namespace:sg14::_precise_integer_impl	inherits:std::true_type
is_safe_integer	include/sg14/auxiliary/safe_integer.h	/^        struct is_safe_integer$/;"	s	namespace:sg14::_integer_impl	inherits:std::false_type
is_safe_integer	include/sg14/auxiliary/safe_integer.h	/^        struct is_safe_integer<safe_integer<Rep, OverflowTag>>$/;"	s	namespace:sg14::_integer_impl	inherits:std::true_type
is_signed	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr bool is_signed = LhsTraits::is_signed || RhsTraits::is_signed; $/;"	m	struct:sg14::_impl::policy	access:public
is_signed	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr bool is_signed = LhsTraits::is_signed || RhsTraits::is_signed;$/;"	m	struct:sg14::_impl::policy	access:public
is_signed	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr bool is_signed = true;$/;"	m	struct:sg14::_impl::policy	access:public
is_signed	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr bool is_signed =$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
is_signed	src/single_header/fixed_point.h	/^            static constexpr bool is_signed = LhsTraits::is_signed || RhsTraits::is_signed;$/;"	m	struct:sg14::_impl::policy	access:public
is_signed	src/single_header/fixed_point.h	/^            static constexpr bool is_signed = true;$/;"	m	struct:sg14::_impl::policy	access:public
is_signed	src/test/elastic_integer.cpp	/^        static constexpr bool is_signed = numeric_limits::is_signed;$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
leading_bits	include/sg14/auxiliary/numeric.h	/^    constexpr int leading_bits(const Integer& value)$/;"	f	namespace:sg14	signature:(const Integer& value)
leading_bits	include/sg14/auxiliary/numeric.h	/^    constexpr int leading_bits(int value)$/;"	f	namespace:sg14	signature:(int value)
leading_bits	src/single_header/fixed_point.h	/^    constexpr int leading_bits(const Integer& value)$/;"	f	namespace:sg14	signature:(const Integer& value)
leading_bits	src/test/number_test.h	/^    static_assert(sg14::leading_bits(max)==0, "leading_bits test failed");$/;"	p	struct:number_test	access:public	signature:(max)
leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(0)) == 32, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(1)) == 31, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(127)) == 25, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(2)) == 30, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(3)) == 30, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(4)) == 29, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(63)) == 26, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
leading_bits	src/test/numeric.cpp	/^        static_assert(leading_bits(UINT32_C(64)) == 25, "sg14::leading_bits");$/;"	p	namespace:__anon13::test_leading_bits	file:	signature:(UINT32_C(
less_than_op	include/sg14/bits/common.h	/^        struct less_than_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
less_than_op	src/single_header/fixed_point.h	/^        struct less_than_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
less_than_or_equal_op	include/sg14/bits/common.h	/^        struct less_than_or_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
less_than_or_equal_op	src/single_header/fixed_point.h	/^        struct less_than_or_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
literals	include/sg14/auxiliary/const_integer.h	/^    namespace literals {$/;"	n	namespace:sg14
literals	include/sg14/auxiliary/elastic_fixed_point.h	/^    namespace literals {$/;"	n	namespace:sg14
literals	src/single_header/fixed_point.h	/^    namespace literals {$/;"	n	namespace:sg14
lowest	include/sg14/auxiliary/elastic_integer.h	/^        struct lowest<Rep, false> {$/;"	s	namespace:std::_elastic_integer_impl
lowest	include/sg14/auxiliary/elastic_integer.h	/^        struct lowest<Rep, true> {$/;"	s	namespace:std::_elastic_integer_impl
lowest	include/sg14/bits/limits.h	/^        static constexpr SG14_INT128 lowest()$/;"	f	struct:std::numeric_limits	access:public	signature:()
lowest	src/single_header/fixed_point.h	/^        struct lowest<Rep, false> {$/;"	s	namespace:std::_elastic_integer_impl
lowest	src/single_header/fixed_point.h	/^        struct lowest<Rep, true> {$/;"	s	namespace:std::_elastic_integer_impl
lowest	src/test/elastic_integer.cpp	/^        static_assert(numeric_limits::lowest()==lowest, "numeric_limits<elastic_integer<>>::lowest test failed");$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
lowest	src/test/elastic_integer.cpp	/^    static_assert(std::numeric_limits<elastic_integer<8, int>>::lowest()==-255, "");$/;"	p	namespace:__anon1	file:	signature:()
lowest	src/test/elastic_integer.cpp	/^    static_assert(std::numeric_limits<int8_t>::lowest()==-128, "");$/;"	p	namespace:__anon1	file:	signature:()
lowest_from_rep	src/test/number_test.h	/^    static constexpr auto lowest_from_rep = sg14::_impl::from_rep<value_type>(sg14::_impl::to_rep(lowest));$/;"	m	struct:number_test	access:public
lsz	src/test/make_elastic_fixed_point.cpp	/^    static constexpr int lsz = 1 << (-type::fractional_digits);$/;"	m	struct:make_elastic_test	file:	access:public
lsz1	src/test/make_elastic_fixed_point.cpp	/^    static constexpr int lsz1 = lsz * 2;$/;"	m	struct:make_elastic_test	file:	access:public
m_TwiddleTable	src/test/fft.h	/^        std::vector<std::complex<T>> m_TwiddleTable;$/;"	m	class:Algorithms::FFT	access:private
magnitude_squared	src/common/sample_functions.h	/^constexpr FP magnitude_squared(const FP & x, const FP & y, const FP & z)$/;"	f	signature:(const FP & x, const FP & y, const FP & z)
main	src/arbitrary_precision_cpu_test/test1.cpp	/^int main (void) {$/;"	f	signature:(void)
main	src/arbitrary_precision_cpu_test/test2.cpp	/^int main (void) {$/;"	f	signature:(void)
main	src/benchmark/review.py	/^def main(args):$/;"	f	access:public
main	src/test/main.cpp	/^int main(int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
make_elastic_fixed_point	include/sg14/auxiliary/elastic_fixed_point.h	/^        -> decltype(make_elastic_fixed_point<int, std::intmax_t, _const_integer_impl::digits_to_integral<Digits...>::value>()) {$/;"	f	namespace:sg14::literals	signature:()
make_elastic_fixed_point	include/sg14/auxiliary/elastic_fixed_point.h	/^    make_elastic_fixed_point(Integral value)$/;"	f	namespace:sg14	signature:(Integral value)
make_elastic_fixed_point	include/sg14/auxiliary/elastic_fixed_point.h	/^    make_elastic_fixed_point(const_integer<Integral, Value> = const_integer<Integral, Value>{})$/;"	f	namespace:sg14	signature:(const_integer<Integral, Value> = const_integer<Integral, Value>{})
make_elastic_test	src/test/make_elastic_fixed_point.cpp	/^struct make_elastic_test {$/;"	s	file:
make_elastic_test::elastic_value	src/test/make_elastic_fixed_point.cpp	/^    static constexpr auto elastic_value = make_elastic_fixed_point(value);$/;"	m	struct:make_elastic_test	file:	access:public
make_elastic_test::lsz	src/test/make_elastic_fixed_point.cpp	/^    static constexpr int lsz = 1 << (-type::fractional_digits);$/;"	m	struct:make_elastic_test	file:	access:public
make_elastic_test::lsz1	src/test/make_elastic_fixed_point.cpp	/^    static constexpr int lsz1 = lsz * 2;$/;"	m	struct:make_elastic_test	file:	access:public
make_elastic_test::static_assert	src/test/make_elastic_fixed_point.cpp	/^    static_assert(Value<=0 || (Value >> sg14::_impl::max<int>(0, type::integer_digits-1))!=0, "elastic_fixed_point type capacity is too small");$/;"	p	struct:make_elastic_test	file:	access:public	signature:(Value<=0 || (Value >> sg14::_impl::max<int>(0, type::integer_digits-1))!=0, Ó)
make_elastic_test::static_assert	src/test/make_elastic_fixed_point.cpp	/^    static_assert(Value==((Value\/lsz)*lsz), "fractional_digits is too low");$/;"	p	struct:make_elastic_test	file:	access:public	signature:(Value==((Value/lsz)*lsz), Ó)
make_elastic_test::static_assert	src/test/make_elastic_fixed_point.cpp	/^    static_assert(Value==0 || Value!=((Value\/lsz1)*lsz1), "fractional_digits is too high");$/;"	p	struct:make_elastic_test	file:	access:public	signature:(Value==0 || Value!=((Value/lsz1)*lsz1), Ó)
make_elastic_test::static_assert	src/test/make_elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<type>::is_signed, "signage doesn't match value");$/;"	p	struct:make_elastic_test	file:	access:public	signature:(std::numeric_limits<type>::is_signed, Ó)
make_elastic_test::value	src/test/make_elastic_fixed_point.cpp	/^    static constexpr auto value = const_integer<std::int64_t, Value>{};$/;"	m	struct:make_elastic_test	file:	access:public
make_precise_elastic	src/test/precise_elastic_integer.cpp	/^    constexpr make_precise_elastic(Input const& input)$/;"	f	namespace:sg14	signature:(Input const& input)
make_psefp	src/test/precise_safe_elastic_fixed_point.cpp	/^    constexpr make_psefp(Input const& input)$/;"	f	namespace:sg14	signature:(Input const& input)
make_psefp	src/test/precise_safe_elastic_fixed_point.cpp	/^    constexpr make_psefp(const const_integer<Integral, Value, Digits, Exponent>&)$/;"	f	namespace:sg14	signature:(const const_integer<Integral, Value, Digits, Exponent>&)
make_psei	src/test/precise_safe_elastic_integer.cpp	/^    constexpr make_psei(Input const& input)$/;"	f	namespace:sg14	signature:(Input const& input)
make_row	src/benchmark/review.py	/^def make_row(commit, benchmarks, names):$/;"	f	access:public
make_safe_elastic	src/test/safe_elastic_integer.cpp	/^    constexpr make_safe_elastic(Input const& input)$/;"	f	namespace:sg14	signature:(Input const& input)
make_safe_integer	include/sg14/auxiliary/safe_integer.h	/^        -> decltype(make_safe_integer<OverflowTag>(_overflow_impl::operate<OverflowTag, OperatorTag>()(lhs.data(), rhs.data())))$/;"	f	namespace:sg14::_impl	signature:(_overflow_impl::operate<OverflowTag, OperatorTag>(
make_signed	include/sg14/auxiliary/boost.multiprecision.h	/^    struct make_signed<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>> {$/;"	s	namespace:sg14
make_signed	include/sg14/auxiliary/boost.multiprecision.h	/^    struct make_signed<_bmp::number<Backend, ExpressionTemplates>> {$/;"	s	namespace:sg14
make_signed	include/sg14/auxiliary/boost.simd.h	/^    struct make_signed<boost::simd::pack<T, N>> {$/;"	s	namespace:sg14
make_signed	include/sg14/auxiliary/multiprecision.h	/^    struct make_signed<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>> {$/;"	s	namespace:sg14
make_signed	include/sg14/auxiliary/multiprecision.h	/^    struct make_signed<_bmp::number<Backend, ExpressionTemplates>> {$/;"	s	namespace:sg14
make_signed	include/sg14/bits/number_base.h	/^    struct make_signed<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
make_signed	src/single_header/fixed_point.h	/^    struct make_signed<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
make_ufixed	src/test/fixed_point_common.h	/^static_assert(make_ufixed<4, 4>(make_fixed<7, 8>(1.5))==1.5, "sg14::fixed_point test failed");$/;"	p	signature:(make_fixed<7, 8>(
make_ufixed	src/test/fixed_point_common.h	/^static_assert(make_ufixed<8, 8>(make_fixed<3, 4>(3.25))==3.25, "sg14::fixed_point test failed");$/;"	p	signature:(make_fixed<3, 4>(
make_unsigned	include/sg14/auxiliary/boost.multiprecision.h	/^    struct make_unsigned<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>> {$/;"	s	namespace:sg14
make_unsigned	include/sg14/auxiliary/boost.multiprecision.h	/^    struct make_unsigned<_bmp::number<Backend, ExpressionTemplates>> {$/;"	s	namespace:sg14
make_unsigned	include/sg14/auxiliary/boost.simd.h	/^    struct make_unsigned<boost::simd::pack<T, N>> {$/;"	s	namespace:sg14
make_unsigned	include/sg14/auxiliary/multiprecision.h	/^    struct make_unsigned<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>> {$/;"	s	namespace:sg14
make_unsigned	include/sg14/auxiliary/multiprecision.h	/^    struct make_unsigned<_bmp::number<Backend, ExpressionTemplates>> {$/;"	s	namespace:sg14
make_unsigned	include/sg14/bits/number_base.h	/^    struct make_unsigned<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
make_unsigned	src/single_header/fixed_point.h	/^    struct make_unsigned<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
max	include/sg14/bits/common.h	/^        constexpr T max(T a, T b)$/;"	f	namespace:sg14::_impl	signature:(T a, T b)
max	include/sg14/bits/limits.h	/^        static constexpr SG14_INT128 max()$/;"	f	struct:std::numeric_limits	access:public	signature:()
max	src/single_header/fixed_point.h	/^        constexpr T max(T a, T b)$/;"	f	namespace:sg14::_impl	signature:(T a, T b)
max	src/test/elastic_integer.cpp	/^                        std::numeric_limits<elastic_integer<10>>::max()-std::numeric_limits<elastic_integer<9>>::max(),$/;"	p	class:__anon1::test_subtract::std::numeric_limits	file:	signature:()
max	src/test/elastic_integer.cpp	/^                        std::numeric_limits<elastic_integer<15, unsigned>>::max()+std::numeric_limits<elastic_integer<19>>::max(),$/;"	p	class:__anon1::test_subtract::std::numeric_limits	file:	signature:()
max	src/test/elastic_integer.cpp	/^        static_assert(numeric_limits::max()==max, "numeric_limits<elastic_integer<>>::max test failed");$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
max	src/test/elastic_integer.cpp	/^    static_assert(std::numeric_limits<elastic_integer<8, int>>::max()==255, "");$/;"	p	namespace:__anon1	file:	signature:()
max	src/test/fixed_point_common.h	/^static_assert(std::numeric_limits<uint8>::max()\/3==85, "");$/;"	p	signature:()
max	src/test/overflow.cpp	/^                std::numeric_limits<int32_t>::max()), "sg14::multiply test failed");$/;"	p	class:__anon10::test_saturated::std::numeric_limits	file:	signature:()
max	src/test/overflow.cpp	/^                std::numeric_limits<short>::max()), "sg14::convert test failed");$/;"	p	class:__anon10::test_saturated::std::numeric_limits	file:	signature:()
max	src/test/safe_elastic_integer.cpp	/^        static_assert(std::numeric_limits<safe_saturating_integer_2>::lowest() < std::numeric_limits<safe_saturating_integer_2>::max(), "");$/;"	p	class:__anon15::test_numeric_limits::std::numeric_limits	file:	signature:()
max	src/test/safe_integer.cpp	/^static_assert(saturated_integer<int8_t>(saturated_integer<int8_t>(100)+saturated_integer<int8_t>(100))==numeric_limits<int8_t>::max(),$/;"	p	class:numeric_limits	file:	signature:()
max	src/test/safe_integer.cpp	/^static_assert(saturated_integer<uint8_t>(100)-saturated_integer<int16_t>(100000)==100-numeric_limits<int16_t>::max(),$/;"	p	class:numeric_limits	file:	signature:()
max_from_rep	src/test/number_test.h	/^    static constexpr auto max_from_rep = sg14::_impl::from_rep<value_type>(sg14::_impl::to_rep(max));$/;"	m	struct:number_test	access:public
min	include/sg14/bits/common.h	/^        constexpr T min(T a, T b)$/;"	f	namespace:sg14::_impl	signature:(T a, T b)
min	include/sg14/bits/limits.h	/^        static constexpr SG14_INT128 min()$/;"	f	struct:std::numeric_limits	access:public	signature:()
min	src/single_header/fixed_point.h	/^        constexpr T min(T a, T b)$/;"	f	namespace:sg14::_impl	signature:(T a, T b)
min	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(min*make_elastic_fixed_point(1_c), min), "operator* test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
min	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(min*make_elastic_fixed_point(2_c), min+min), "operator* test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
min	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(min*make_elastic_fixed_point(3_c), min+min+min), "operator* test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
min	src/test/elastic_integer.cpp	/^        static_assert(numeric_limits::min()==min, "numeric_limits<elastic_integer<>>::min test failed");$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
min	src/test/fixed_point_common.h	/^    static constexpr fixed_point min = sg14::_impl::from_rep<fixed_point>(rep(1));$/;"	m	struct:FixedPointTesterOutsize	access:public
min	src/test/fixed_point_common.h	/^    static constexpr fixed_point min = super::min;$/;"	m	struct:FixedPointTester	access:public
min	src/test/fixed_point_common.h	/^    static_assert(divide(84 * min, 84) == min, "basic arithmetic isn't working");$/;"	m	struct:FixedPointTester	access:public
minus_op	include/sg14/bits/common.h	/^        struct minus_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
minus_op	src/single_header/fixed_point.h	/^        struct minus_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
mul	src/benchmark/benchmark.cpp	/^FIXED_POINT_BENCHMARK_COMPLETE(mul);$/;"	v
mul	src/benchmark/benchmark.cpp	/^static void mul(benchmark::State& state)$/;"	f	file:	signature:(benchmark::State& state)
multiply	src/test/p0381.cpp	/^    auto multiply(Operand a, Operand b)$/;"	f	namespace:sample5	signature:(Operand a, Operand b)
multiply	src/test/p0381.cpp	/^    auto multiply(uint32_t a, uint32_t b)$/;"	f	namespace:sample3	signature:(uint32_t a, uint32_t b)
multiply	src/test/p0381.cpp	/^    auto multiply(unsigned a, unsigned b)$/;"	f	namespace:sample2	signature:(unsigned a, unsigned b)
multiply	src/test/p0381.cpp	/^    uint8_t multiply(uint8_t a, uint8_t b)$/;"	f	namespace:sample1	signature:(uint8_t a, uint8_t b)
multiply_op	include/sg14/bits/common.h	/^        struct multiply_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
multiply_op	src/single_header/fixed_point.h	/^        struct multiply_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
n	src/test/p0037.cpp	/^    constexpr auto n = fixed_point<uint32_t, -16>{1};$/;"	m	namespace:named_arithmetic5	file:
n	src/test/snippets.cpp	/^constexpr auto n = fixed_point<char, -3>{-2.75};$/;"	m	namespace:__anon3::define_a_fixed_point_value	file:
n	src/test/snippets.cpp	/^constexpr auto n = make_elastic_fixed_point(const_integer<std::uint8_t, 0xAA>{});$/;"	m	namespace:__anon3::define_a_fast_object_using_make_elastic	file:
n	src/test/snippets.cpp	/^constexpr auto n = make_elastic_fixed_point<char>(const_integer<short, 1536>{});$/;"	m	namespace:__anon3::define_a_small_object_using_make_elastic	file:
named_arithmetic1	src/test/p0037.cpp	/^namespace named_arithmetic1 {$/;"	n	file:
named_arithmetic1::f	src/test/p0037.cpp	/^    constexpr auto f = fixed_point<uint8_t, -4>{15.9375};$/;"	m	namespace:named_arithmetic1	file:
named_arithmetic1::identical	src/test/p0037.cpp	/^    static_assert(identical(p, fixed_point<uint16_t, -8>{254.00390625}), "Incorrect information in proposal section, Named Arithmetic Functions");$/;"	p	namespace:named_arithmetic1	file:	signature:(p, fixed_point<uint16_t, -8>{254.00390625})
named_arithmetic1::p	src/test/p0037.cpp	/^    constexpr auto p = multiply(f, f);$/;"	m	namespace:named_arithmetic1	file:
named_arithmetic3	src/test/p0037.cpp	/^namespace named_arithmetic3 {$/;"	n	file:
named_arithmetic3::f	src/test/p0037.cpp	/^    constexpr auto f = fixed_point<unsigned, -28>{15.9375};$/;"	m	namespace:named_arithmetic3	file:
named_arithmetic3::identical	src/test/p0037.cpp	/^    static_assert(identical(p, fixed_point<uint64_t, -56>{254.00390625}),$/;"	p	namespace:named_arithmetic3	file:	signature:(p, fixed_point<uint64_t, -56>{254.00390625})
named_arithmetic3::p	src/test/p0037.cpp	/^    constexpr auto p = multiply(f, f);$/;"	m	namespace:named_arithmetic3	file:
named_arithmetic4	src/test/p0037.cpp	/^namespace named_arithmetic4 {$/;"	n	file:
named_arithmetic4::a1	src/test/p0037.cpp	/^    constexpr auto a1 = fixed_point<int8_t, 32>{0x7f00000000LL};$/;"	m	namespace:named_arithmetic4	file:
named_arithmetic4::a2	src/test/p0037.cpp	/^    constexpr auto a2 = fixed_point<int8_t, 0>{0x7f};$/;"	m	namespace:named_arithmetic4	file:
named_arithmetic4::identical	src/test/p0037.cpp	/^    static_assert(identical(s, fixed_point<int64_t, 0>{0x7f0000007fLL}), "Incorrect information in proposal section, Named Arithmetic Functions");$/;"	p	namespace:named_arithmetic4	file:	signature:(s, fixed_point<int64_t, 0>{0x7f0000007fLL})
named_arithmetic4::s	src/test/p0037.cpp	/^    constexpr auto s = add(a1, a2);$/;"	m	namespace:named_arithmetic4	file:
named_arithmetic5	src/test/p0037.cpp	/^namespace named_arithmetic5 {$/;"	n	file:
named_arithmetic5::d	src/test/p0037.cpp	/^    constexpr auto d = fixed_point<uint32_t, -16>{2};$/;"	m	namespace:named_arithmetic5	file:
named_arithmetic5::identical	src/test/p0037.cpp	/^    static_assert(identical(q1, fixed_point<uint64_t, -32>{0.5}), "Incorrect information in proposal section, Named Arithmetic Functions");$/;"	p	namespace:named_arithmetic5	file:	signature:(q1, fixed_point<uint64_t, -32>{0.5})
named_arithmetic5::identical	src/test/p0037.cpp	/^    static_assert(identical(q2, fixed_point<uint32_t, 0>{0}), "Incorrect information in proposal section, Named Arithmetic Functions");$/;"	p	namespace:named_arithmetic5	file:	signature:(q2, fixed_point<uint32_t, 0>{0})
named_arithmetic5::n	src/test/p0037.cpp	/^    constexpr auto n = fixed_point<uint32_t, -16>{1};$/;"	m	namespace:named_arithmetic5	file:
named_arithmetic5::q1	src/test/p0037.cpp	/^    constexpr auto q1 = n\/d;$/;"	m	namespace:named_arithmetic5	file:
named_arithmetic5::q2	src/test/p0037.cpp	/^    constexpr auto q2 = divide(n, d);$/;"	m	namespace:named_arithmetic5	file:
narrowest_width	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr _digits_type narrowest_width = _impl::max($/;"	m	struct:sg14::_impl::operate_params	access:public
narrowest_width	src/single_header/fixed_point.h	/^            static constexpr _digits_type narrowest_width = _impl::max($/;"	m	struct:sg14::_impl::operate_params	access:public
native_overflow	include/sg14/auxiliary/overflow.h	/^    } native_overflow{};$/;"	s	namespace:sg14
native_overflow_tag	include/sg14/auxiliary/overflow.h	/^    static constexpr struct native_overflow_tag {$/;"	s	namespace:sg14
necessary_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int necessary_digits = integer_digits+fractional_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
negative_digits	include/sg14/auxiliary/overflow.h	/^        struct negative_digits$/;"	s	namespace:sg14::_overflow_impl	inherits:std::integral_constant
normalize	src/test/fft.h	/^    static int normalize(std::vector<std::complex<T>> &in, int adjustment) {$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<T>> &in, int adjustment)
not_equal_op	include/sg14/bits/common.h	/^        struct not_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
not_equal_op	src/single_header/fixed_point.h	/^        struct not_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
num_digits_v	src/test/p0675.cpp	/^        template<class T> constexpr auto num_digits_v = sg14::digits_v<T>;$/;"	m	namespace:__anon7::desirata	file:
number_base	include/sg14/bits/number_base.h	/^            constexpr number_base(const rep& r)$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const rep& r)
number_base	include/sg14/bits/number_base.h	/^        class number_base {$/;"	c	namespace:sg14::_impl
number_base	src/single_header/fixed_point.h	/^            constexpr number_base(const rep& r)$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const rep& r)
number_base	src/single_header/fixed_point.h	/^        class number_base {$/;"	c	namespace:sg14::_impl
number_base_traits	src/test/precise_integer.cpp	/^    namespace number_base_traits {$/;"	n	namespace:__anon22	file:
number_test	src/test/number_test.h	/^struct number_test {$/;"	s
number_test::identical	src/test/number_test.h	/^    static_assert(identical(lowest_from_rep, lowest), "sg14::_impl::to_rep & from_rep test failed");$/;"	p	struct:number_test	access:public	signature:(lowest_from_rep, lowest)
number_test::identical	src/test/number_test.h	/^    static_assert(identical(max_from_rep, max), "sg14::_impl::to_rep & from_rep test failed");$/;"	p	struct:number_test	access:public	signature:(max_from_rep, max)
number_test::identical	src/test/number_test.h	/^    static_assert(identical(zero_from_rep, zero), "sg14::_impl::to_rep & from_rep test failed");$/;"	p	struct:number_test	access:public	signature:(zero_from_rep, zero)
number_test::is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(lowest, lowest), "comparison test error");$/;"	p	struct:number_test	access:public	signature:(lowest, lowest)
number_test::is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(max, max), "comparison test error");$/;"	p	struct:number_test	access:public	signature:(max, max)
number_test::is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(zero, 0.), "comparison test error");$/;"	p	struct:number_test	access:public	signature:(zero, 0.)
number_test::is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(zero, value_type(0.)), "zero-initialized value is not represented using zero");$/;"	p	struct:number_test	access:public	signature:(zero, value_type(0.))
number_test::is_equal_to	src/test/number_test.h	/^    static_assert(is_equal_to(zero, zero), "comparison test error");$/;"	p	struct:number_test	access:public	signature:(zero, zero)
number_test::is_less_than	src/test/number_test.h	/^    static_assert(is_less_than(lowest, max), "numeric_limits test failed");$/;"	p	struct:number_test	access:public	signature:(lowest, max)
number_test::leading_bits	src/test/number_test.h	/^    static_assert(sg14::leading_bits(max)==0, "leading_bits test failed");$/;"	p	struct:number_test	access:public	signature:(max)
number_test::lowest_from_rep	src/test/number_test.h	/^    static constexpr auto lowest_from_rep = sg14::_impl::from_rep<value_type>(sg14::_impl::to_rep(lowest));$/;"	m	struct:number_test	access:public
number_test::max_from_rep	src/test/number_test.h	/^    static constexpr auto max_from_rep = sg14::_impl::from_rep<value_type>(sg14::_impl::to_rep(max));$/;"	m	struct:number_test	access:public
number_test::sg14::digits::value	src/test/number_test.h	/^    static_assert(sg14::leading_bits(zero)==sg14::digits<value_type>::value, "leading_bits test failed");$/;"	m	class:number_test::sg14::digits	access:public
number_test::sg14::digits::value	src/test/number_test.h	/^    static_assert(sg14::used_bits(max)==sg14::digits<value_type>::value, "used_bits test failed");$/;"	m	class:number_test::sg14::digits	access:public
number_test::static_assert	src/test/number_test.h	/^    static_assert(numeric_limits::is_specialized, "std::numeric_limits is not specialized for this type");$/;"	p	struct:number_test	access:public	signature:(numeric_limits::is_specialized, Ó)
number_test::static_assert	src/test/number_test.h	/^    static_assert(sg14::digits<value_type>::value$/;"	p	struct:number_test	access:public	signature:(sg14::digits<value_type>::value ==sg14::digits<sg14::set_digits_t<value_type, sg14::digits<value_type>::value>>::value, Ó)
number_test::used_bits	src/test/number_test.h	/^    static_assert(sg14::used_bits(zero)==0, "used_bits test failed");$/;"	p	struct:number_test	access:public	signature:(zero)
number_test::zero	src/test/number_test.h	/^    static constexpr value_type zero = sg14::_impl::from_rep<value_type>(0);$/;"	m	struct:number_test	access:public
number_test::zero_from_rep	src/test/number_test.h	/^    static constexpr auto zero_from_rep = sg14::_impl::from_rep<value_type>(sg14::_impl::to_rep(zero));$/;"	m	struct:number_test	access:public
number_test_by_rep	src/test/number_test.h	/^struct number_test_by_rep$/;"	s	inherits:number_test_suite,number_test_suite,number_test_suite,number_test_suite,number_test_suite,number_test_suite,number_test_suite,number_test_suite,number_test_suite,number_test_suite,number_test_suite
number_test_by_rep_by_tag	src/test/number_test.h	/^struct number_test_by_rep_by_tag {$/;"	s
number_test_suite	src/test/number_test.h	/^struct number_test_suite$/;"	s	inherits:number_test,TypeSpecificTestSuite
numeric_limits	include/sg14/auxiliary/boost.simd.h	/^    struct numeric_limits<boost::simd::pack<T, N>> : numeric_limits<T> {};$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits	include/sg14/auxiliary/const_integer.h	/^    struct numeric_limits<sg14::const_integer<Integral, Value, Digits, Zeros>>$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits	include/sg14/auxiliary/elastic_integer.h	/^    struct numeric_limits<sg14::elastic_integer<Digits, Narrowest>>$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits	include/sg14/auxiliary/safe_integer.h	/^    struct numeric_limits<sg14::safe_integer<Rep, OverflowTag>>$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits	include/sg14/bits/fixed_point_extras.h	/^    struct numeric_limits<sg14::fixed_point<Rep, Exponent>>$/;"	s	namespace:std	inherits:std::numeric_limits
numeric_limits	include/sg14/bits/limits.h	/^    struct numeric_limits<SG14_INT128> : numeric_limits<long long> {$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits	include/sg14/bits/limits.h	/^    struct numeric_limits<SG14_UINT128> : numeric_limits<unsigned long long> {$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits	include/sg14/bits/number_base.h	/^    struct numeric_limits<sg14::_impl::number_base<Derived, Rep>>$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits	src/single_header/fixed_point.h	/^    struct numeric_limits<sg14::_impl::number_base<Derived, Rep>>$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits	src/single_header/fixed_point.h	/^    struct numeric_limits<sg14::const_integer<Integral, Value, Digits, Zeros>>$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits	src/single_header/fixed_point.h	/^    struct numeric_limits<sg14::elastic_integer<Digits, Narrowest>>$/;"	s	namespace:std	inherits:numeric_limits
numeric_limits::max	src/test/safe_integer.cpp	/^static_assert(saturated_integer<int8_t>(saturated_integer<int8_t>(100)+saturated_integer<int8_t>(100))==numeric_limits<int8_t>::max(),$/;"	p	class:numeric_limits	file:	signature:()
numeric_limits::max	src/test/safe_integer.cpp	/^static_assert(saturated_integer<uint8_t>(100)-saturated_integer<int16_t>(100000)==100-numeric_limits<int16_t>::max(),$/;"	p	class:numeric_limits	file:	signature:()
op	include/sg14/auxiliary/const_integer.h	/^        -> decltype(op(LhsValue, RhsValue))$/;"	f	namespace:sg14::_const_integer_impl	signature:(LhsValue, RhsValue)
op	include/sg14/auxiliary/const_integer.h	/^        -> decltype(op(LhsValue, rhs)) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(LhsValue, rhs)
op	include/sg14/auxiliary/const_integer.h	/^        -> decltype(op(lhs, RhsValue)) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(lhs, RhsValue)
op	include/sg14/auxiliary/elastic_integer.h	/^        -> decltype(op(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(lhs.data(), rhs.data())
op	include/sg14/bits/fixed_point_operators.h	/^        -> decltype(op(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(lhs.data(), rhs.data())
op	include/sg14/bits/number_base.h	/^        -> decltype(op(lhs, static_cast<Lhs>(static_cast<const RhsDerived&>(rhs))))$/;"	f	namespace:sg14::_impl	signature:(lhs, static_cast<Lhs>(static_cast<const RhsDerived&>(rhs)))
op	include/sg14/bits/number_base.h	/^        -> decltype(op(rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(rhs.data())
op	src/single_header/fixed_point.h	/^        -> decltype(op(LhsValue, RhsValue))$/;"	f	namespace:sg14::_const_integer_impl	signature:(LhsValue, RhsValue)
op	src/single_header/fixed_point.h	/^        -> decltype(op(LhsValue, rhs)) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(LhsValue, rhs)
op	src/single_header/fixed_point.h	/^        -> decltype(op(lhs, RhsValue)) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(lhs, RhsValue)
op	src/single_header/fixed_point.h	/^        -> decltype(op(lhs, static_cast<Lhs>(static_cast<const RhsDerived&>(rhs))))$/;"	f	namespace:sg14::_impl	signature:(lhs, static_cast<Lhs>(static_cast<const RhsDerived&>(rhs)))
op	src/single_header/fixed_point.h	/^        -> decltype(op(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(lhs.data(), rhs.data())
op	src/single_header/fixed_point.h	/^        -> decltype(op(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl::sg14::_impl	signature:(lhs.data(), rhs.data())
op	src/single_header/fixed_point.h	/^        -> decltype(op(rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(rhs.data())
operate	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::add_tag)
operate	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::divide_tag)
operate	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::multiply_tag)
operate	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::subtract_tag)
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<OverflowTag, _impl::divide_op> {$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<native_overflow_tag, Operator,$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<native_overflow_tag, _impl::multiply_op> {$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<native_overflow_tag, _impl::subtract_op> {$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<saturated_overflow_tag, Operator,$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<saturated_overflow_tag, _impl::multiply_op> {$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<saturated_overflow_tag, _impl::subtract_op> {$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<throwing_overflow_tag, Operator,$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<throwing_overflow_tag, _impl::multiply_op> {$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/overflow.h	/^        struct operate<throwing_overflow_tag, _impl::subtract_op> {$/;"	s	namespace:_overflow_impl
operate	include/sg14/auxiliary/safe_integer.h	/^        -> decltype(_overflow_impl::operate<OverflowTag, OperatorTag>()(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:()
operate	include/sg14/bits/fixed_point_named.h	/^    -> decltype(_impl::fp::operate<_impl::fp::division_named_function_tag>(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::divide_tag)
operate	include/sg14/bits/fixed_point_named.h	/^    -> decltype(_impl::fp::operate<_impl::fp::named_function_tag>(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::add_tag)
operate	include/sg14/bits/fixed_point_named.h	/^    -> decltype(_impl::fp::operate<_impl::fp::named_function_tag>(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::multiply_tag)
operate	include/sg14/bits/fixed_point_named.h	/^    -> decltype(_impl::fp::operate<_impl::fp::named_function_tag>(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::subtract_tag)
operate	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::add_tag)
operate	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::multiply_tag)
operate	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::subtract_tag)
operate	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(_impl::fp::operate<_impl::fp::division_arithmetic_operator_tag>(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::divide_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, add_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, add_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, bitwise_and_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_and_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, bitwise_or_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_or_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, bitwise_xor_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_xor_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, divide_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, divide_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, equal_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, greater_than_or_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, greater_than_or_equal_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, greater_than_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, greater_than_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, less_than_or_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, less_than_or_equal_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, less_than_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, less_than_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, multiply_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, multiply_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, not_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, not_equal_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, subtract_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, subtract_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(rhs, minus_tag))$/;"	f	namespace:sg14::_impl	signature:(rhs, minus_tag)
operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(rhs, plus_tag))$/;"	f	namespace:sg14::_impl	signature:(rhs, plus_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, add_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, add_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, bitwise_and_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_and_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, bitwise_or_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_or_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, bitwise_xor_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_xor_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, divide_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, divide_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, equal_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, greater_than_or_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, greater_than_or_equal_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, greater_than_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, greater_than_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, less_than_or_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, less_than_or_equal_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, less_than_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, less_than_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, multiply_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, multiply_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, not_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, not_equal_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, subtract_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, subtract_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(rhs, minus_tag))$/;"	f	namespace:sg14::_impl	signature:(rhs, minus_tag)
operate	src/single_header/fixed_point.h	/^        -> decltype(operate(rhs, plus_tag))$/;"	f	namespace:sg14::_impl	signature:(rhs, plus_tag)
operate	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::add_tag)
operate	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::divide_tag)
operate	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::multiply_tag)
operate	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::subtract_tag)
operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14::_impl::sg14	signature:(lhs, rhs, _impl::add_tag)
operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14::_impl::sg14	signature:(lhs, rhs, _impl::multiply_tag)
operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14::_impl::sg14	signature:(lhs, rhs, _impl::subtract_tag)
operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::division_arithmetic_operator_tag>(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14::_impl::sg14	signature:(lhs, rhs, _impl::divide_tag)
operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::division_named_function_tag>(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14::_impl::fp	signature:(lhs, rhs, _impl::divide_tag)
operate	src/test/overflow.cpp	/^        static_assert(sg14::_overflow_impl::operate<sg14::saturated_overflow_tag, sg14::_impl::less_than_op>()(-1, 1u), "sg14::_overflow_impl::operate test failed");$/;"	p	namespace:__anon10::test_saturated	file:	signature:()
operate	src/test/p0675.cpp	/^        constexpr auto operate(smart_integer<LhsRep> const& lhs, smart_integer<RhsRep> const& rhs, multiply_op) {$/;"	f	namespace:sg14::_impl	signature:(smart_integer<LhsRep> const& lhs, smart_integer<RhsRep> const& rhs, multiply_op)
operate	src/test/p0675.cpp	/^        constexpr auto operate(smart_integer<LhsRep> const& lhs, smart_integer<RhsRep> const& rhs, subtract_op) {$/;"	f	namespace:sg14::_impl	signature:(smart_integer<LhsRep> const& lhs, smart_integer<RhsRep> const& rhs, subtract_op)
operate	src/test/p0675.cpp	/^        constexpr auto operate(smart_integer<Rep> const& lhs, smart_integer<Rep> const& rhs, equal_op) {$/;"	f	namespace:sg14::_impl	signature:(smart_integer<Rep> const& lhs, smart_integer<Rep> const& rhs, equal_op)
operate_common_tag	include/sg14/auxiliary/precise_integer.h	/^        -> decltype(operate_common_tag<Operator, common_type_t<LhsRoundingTag, RhsRoundingTag>>(lhs, rhs))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs)
operate_params	include/sg14/auxiliary/elastic_integer.h	/^        struct operate_params {$/;"	s	namespace:sg14::_impl
operate_params	include/sg14/bits/fixed_point_arithmetic.h	/^                struct operate_params {$/;"	s	namespace:sg14::_impl::fp::arithmetic
operate_params	src/single_header/fixed_point.h	/^        struct operate_params {$/;"	s	namespace:sg14::_impl
operator ()	include/sg14/auxiliary/elastic_integer.h	/^        constexpr _value_type operator()(const _value_type& i, int base, int exp) const {$/;"	f	struct:sg14::scale	access:public	signature:(const _value_type& i, int base, int exp) const
operator ()	include/sg14/auxiliary/numeric.h	/^            constexpr _impl::enable_if_t<!std::numeric_limits<Integer>::is_signed, int> operator()(Integer value) const$/;"	f	struct:sg14::_numeric_impl::used_bits	access:public	signature:(Integer value) const
operator ()	include/sg14/auxiliary/numeric.h	/^            constexpr int operator()(Integer value) const$/;"	f	struct:sg14::_numeric_impl::used_bits	access:public	signature:(Integer value) const
operator ()	include/sg14/bits/number_base.h	/^        constexpr Rep operator()(const Input &i, int base, int exp) const {$/;"	f	struct:sg14::scale	access:public	signature:(const Input &i, int base, int exp) const
operator ()	src/single_header/fixed_point.h	/^            constexpr _impl::enable_if_t<!std::numeric_limits<Integer>::is_signed, int> operator()(Integer value) const$/;"	f	struct:sg14::_numeric_impl::used_bits	access:public	signature:(Integer value) const
operator ()	src/single_header/fixed_point.h	/^            constexpr int operator()(Integer value) const$/;"	f	struct:sg14::_numeric_impl::used_bits	access:public	signature:(Integer value) const
operator ()	src/single_header/fixed_point.h	/^        constexpr Rep operator()(const Input &i, int base, int exp) const {$/;"	f	struct:sg14::scale	access:public	signature:(const Input &i, int base, int exp) const
operator ()	src/single_header/fixed_point.h	/^        constexpr _value_type operator()(const _value_type& i, int base, int exp) const {$/;"	f	struct:sg14::scale	access:public	signature:(const _value_type& i, int base, int exp) const
operator *	src/test/cppnow2017.cpp	/^    auto operator*(safe_integer<Rep1> const& a, safe_integer<Rep2> const& b)$/;"	f	namespace:operator_overload2	signature:(safe_integer<Rep1> const& a, safe_integer<Rep2> const& b)
operator *	src/test/cppnow2017.cpp	/^    auto operator*(safe_integer<Rep> const& a, safe_integer<Rep> const& b)$/;"	f	namespace:operator_overload1	signature:(safe_integer<Rep> const& a, safe_integer<Rep> const& b)
operator *	src/test/cppnow2017.cpp	/^    constexpr auto operator*(safe_integer<Rep1> const& a, safe_integer<Rep2> const& b)$/;"	f	namespace:composite	signature:(safe_integer<Rep1> const& a, safe_integer<Rep2> const& b)
operator <<	include/sg14/auxiliary/boost.simd.h	/^    ::std::ostream& operator<<(::std::ostream& out, const fixed_point<boost::simd::pack<T, N>, Exponent>& fp)$/;"	f	namespace:sg14	signature:(::std::ostream& out, const fixed_point<boost::simd::pack<T, N>, Exponent>& fp)
operator <<	include/sg14/bits/fixed_point_extras.h	/^    ::std::ostream& operator<<(::std::ostream& out, const fixed_point <Rep, Exponent>& fp)$/;"	f	namespace:sg14	signature:(::std::ostream& out, const fixed_point <Rep, Exponent>& fp)
operator =	include/sg14/auxiliary/elastic_integer.h	/^        elastic_integer& operator=(S s)$/;"	f	class:sg14::elastic_integer	access:public	signature:(S s)
operator =	include/sg14/bits/number_base.h	/^            number_base& operator=(const T& r) {$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const T& r)
operator =	src/single_header/fixed_point.h	/^            number_base& operator=(const T& r) {$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const T& r)
operator =	src/single_header/fixed_point.h	/^        elastic_integer& operator=(S s)$/;"	f	class:sg14::elastic_integer	access:public	signature:(S s)
operator >>	include/sg14/bits/fixed_point_extras.h	/^    ::std::istream& operator>>(::std::istream& in, fixed_point <Rep, Exponent>& fp)$/;"	f	namespace:sg14	signature:(::std::istream& in, fixed_point <Rep, Exponent>& fp)
operator S	include/sg14/auxiliary/elastic_integer.h	/^        explicit constexpr operator S() const$/;"	f	class:sg14::elastic_integer	access:public	signature:() const
operator S	src/single_header/fixed_point.h	/^        explicit constexpr operator S() const$/;"	f	class:sg14::elastic_integer	access:public	signature:() const
operator SG14_INT128	include/sg14/bits/limits.h	/^            constexpr operator SG14_INT128() const { return value; }$/;"	f	struct:std::numeric_limits::_s	access:public	signature:() const
operator T	include/sg14/auxiliary/const_integer.h	/^        constexpr explicit operator T() const { return value; }$/;"	f	class:sg14::const_integer	access:public	signature:() const
operator T	include/sg14/auxiliary/precise_integer.h	/^        constexpr explicit operator T() const$/;"	f	class:sg14::precise_integer	access:public	signature:() const
operator T	include/sg14/auxiliary/safe_integer.h	/^        constexpr explicit operator T() const$/;"	f	class:sg14::safe_integer	access:public	signature:() const
operator T	src/single_header/fixed_point.h	/^        constexpr explicit operator T() const { return value; }$/;"	f	class:sg14::const_integer	access:public	signature:() const
operator bool	include/sg14/bits/number_base.h	/^            explicit constexpr operator bool() const$/;"	f	class:sg14::_impl::number_base	access:public	signature:() const
operator bool	src/single_header/fixed_point.h	/^            explicit constexpr operator bool() const$/;"	f	class:sg14::_impl::number_base	access:public	signature:() const
operator char	src/test/elastic_fixed_point.cpp	/^    operator char() { return size+256; }$/;"	f	struct:print_num_as_error	access:public	signature:()
operator_overload1	src/test/cppnow2017.cpp	/^namespace operator_overload1 {$/;"	n	file:
operator_overload1::operator *	src/test/cppnow2017.cpp	/^    auto operator*(safe_integer<Rep> const& a, safe_integer<Rep> const& b)$/;"	f	namespace:operator_overload1	signature:(safe_integer<Rep> const& a, safe_integer<Rep> const& b)
operator_overload1::static_assert	src/test/cppnow2017.cpp	/^    static_assert($/;"	p	namespace:operator_overload1	file:	signature:( is_same<decltype(safe_integer<short>{2}*safe_integer<short>{3}), safe_integer<short>>::value, Ó)
operator_overload2	src/test/cppnow2017.cpp	/^namespace operator_overload2 {$/;"	n	file:
operator_overload2::operator *	src/test/cppnow2017.cpp	/^    auto operator*(safe_integer<Rep1> const& a, safe_integer<Rep2> const& b)$/;"	f	namespace:operator_overload2	signature:(safe_integer<Rep1> const& a, safe_integer<Rep2> const& b)
operator_overload2::static_assert	src/test/cppnow2017.cpp	/^    static_assert($/;"	p	namespace:operator_overload2	file:	signature:( is_same<decltype(safe_integer<short>{2}*safe_integer<short>{3}), safe_integer<int>>::value, Ó)
operator_overload2::static_assert	src/test/cppnow2017.cpp	/^    static_assert($/;"	p	namespace:operator_overload2	file:	signature:( is_same<decltype(safe_integer<short>{6}*safe_integer<int>{7}), safe_integer<int>>::value, Ó)
p	src/test/p0037.cpp	/^    constexpr auto p = multiply(f, f);$/;"	m	namespace:named_arithmetic1	file:
p	src/test/p0037.cpp	/^    constexpr auto p = multiply(f, f);$/;"	m	namespace:named_arithmetic3	file:
parse_dec	include/sg14/auxiliary/const_integer.h	/^        constexpr int parse_dec(char C)$/;"	f	namespace:sg14::_const_integer_impl	signature:(char C)
parse_dec	src/single_header/fixed_point.h	/^        constexpr int parse_dec(char C)$/;"	f	namespace:sg14::_const_integer_impl	signature:(char C)
parse_hex	include/sg14/auxiliary/const_integer.h	/^        constexpr int parse_hex(char C) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(char C)
parse_hex	src/single_header/fixed_point.h	/^        constexpr int parse_hex(char C) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(char C)
parser	src/benchmark/review.py	/^    parser = ArgumentParser(description="For each commit (chronologically) of the repository, run the benchmarking target and chart results as a table of benchmarks by commit.")$/;"	v
plus_op	include/sg14/bits/common.h	/^        struct plus_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
plus_op	src/single_header/fixed_point.h	/^        struct plus_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::add_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::bitwise_and_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::bitwise_or_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::bitwise_xor_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::divide_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::multiply_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::subtract_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	src/single_header/fixed_point.h	/^        struct policy<_impl::add_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	src/single_header/fixed_point.h	/^        struct policy<_impl::bitwise_and_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	src/single_header/fixed_point.h	/^        struct policy<_impl::bitwise_or_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	src/single_header/fixed_point.h	/^        struct policy<_impl::bitwise_xor_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	src/single_header/fixed_point.h	/^        struct policy<_impl::divide_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	src/single_header/fixed_point.h	/^        struct policy<_impl::multiply_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
policy	src/single_header/fixed_point.h	/^        struct policy<_impl::subtract_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
poly_coeffs	include/sg14/bits/fixed_point_math.h	/^            struct poly_coeffs {$/;"	s	namespace:sg14::_impl::fp
positive_digits	include/sg14/auxiliary/overflow.h	/^        struct positive_digits : public std::integral_constant<int, std::numeric_limits<T>::digits> {$/;"	s	namespace:sg14::_overflow_impl	inherits:std::integral_constant
positive_elastic_test	src/test/elastic_fixed_point.cpp	/^struct positive_elastic_test$/;"	s	file:	inherits:number_test
positive_elastic_test::digits	src/test/elastic_fixed_point.cpp	/^    static constexpr int digits = integer_digits+fractional_digits;$/;"	m	struct:positive_elastic_test	file:	access:public
positive_elastic_test::digits	src/test/elastic_fixed_point.cpp	/^    static_assert(bit_count<typename rep::rep>(max_integer.data())==digits, "numeric_limits test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
positive_elastic_test::fractional_digits	src/test/elastic_fixed_point.cpp	/^    static constexpr int fractional_digits = elastic_type::fractional_digits;$/;"	m	struct:positive_elastic_test	file:	access:public
positive_elastic_test::integer_digits	src/test/elastic_fixed_point.cpp	/^    static constexpr int integer_digits = elastic_type::integer_digits;$/;"	m	struct:positive_elastic_test	file:	access:public
positive_elastic_test::is_equal_to	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(zero, negative_zero), "comparison test error");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(zero, negative_zero)
positive_elastic_test::is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than(lowest, min), "numeric_limits test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(lowest, min)
positive_elastic_test::is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than(zero, min), "numeric_limits test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(zero, min)
positive_elastic_test::is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than<elastic_type>(zero, min), "comparison test error");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(zero, min)
positive_elastic_test::min	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(min*make_elastic_fixed_point(1_c), min), "operator* test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
positive_elastic_test::min	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(min*make_elastic_fixed_point(2_c), min+min), "operator* test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
positive_elastic_test::min	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(min*make_elastic_fixed_point(3_c), min+min+min), "operator* test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert($/;"	p	struct:positive_elastic_test	file:	access:public	signature:( negate_result::fractional_digits==elastic_type::fractional_digits, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to((min+min)\/make_elastic_fixed_point(2_c), min), "operator\/ test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(min+min)/make_elastic_fixed_point(2_c), min
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to((min+min+min)\/make_elastic_fixed_point(3_c), min), "operator\/ test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(min+min+min)/make_elastic_fixed_point(3_c), min
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(min==elastic_type::from_data(rep{1}), "numeric_limits test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(min==elastic_type::from_data(rep{1}), Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(signed_type{zero}*unsigned_type{zero})>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(signed_type{zero}*unsigned_type{zero})>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(signed_type{zero}+unsigned_type{zero})>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(signed_type{zero}+unsigned_type{zero})>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(signed_type{zero}-unsigned_type{zero})>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(signed_type{zero}-unsigned_type{zero})>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(signed_type{zero}\/unsigned_type{zero})>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(signed_type{zero}/unsigned_type{zero})>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero*zero)>::is_signed$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero*zero)>::is_signed ==std::numeric_limits<decltype(zero)>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero*zero)>::is_signed$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero*zero)>::is_signed ==std::numeric_limits<elastic_type>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero+zero)>::is_signed$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero+zero)>::is_signed ==std::numeric_limits<elastic_type>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero-zero)>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero-zero)>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero\/zero)>::is_signed$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero/zero)>::is_signed ==std::numeric_limits<elastic_type>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<elastic_type>::is_signed==numeric_limits::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<elastic_type>::is_signed==numeric_limits::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<elastic_type>::is_signed==std::numeric_limits<rep>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<elastic_type>::is_signed==std::numeric_limits<rep>::is_signed, Ó)
positive_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<signed_type>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<signed_type>::is_signed, Ó)
positive_elastic_test::zero	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(min*make_elastic_fixed_point(0_c), zero), "operator* test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
pow	include/sg14/auxiliary/safe_integer.h	/^        -> decltype(_impl::to_rep(i) * _num_traits_impl::pow<value_type>(base, exp)) {$/;"	f	class:sg14::scale::_num_traits_impl	access:public	signature:(base, exp)
pow	include/sg14/num_traits.h	/^        constexpr scale_result_type<T> pow(int base, int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int base, int exp)
pow	src/single_header/fixed_point.h	/^        constexpr scale_result_type<T> pow(int base, int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int base, int exp)
pow2	include/sg14/num_traits.h	/^        constexpr scale_result_type<T> pow2(int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int exp)
pow2	src/single_header/fixed_point.h	/^        constexpr scale_result_type<T> pow2(int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int exp)
pow2	src/test/fixed_point_common.h	/^static_assert(pow2<double, -1>()==.5, "sg14::_impl::fp::type::pow2 test failed");$/;"	p	signature:()
pow2	src/test/fixed_point_common.h	/^static_assert(pow2<double, 7>()==128, "sg14::_impl::fp::type::pow2 test failed");$/;"	p	signature:()
pow2	src/test/fixed_point_common.h	/^static_assert(pow2<float, -3>()==.125, "sg14::_impl::fp::type::pow2 test failed");$/;"	p	signature:()
pow2	src/test/fixed_point_common.h	/^static_assert(pow2<float, 0>()==1, "sg14::_impl::fp::type::pow2 test failed");$/;"	p	signature:()
pow2	src/test/fixed_point_common.h	/^static_assert(pow2<float, 20>()==1048576, "sg14::_impl::fp::type::pow2 test failed");$/;"	p	signature:()
pow2	src/test/fixed_point_common.h	/^static_assert(pow2<long double, 10>()==1024, "sg14::_impl::fp::type::pow2 test failed");$/;"	p	signature:()
pow2	src/test/fixed_point_common.h	/^static_assert(pow2<long double, 1>()==2, "sg14::_impl::fp::type::pow2 test failed");$/;"	p	signature:()
pown	include/sg14/num_traits.h	/^        constexpr scale_result_type<T> pown(int base, int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int base, int exp)
pown	src/single_header/fixed_point.h	/^        constexpr scale_result_type<T> pown(int base, int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int base, int exp)
precedes	include/sg14/bits/number_base.h	/^        struct precedes {$/;"	s	namespace:sg14::_impl
precedes	src/single_header/fixed_point.h	/^        struct precedes {$/;"	s	namespace:sg14::_impl
precise_integer	include/sg14/auxiliary/precise_integer.h	/^        constexpr precise_integer(const T& v)$/;"	f	class:sg14::precise_integer	access:public	signature:(const T& v)
precise_integer	include/sg14/auxiliary/precise_integer.h	/^    class precise_integer : public _impl::number_base<precise_integer<Rep, RoundingTag>, Rep> {$/;"	c	namespace:sg14	inherits:_impl::number_base
precise_integer_tests	src/test/precise_integer.cpp	/^struct precise_integer_tests {$/;"	s	file:
print_num_as_error	src/test/elastic_fixed_point.cpp	/^struct print_num_as_error {$/;"	s	file:
print_num_as_error::operator char	src/test/elastic_fixed_point.cpp	/^    operator char() { return size+256; }$/;"	f	struct:print_num_as_error	access:public	signature:()
promotion_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int promotion_digits = digits<rep_op_result>::value;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
prototypes	src/test/cppnow2017.cpp	/^namespace prototypes {$/;"	n	file:
prototypes::elastic_integer	src/test/cppnow2017.cpp	/^    class elastic_integer {$/;"	c	namespace:prototypes	file:
prototypes::safe_integer	src/test/cppnow2017.cpp	/^    class safe_integer {$/;"	c	namespace:prototypes	file:
prototypes::safe_integer::_rep	src/test/cppnow2017.cpp	/^        Rep _rep;$/;"	m	class:prototypes::safe_integer	file:	access:private
prototypes::safe_integer::data	src/test/cppnow2017.cpp	/^        constexpr Rep const& data() const { return _rep; }$/;"	f	class:prototypes::safe_integer	access:public	signature:() const
prototypes::safe_integer::safe_integer	src/test/cppnow2017.cpp	/^        constexpr safe_integer(Input const& r)$/;"	f	class:prototypes::safe_integer	access:public	signature:(Input const& r)
psi_saturate	src/test/zero_cost_free_functions.cpp	/^precise_safe_integer<> psi_saturate(precise_safe_integer<> a, precise_safe_integer<> b) {$/;"	f	signature:(precise_safe_integer< a, precise_safe_integer<> b)
q	src/test/fixed_point_common.h	/^    constexpr auto q = fixed_point<test_int, 0>{1}\/1;$/;"	m	namespace:test_glvalue_error
q1	src/test/p0037.cpp	/^    constexpr auto q1 = n\/d;$/;"	m	namespace:named_arithmetic5	file:
q2	src/test/p0037.cpp	/^    constexpr auto q2 = divide(n, d);$/;"	m	namespace:named_arithmetic5	file:
quotient	src/test/p0554.cpp	/^        constexpr auto quotient = numerator \/ denominator;$/;"	m	namespace:__anon14::division	file:
rebind_s	src/test/boost.simd.cpp	/^    struct rebind_s<U, fpp<T, N, Exponent>> {$/;"	s	namespace:__anon4	file:
reorder	src/test/fft.h	/^    static void reorder(std::vector<std::complex<T>> &in) {$/;"	f	namespace:Algorithms	signature:(std::vector<std::complex<T>> &in)
rep_digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr _digits_type rep_digits = _impl::max(sg14::digits<Narrowest>::value, digits);$/;"	m	struct:sg14::_elastic_integer_impl::base_class	access:public
rep_digits	src/single_header/fixed_point.h	/^            static constexpr _digits_type rep_digits = _impl::max(sg14::digits<Narrowest>::value, digits);$/;"	m	struct:sg14::_elastic_integer_impl::base_class	access:public
rep_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int rep_exponent = -fractional_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
rep_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int rep_exponent = rep_op_exponent<_impl::multiply_op, Lhs, Rhs>::value;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::add_op, Lhs, Rhs> : public std::integral_constant<int, _impl::min<int>($/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::divide_op, Lhs, Rhs> : public std::integral_constant<int,$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::minus_op, Rhs> : public std::integral_constant<int, Rhs::exponent> {$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::multiply_op, Lhs, Rhs> : public std::integral_constant<int,$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::plus_op, Rhs> : public std::integral_constant<int, Rhs::exponent> {$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::subtract_op, Lhs, Rhs>$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
report_from_benchmarks	src/benchmark/report.py	/^def report_from_benchmarks(table):$/;"	f	access:public
report_from_file	src/benchmark/report.py	/^def report_from_file(filename):$/;"	f	access:public
report_from_table	src/benchmark/report.py	/^def report_from_table(table):$/;"	f	access:public
result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<lean_tag, OperationTag, Lhs, Rhs> : result<raw_tag, OperationTag, Lhs, Rhs> {};$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:result
result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<raw_tag, OperationTag, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<wide_tag, OperationTag, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<wide_tag, _impl::divide_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<wide_tag, _impl::multiply_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
result_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int result_digits = _impl::max(sufficient_digits, digits<rep_op_result>::value);$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
return_if	include/sg14/auxiliary/overflow.h	/^        constexpr Result return_if(bool condition, const Result& value, const char* )$/;"	f	namespace:sg14::_overflow_impl	signature:(bool condition, const Result& value, const char* )
rounding_conversion	include/sg14/bits/fixed_point_math.h	/^            constexpr FixedPoint rounding_conversion(double d) {$/;"	f	namespace:sg14::_impl::fp	signature:(double d)
run_benchmarks	src/benchmark/review.py	/^def run_benchmarks(args):$/;"	f	access:public
run_command	src/benchmark/review.py	/^def run_command(dir, command):$/;"	f	access:public
run_from_build	src/benchmark/review.py	/^def run_from_build(args, command):$/;"	f	access:public
run_from_repo	src/benchmark/review.py	/^def run_from_repo(args, command):$/;"	f	access:public
s	src/test/p0037.cpp	/^    constexpr auto s = add(a1, a2);$/;"	m	namespace:named_arithmetic4	file:
sa_fft	src/test/fft.h	/^        unsigned int sa_fft(std::vector<std::complex<T>> &vec1,$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2)
sa_fft	src/test/fft.h	/^    unsigned int FFT<T>::sa_fft(std::vector<std::complex<T>> &vec1,$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2)
sa_fft_core	src/test/fft.h	/^    static unsigned int sa_fft_core($/;"	f	namespace:Algorithms	signature:( std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2, std::vector<std::complex<T>> &twiddles, int direction_flag)
sa_fft_core	src/test/fft.h	/^    static unsigned int sa_fft_core($/;"	f	namespace:Algorithms	signature:( std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec1, std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &vec2, std::vector<std::complex<sg14::fixed_point<Rep, Exponent>>> &twiddles, int direction_flag)
sa_ifft	src/test/fft.h	/^        unsigned int sa_ifft(std::vector<std::complex<T>> &vec1,$/;"	p	class:Algorithms::FFT	access:public	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2)
sa_ifft	src/test/fft.h	/^    unsigned int FFT<T>::sa_ifft(std::vector<std::complex<T>> &vec1,$/;"	f	class:Algorithms::FFT	signature:(std::vector<std::complex<T>> &vec1, std::vector<std::complex<T>> &vec2)
safe_integer	include/sg14/auxiliary/safe_integer.h	/^        constexpr safe_integer(const Rhs& rhs)$/;"	f	class:sg14::safe_integer	access:public	signature:(const Rhs& rhs)
safe_integer	include/sg14/auxiliary/safe_integer.h	/^        constexpr safe_integer(const safe_integer<RhsRep, RhsOverflowTag>& rhs)$/;"	f	class:sg14::safe_integer	access:public	signature:(const safe_integer<RhsRep, RhsOverflowTag>& rhs)
safe_integer	include/sg14/auxiliary/safe_integer.h	/^        constexpr safe_integer(const_integer<Integral, Value, Digits, Exponent>)$/;"	f	class:sg14::safe_integer	access:public	signature:(const_integer<Integral, Value, Digits, Exponent>)
safe_integer	include/sg14/auxiliary/safe_integer.h	/^    class safe_integer : public _impl::number_base<safe_integer<Rep, OverflowTag>, Rep> {$/;"	c	namespace:sg14	inherits:_impl::number_base
safe_integer	src/test/cppnow2017.cpp	/^        constexpr safe_integer(Input const& r)$/;"	f	class:prototypes::safe_integer	access:public	signature:(Input const& r)
safe_integer	src/test/cppnow2017.cpp	/^    class safe_integer {$/;"	c	namespace:prototypes	file:
sample1	src/test/p0381.cpp	/^namespace sample1 {$/;"	n	file:
sample1::TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_uint8_ok)$/;"	f	namespace:sample1	signature:(p0381, multiply_uint8_ok)
sample1::TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_uint8_overflow)$/;"	f	namespace:sample1	signature:(p0381, multiply_uint8_overflow)
sample1::multiply	src/test/p0381.cpp	/^    uint8_t multiply(uint8_t a, uint8_t b)$/;"	f	namespace:sample1	signature:(uint8_t a, uint8_t b)
sample1::static_assert	src/test/p0381.cpp	/^    static_assert(UCHAR_MAX*UCHAR_MAX==65025, "incorrect assumption about value of UCHAR_MAX");$/;"	p	namespace:sample1	file:	signature:(UCHAR_MAX*UCHAR_MAX==65025, Ó)
sample2	src/test/p0381.cpp	/^namespace sample2 {$/;"	n	file:
sample2::TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_ok)$/;"	f	namespace:sample2	signature:(p0381, multiply_unsigned_ok)
sample2::TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_overflow)$/;"	f	namespace:sample2	signature:(p0381, multiply_unsigned_overflow)
sample2::multiply	src/test/p0381.cpp	/^    auto multiply(unsigned a, unsigned b)$/;"	f	namespace:sample2	signature:(unsigned a, unsigned b)
sample2::static_assert	src/test/p0381.cpp	/^    static_assert(is_same<decltype(declval<unsigned>()*declval<unsigned>()), unsigned>::value,$/;"	p	namespace:sample2	file:	signature:(is_same<decltype(declval<unsigned>()*declval<unsigned>()), unsigned>::value, Ó)
sample3	src/test/p0381.cpp	/^namespace sample3 {$/;"	n	file:
sample3::TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_ok)$/;"	f	namespace:sample3	signature:(p0381, multiply_unsigned_ok)
sample3::TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_still_ok)$/;"	f	namespace:sample3	signature:(p0381, multiply_unsigned_still_ok)
sample3::multiply	src/test/p0381.cpp	/^    auto multiply(uint32_t a, uint32_t b)$/;"	f	namespace:sample3	signature:(uint32_t a, uint32_t b)
sample3::static_assert	src/test/p0381.cpp	/^    static_assert(is_same<uint64_t, decltype(multiply(declval<uint32_t>(), declval<uint32_t>()))>::value,$/;"	p	namespace:sample3	file:	signature:(is_same<uint64_t, decltype(multiply(declval<uint32_t>(), declval<uint32_t>()))>::value, Ó)
sample4	src/test/p0381.cpp	/^namespace sample4 {$/;"	n	file:
sample5	src/test/p0381.cpp	/^namespace sample5 {$/;"	n	file:
sample5::TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_ok)$/;"	f	namespace:sample5	signature:(p0381, multiply_unsigned_ok)
sample5::TEST	src/test/p0381.cpp	/^    TEST(p0381, multiply_unsigned_still_ok)$/;"	f	namespace:sample5	signature:(p0381, multiply_unsigned_still_ok)
sample5::multiply	src/test/p0381.cpp	/^    auto multiply(Operand a, Operand b)$/;"	f	namespace:sample5	signature:(Operand a, Operand b)
sample5::static_assert	src/test/p0381.cpp	/^    static_assert(is_same<uint32_t, decltype(multiply(declval<uint16_t>(), declval<uint16_t>()))>::value,$/;"	p	namespace:sample5	file:	signature:(is_same<uint32_t, decltype(multiply(declval<uint16_t>(), declval<uint16_t>()))>::value, Ó)
sample5::static_assert	src/test/p0381.cpp	/^    static_assert(is_same<uint64_t, decltype(multiply(declval<uint32_t>(), declval<uint32_t>()))>::value,$/;"	p	namespace:sample5	file:	signature:(is_same<uint64_t, decltype(multiply(declval<uint32_t>(), declval<uint32_t>()))>::value, Ó)
saturated_overflow	include/sg14/auxiliary/overflow.h	/^    } saturated_overflow{};$/;"	s	namespace:sg14
saturated_overflow_tag	include/sg14/auxiliary/overflow.h	/^    static constexpr struct saturated_overflow_tag {$/;"	s	namespace:sg14
scale	include/sg14/auxiliary/elastic_integer.h	/^    struct scale<elastic_integer<Digits, Narrowest>> {$/;"	s	namespace:sg14
scale	include/sg14/auxiliary/precise_integer.h	/^    struct scale<precise_integer<Rep, RoundingTag>>$/;"	s	namespace:sg14	inherits:scale
scale	include/sg14/auxiliary/safe_integer.h	/^    struct scale<safe_integer<Rep, OverflowTag>> {$/;"	s	namespace:sg14
scale	include/sg14/bits/number_base.h	/^    struct scale<_impl::number_base<Derived, Rep>> {$/;"	s	namespace:sg14
scale	include/sg14/num_traits.h	/^        -> decltype(sg14::scale<T>()(i, base, exp)) {$/;"	f	namespace:sg14::_impl	signature:()
scale	include/sg14/num_traits.h	/^    struct scale {$/;"	s	namespace:sg14
scale	src/single_header/fixed_point.h	/^        -> decltype(sg14::scale<T>()(i, base, exp)) {$/;"	f	namespace:sg14::_impl	signature:()
scale	src/single_header/fixed_point.h	/^    struct scale {$/;"	s	namespace:sg14
scale	src/single_header/fixed_point.h	/^    struct scale<_impl::number_base<Derived, Rep>> {$/;"	s	namespace:sg14
scale	src/single_header/fixed_point.h	/^    struct scale<elastic_integer<Digits, Narrowest>> {$/;"	s	namespace:sg14
set_digits	include/sg14/auxiliary/boost.multiprecision.h	/^    struct set_digits<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>, MinNumDigits> {$/;"	s	namespace:sg14
set_digits	include/sg14/auxiliary/boost.multiprecision.h	/^    struct set_digits<_bmp::number<Backend, ExpressionTemplates>, MinNumDigits> {$/;"	s	namespace:sg14
set_digits	include/sg14/auxiliary/boost.simd.h	/^    struct set_digits<boost::simd::pack<T, N>, Digits> {$/;"	s	namespace:sg14
set_digits	include/sg14/auxiliary/elastic_integer.h	/^    struct set_digits<elastic_integer<Digits, Narrowest>, MinNumBits> {$/;"	s	namespace:sg14
set_digits	include/sg14/auxiliary/multiprecision.h	/^    struct set_digits<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>, MinNumDigits> {$/;"	s	namespace:sg14
set_digits	include/sg14/auxiliary/multiprecision.h	/^    struct set_digits<_bmp::number<Backend, ExpressionTemplates>, MinNumDigits> {$/;"	s	namespace:sg14
set_digits	include/sg14/auxiliary/precise_integer.h	/^    struct set_digits<precise_integer<Rep, RoundingTag>, MinNumBits> {$/;"	s	namespace:sg14
set_digits	include/sg14/auxiliary/safe_integer.h	/^    struct set_digits<safe_integer<Rep, OverflowTag>, MinNumBits> {$/;"	s	namespace:sg14
set_digits	include/sg14/bits/fixed_point_extras.h	/^    struct set_digits<fixed_point<Rep, Exponent>, MinNumBits> {$/;"	s	namespace:sg14
set_digits	src/single_header/fixed_point.h	/^    struct set_digits<elastic_integer<Digits, Narrowest>, MinNumBits> {$/;"	s	namespace:sg14
set_rep	include/sg14/auxiliary/elastic_integer.h	/^        struct set_rep<elastic_integer<Digits, OldNarrowest>, NewNarrowest> {$/;"	s	namespace:sg14::_impl
set_rep	include/sg14/auxiliary/precise_integer.h	/^        struct set_rep<precise_integer<OldRep, RoundingTag>, NewRep> {$/;"	s	namespace:sg14::_impl
set_rep	include/sg14/auxiliary/safe_integer.h	/^        struct set_rep<safe_integer<OldRep, OverflowTag>, NewRep> {$/;"	s	namespace:sg14::_impl
set_rep	include/sg14/bits/fixed_point_extras.h	/^        struct set_rep<fixed_point<OldRep, Exponent>, NewRep> {$/;"	s	namespace:sg14::_impl
set_rep	src/single_header/fixed_point.h	/^        struct set_rep<elastic_integer<Digits, OldNarrowest>, NewNarrowest> {$/;"	s	namespace:sg14::_impl
sg14	include/sg14/auxiliary/boost.multiprecision.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/auxiliary/boost.simd.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/auxiliary/const_integer.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/auxiliary/elastic_fixed_point.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/auxiliary/elastic_integer.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/auxiliary/multiprecision.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/auxiliary/numeric.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/auxiliary/overflow.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/auxiliary/precise_integer.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/auxiliary/safe_integer.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/common.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/fixed_point_arithmetic.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/fixed_point_common_type.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/fixed_point_extras.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/fixed_point_make.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/fixed_point_math.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/fixed_point_named.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/fixed_point_operators.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/fixed_point_type.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/number_base.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/bits/type_traits.h	/^namespace sg14 {$/;"	n
sg14	include/sg14/num_traits.h	/^namespace sg14 {$/;"	n
sg14	src/single_header/fixed_point.h	/^namespace sg14 {$/;"	n
sg14	src/single_header/fixed_point.h	/^namespace sg14 {$/;"	n	namespace:sg14::_impl
sg14	src/test/boost.simd.cpp	/^namespace sg14 {$/;"	n	file:
sg14	src/test/p0675.cpp	/^namespace sg14 {$/;"	n	file:
sg14	src/test/precise_elastic_integer.cpp	/^namespace sg14 {$/;"	n	file:
sg14	src/test/precise_safe_elastic_fixed_point.cpp	/^namespace sg14 {$/;"	n	file:
sg14	src/test/precise_safe_elastic_integer.cpp	/^namespace sg14 {$/;"	n	file:
sg14	src/test/safe_elastic_integer.cpp	/^namespace sg14 {$/;"	n	file:
sg14::SG14_INTEGER_BIT_SHIFT_DEFINE	include/sg14/auxiliary/safe_integer.h	/^    SG14_INTEGER_BIT_SHIFT_DEFINE(<<);$/;"	p	namespace:sg14	signature:(<)
sg14::_const_integer_impl	include/sg14/auxiliary/const_integer.h	/^    namespace _const_integer_impl {$/;"	n	namespace:sg14
sg14::_const_integer_impl	src/single_header/fixed_point.h	/^    namespace _const_integer_impl {$/;"	n	namespace:sg14
sg14::_const_integer_impl::combine	include/sg14/auxiliary/const_integer.h	/^        constexpr std::intmax_t combine(int base, std::intmax_t val, int p0, TT... pp)$/;"	f	namespace:sg14::_const_integer_impl	signature:(int base, std::intmax_t val, int p0, TT... pp)
sg14::_const_integer_impl::combine	include/sg14/auxiliary/const_integer.h	/^        constexpr std::intmax_t combine(int, std::intmax_t p)$/;"	f	namespace:sg14::_const_integer_impl	signature:(int, std::intmax_t p)
sg14::_const_integer_impl::combine	src/single_header/fixed_point.h	/^        constexpr std::intmax_t combine(int base, std::intmax_t val, int p0, TT... pp)$/;"	f	namespace:sg14::_const_integer_impl	signature:(int base, std::intmax_t val, int p0, TT... pp)
sg14::_const_integer_impl::combine	src/single_header/fixed_point.h	/^        constexpr std::intmax_t combine(int, std::intmax_t p)$/;"	f	namespace:sg14::_const_integer_impl	signature:(int, std::intmax_t p)
sg14::_const_integer_impl::digits_to_integral	include/sg14/auxiliary/const_integer.h	/^        struct digits_to_integral {$/;"	s	namespace:sg14::_const_integer_impl
sg14::_const_integer_impl::digits_to_integral	include/sg14/auxiliary/const_integer.h	/^        struct digits_to_integral<'0', 'X', Digits...> {$/;"	s	namespace:sg14::_const_integer_impl
sg14::_const_integer_impl::digits_to_integral	include/sg14/auxiliary/const_integer.h	/^        struct digits_to_integral<'0', 'x', Digits...> {$/;"	s	namespace:sg14::_const_integer_impl
sg14::_const_integer_impl::digits_to_integral	src/single_header/fixed_point.h	/^        struct digits_to_integral {$/;"	s	namespace:sg14::_const_integer_impl
sg14::_const_integer_impl::digits_to_integral	src/single_header/fixed_point.h	/^        struct digits_to_integral<'0', 'X', Digits...> {$/;"	s	namespace:sg14::_const_integer_impl
sg14::_const_integer_impl::digits_to_integral	src/single_header/fixed_point.h	/^        struct digits_to_integral<'0', 'x', Digits...> {$/;"	s	namespace:sg14::_const_integer_impl
sg14::_const_integer_impl::digits_to_integral::value	include/sg14/auxiliary/const_integer.h	/^            static constexpr std::intmax_t value = combine(10, 0, parse_dec(Digits)...);$/;"	m	struct:sg14::_const_integer_impl::digits_to_integral	access:public
sg14::_const_integer_impl::digits_to_integral::value	include/sg14/auxiliary/const_integer.h	/^            static constexpr std::intmax_t value = combine(16, 0, parse_hex(Digits)...);$/;"	m	struct:sg14::_const_integer_impl::digits_to_integral	access:public
sg14::_const_integer_impl::digits_to_integral::value	src/single_header/fixed_point.h	/^            static constexpr std::intmax_t value = combine(10, 0, parse_dec(Digits)...);$/;"	m	struct:sg14::_const_integer_impl::digits_to_integral	access:public
sg14::_const_integer_impl::digits_to_integral::value	src/single_header/fixed_point.h	/^            static constexpr std::intmax_t value = combine(16, 0, parse_hex(Digits)...);$/;"	m	struct:sg14::_const_integer_impl::digits_to_integral	access:public
sg14::_const_integer_impl::enable_if_op	include/sg14/auxiliary/const_integer.h	/^        struct enable_if_op<$/;"	s	namespace:sg14::_const_integer_impl
sg14::_const_integer_impl::enable_if_op	src/single_header/fixed_point.h	/^        struct enable_if_op<$/;"	s	namespace:sg14::_const_integer_impl
sg14::_const_integer_impl::op	include/sg14/auxiliary/const_integer.h	/^        -> decltype(op(LhsValue, RhsValue))$/;"	f	namespace:sg14::_const_integer_impl	signature:(LhsValue, RhsValue)
sg14::_const_integer_impl::op	include/sg14/auxiliary/const_integer.h	/^        -> decltype(op(LhsValue, rhs)) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(LhsValue, rhs)
sg14::_const_integer_impl::op	include/sg14/auxiliary/const_integer.h	/^        -> decltype(op(lhs, RhsValue)) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(lhs, RhsValue)
sg14::_const_integer_impl::op	src/single_header/fixed_point.h	/^        -> decltype(op(LhsValue, RhsValue))$/;"	f	namespace:sg14::_const_integer_impl	signature:(LhsValue, RhsValue)
sg14::_const_integer_impl::op	src/single_header/fixed_point.h	/^        -> decltype(op(LhsValue, rhs)) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(LhsValue, rhs)
sg14::_const_integer_impl::op	src/single_header/fixed_point.h	/^        -> decltype(op(lhs, RhsValue)) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(lhs, RhsValue)
sg14::_const_integer_impl::parse_dec	include/sg14/auxiliary/const_integer.h	/^        constexpr int parse_dec(char C)$/;"	f	namespace:sg14::_const_integer_impl	signature:(char C)
sg14::_const_integer_impl::parse_dec	src/single_header/fixed_point.h	/^        constexpr int parse_dec(char C)$/;"	f	namespace:sg14::_const_integer_impl	signature:(char C)
sg14::_const_integer_impl::parse_hex	include/sg14/auxiliary/const_integer.h	/^        constexpr int parse_hex(char C) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(char C)
sg14::_const_integer_impl::parse_hex	src/single_header/fixed_point.h	/^        constexpr int parse_hex(char C) {$/;"	f	namespace:sg14::_const_integer_impl	signature:(char C)
sg14::_elastic_integer_impl	include/sg14/auxiliary/elastic_integer.h	/^    namespace _elastic_integer_impl {$/;"	n	namespace:sg14
sg14::_elastic_integer_impl	src/single_header/fixed_point.h	/^    namespace _elastic_integer_impl {$/;"	n	namespace:sg14
sg14::_elastic_integer_impl::are_integer_class_operands	include/sg14/auxiliary/elastic_integer.h	/^        struct are_integer_class_operands {$/;"	s	namespace:sg14::_elastic_integer_impl
sg14::_elastic_integer_impl::are_integer_class_operands	src/single_header/fixed_point.h	/^        struct are_integer_class_operands {$/;"	s	namespace:sg14::_elastic_integer_impl
sg14::_elastic_integer_impl::are_integer_class_operands::integer_class	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int integer_class = is_elastic_integer<Lhs>::value+is_elastic_integer<Rhs>::value;$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
sg14::_elastic_integer_impl::are_integer_class_operands::integer_class	src/single_header/fixed_point.h	/^            static constexpr int integer_class = is_elastic_integer<Lhs>::value+is_elastic_integer<Rhs>::value;$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
sg14::_elastic_integer_impl::are_integer_class_operands::integer_or_float	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int integer_or_float =$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
sg14::_elastic_integer_impl::are_integer_class_operands::integer_or_float	src/single_header/fixed_point.h	/^            static constexpr int integer_or_float =$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
sg14::_elastic_integer_impl::are_integer_class_operands::value	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr bool value = (integer_class>=1) && (integer_or_float==2);$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
sg14::_elastic_integer_impl::are_integer_class_operands::value	src/single_header/fixed_point.h	/^            static constexpr bool value = (integer_class>=1) && (integer_or_float==2);$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
sg14::_elastic_integer_impl::base_class	include/sg14/auxiliary/elastic_integer.h	/^        struct base_class {$/;"	s	namespace:sg14::_elastic_integer_impl
sg14::_elastic_integer_impl::base_class	src/single_header/fixed_point.h	/^        struct base_class {$/;"	s	namespace:sg14::_elastic_integer_impl
sg14::_elastic_integer_impl::base_class::digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr _digits_type digits = Digits;$/;"	m	struct:sg14::_elastic_integer_impl::base_class	access:public
sg14::_elastic_integer_impl::base_class::digits	src/single_header/fixed_point.h	/^            static constexpr _digits_type digits = Digits;$/;"	m	struct:sg14::_elastic_integer_impl::base_class	access:public
sg14::_elastic_integer_impl::base_class::rep_digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr _digits_type rep_digits = _impl::max(sg14::digits<Narrowest>::value, digits);$/;"	m	struct:sg14::_elastic_integer_impl::base_class	access:public
sg14::_elastic_integer_impl::base_class::rep_digits	src/single_header/fixed_point.h	/^            static constexpr _digits_type rep_digits = _impl::max(sg14::digits<Narrowest>::value, digits);$/;"	m	struct:sg14::_elastic_integer_impl::base_class	access:public
sg14::_elastic_integer_impl::is_elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        struct is_elastic_integer : std::false_type {$/;"	s	namespace:sg14::_elastic_integer_impl	inherits:std::false_type
sg14::_elastic_integer_impl::is_elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        struct is_elastic_integer<elastic_integer<Digits, Narrowest>> : std::true_type {$/;"	s	namespace:sg14::_elastic_integer_impl	inherits:std::true_type
sg14::_elastic_integer_impl::is_elastic_integer	src/single_header/fixed_point.h	/^        struct is_elastic_integer : std::false_type {$/;"	s	namespace:sg14::_elastic_integer_impl	inherits:std::false_type
sg14::_elastic_integer_impl::is_elastic_integer	src/single_header/fixed_point.h	/^        struct is_elastic_integer<elastic_integer<Digits, Narrowest>> : std::true_type {$/;"	s	namespace:sg14::_elastic_integer_impl	inherits:std::true_type
sg14::_fixed_point_operators_impl	include/sg14/bits/fixed_point_operators.h	/^    namespace _fixed_point_operators_impl {$/;"	n	namespace:sg14
sg14::_fixed_point_operators_impl::is_heterogeneous	include/sg14/bits/fixed_point_operators.h	/^        constexpr bool is_heterogeneous() {$/;"	f	namespace:sg14::_fixed_point_operators_impl	signature:()
sg14::_impl	include/sg14/auxiliary/elastic_integer.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/auxiliary/numeric.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/auxiliary/precise_integer.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/auxiliary/safe_integer.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/bits/common.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/bits/fixed_point_arithmetic.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/bits/fixed_point_common_type.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/bits/fixed_point_extras.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/bits/fixed_point_math.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/bits/fixed_point_operators.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/bits/fixed_point_type.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/bits/number_base.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/bits/type_traits.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	include/sg14/num_traits.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	src/single_header/fixed_point.h	/^    namespace _impl {$/;"	n	namespace:sg14
sg14::_impl	src/test/p0675.cpp	/^    namespace _impl {$/;"	n	namespace:sg14	file:
sg14::_impl::Operator	include/sg14/auxiliary/precise_integer.h	/^        -> decltype(Operator()(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:()
sg14::_impl::add_op	include/sg14/bits/common.h	/^        struct add_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::add_op	src/single_header/fixed_point.h	/^        struct add_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::arithmetic_op	include/sg14/bits/common.h	/^        struct arithmetic_op {$/;"	s	namespace:sg14::_impl
sg14::_impl::arithmetic_op	src/single_header/fixed_point.h	/^        struct arithmetic_op {$/;"	s	namespace:sg14::_impl
sg14::_impl::arithmetic_op::is_arithmetic	include/sg14/bits/common.h	/^            static constexpr bool is_arithmetic = true;$/;"	m	struct:sg14::_impl::arithmetic_op	access:public
sg14::_impl::arithmetic_op::is_arithmetic	src/single_header/fixed_point.h	/^            static constexpr bool is_arithmetic = true;$/;"	m	struct:sg14::_impl::arithmetic_op	access:public
sg14::_impl::bitwise_and_op	include/sg14/bits/common.h	/^        struct bitwise_and_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::bitwise_and_op	src/single_header/fixed_point.h	/^        struct bitwise_and_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::bitwise_and_op::decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs&rhs)$/;"	f	struct:sg14::_impl::bitwise_and_op	access:public	signature:(lhs&rhs)
sg14::_impl::bitwise_and_op::decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs&rhs)$/;"	f	struct:sg14::_impl::bitwise_and_op	access:public	signature:(lhs&rhs)
sg14::_impl::bitwise_or_op	include/sg14/bits/common.h	/^        struct bitwise_or_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::bitwise_or_op	src/single_header/fixed_point.h	/^        struct bitwise_or_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::bitwise_xor_op	include/sg14/bits/common.h	/^        struct bitwise_xor_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::bitwise_xor_op	src/single_header/fixed_point.h	/^        struct bitwise_xor_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::cast_to_common_type	include/sg14/auxiliary/elastic_integer.h	/^        -> decltype(op(cast_to_common_type(lhs, rhs), cast_to_common_type(rhs, lhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs, lhs)
sg14::_impl::cast_to_common_type	src/single_header/fixed_point.h	/^        -> decltype(op(cast_to_common_type(lhs, rhs), cast_to_common_type(rhs, lhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs, lhs)
sg14::_impl::comparison_op	include/sg14/bits/common.h	/^        struct comparison_op {$/;"	s	namespace:sg14::_impl
sg14::_impl::comparison_op	src/single_header/fixed_point.h	/^        struct comparison_op {$/;"	s	namespace:sg14::_impl
sg14::_impl::comparison_op::is_comparison	include/sg14/bits/common.h	/^            static constexpr bool is_comparison = true;$/;"	m	struct:sg14::_impl::comparison_op	access:public
sg14::_impl::comparison_op::is_comparison	src/single_header/fixed_point.h	/^            static constexpr bool is_comparison = true;$/;"	m	struct:sg14::_impl::comparison_op	access:public
sg14::_impl::decltype	include/sg14/bits/number_base.h	/^        -> decltype(lhs = lhs * rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs * rhs)
sg14::_impl::decltype	include/sg14/bits/number_base.h	/^        -> decltype(lhs = lhs + rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs + rhs)
sg14::_impl::decltype	include/sg14/bits/number_base.h	/^        -> decltype(lhs = lhs - rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs - rhs)
sg14::_impl::decltype	include/sg14/bits/number_base.h	/^        -> decltype(lhs = lhs \/ rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs / rhs)
sg14::_impl::decltype	src/single_header/fixed_point.h	/^        -> decltype(lhs = lhs * rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs * rhs)
sg14::_impl::decltype	src/single_header/fixed_point.h	/^        -> decltype(lhs = lhs + rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs + rhs)
sg14::_impl::decltype	src/single_header/fixed_point.h	/^        -> decltype(lhs = lhs - rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs - rhs)
sg14::_impl::decltype	src/single_header/fixed_point.h	/^        -> decltype(lhs = lhs \/ rhs)$/;"	f	namespace:sg14::_impl	signature:(lhs = lhs / rhs)
sg14::_impl::divide_op	include/sg14/bits/common.h	/^        struct divide_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::divide_op	src/single_header/fixed_point.h	/^        struct divide_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::equal_op	include/sg14/bits/common.h	/^        struct equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::equal_op	src/single_header/fixed_point.h	/^        struct equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::equal_op::decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs==rhs)$/;"	f	struct:sg14::_impl::equal_op	access:public	signature:(lhs==rhs)
sg14::_impl::equal_op::decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs==rhs)$/;"	f	struct:sg14::_impl::equal_op	access:public	signature:(lhs==rhs)
sg14::_impl::equal_tag	src/test/safe_integer.cpp	/^static_assert(sg14::_impl::operate(saturated_integer<uint8_t>(-1), 0, sg14::_impl::equal_tag),$/;"	m	class:sg14::_impl	file:
sg14::_impl::fp	include/sg14/bits/fixed_point_arithmetic.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
sg14::_impl::fp	include/sg14/bits/fixed_point_common_type.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
sg14::_impl::fp	include/sg14/bits/fixed_point_extras.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
sg14::_impl::fp	include/sg14/bits/fixed_point_math.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
sg14::_impl::fp	include/sg14/bits/fixed_point_type.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
sg14::_impl::fp	src/single_header/fixed_point.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl
sg14::_impl::fp::arithmetic	include/sg14/bits/fixed_point_arithmetic.h	/^            namespace arithmetic {$/;"	n	namespace:sg14::_impl::fp
sg14::_impl::fp::arithmetic::binary_pair	include/sg14/bits/fixed_point_arithmetic.h	/^                struct binary_pair<Lhs, fixed_point<RhsRep, RhsExponent>>$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:binary_pair_base
sg14::_impl::fp::arithmetic::binary_pair	include/sg14/bits/fixed_point_arithmetic.h	/^                struct binary_pair<fixed_point<LhsRep, LhsExponent>, Rhs>$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:binary_pair_base
sg14::_impl::fp::arithmetic::binary_pair	include/sg14/bits/fixed_point_arithmetic.h	/^                struct binary_pair<fixed_point<LhsRep, LhsExponent>, fixed_point<RhsRep, RhsExponent>>$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:binary_pair_base
sg14::_impl::fp::arithmetic::binary_pair::static_assert	include/sg14/bits/fixed_point_arithmetic.h	/^                    static_assert(std::numeric_limits<Lhs>::is_integer,$/;"	p	struct:sg14::_impl::fp::arithmetic::binary_pair	access:public	signature:(std::numeric_limits<Lhs>::is_integer, Ó)
sg14::_impl::fp::arithmetic::binary_pair::static_assert	include/sg14/bits/fixed_point_arithmetic.h	/^                    static_assert(std::numeric_limits<Rhs>::is_integer,$/;"	p	struct:sg14::_impl::fp::arithmetic::binary_pair	access:public	signature:(std::numeric_limits<Rhs>::is_integer, Ó)
sg14::_impl::fp::arithmetic::binary_pair_base	include/sg14/bits/fixed_point_arithmetic.h	/^                struct binary_pair_base {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<lean_tag, OperationTag, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<lean_tag, _impl::divide_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<lean_tag, _impl::multiply_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<wide_tag, OperationTag, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<wide_tag, _impl::divide_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::intermediate	include/sg14/bits/fixed_point_arithmetic.h	/^                struct intermediate<wide_tag, _impl::multiply_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::intermediate::exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int exponent = Lhs::exponent-Rhs::digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::intermediate	access:public
sg14::_impl::fp::arithmetic::operate_params	include/sg14/bits/fixed_point_arithmetic.h	/^                struct operate_params {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::add_op, Lhs, Rhs> : public std::integral_constant<int, _impl::min<int>($/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
sg14::_impl::fp::arithmetic::rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::divide_op, Lhs, Rhs> : public std::integral_constant<int,$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
sg14::_impl::fp::arithmetic::rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::minus_op, Rhs> : public std::integral_constant<int, Rhs::exponent> {$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
sg14::_impl::fp::arithmetic::rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::multiply_op, Lhs, Rhs> : public std::integral_constant<int,$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
sg14::_impl::fp::arithmetic::rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::plus_op, Rhs> : public std::integral_constant<int, Rhs::exponent> {$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
sg14::_impl::fp::arithmetic::rep_op_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                struct rep_op_exponent<_impl::subtract_op, Lhs, Rhs>$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:std::integral_constant
sg14::_impl::fp::arithmetic::result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<lean_tag, OperationTag, Lhs, Rhs> : result<raw_tag, OperationTag, Lhs, Rhs> {};$/;"	s	namespace:sg14::_impl::fp::arithmetic	inherits:result
sg14::_impl::fp::arithmetic::result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<raw_tag, OperationTag, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<wide_tag, OperationTag, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<wide_tag, _impl::divide_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::result	include/sg14/bits/fixed_point_arithmetic.h	/^                struct result<wide_tag, _impl::multiply_op, Lhs, Rhs> {$/;"	s	namespace:sg14::_impl::fp::arithmetic
sg14::_impl::fp::arithmetic::result::digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int digits = Lhs::digits+Rhs::digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int digits = _impl::max(necessary_digits, promotion_digits);$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int exponent = rep_op_exponent<OperationTag, Lhs, Rhs>::value;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::fractional_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int fractional_digits = Lhs::fractional_digits+Rhs::integer_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::integer_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int integer_digits = Lhs::integer_digits+Rhs::fractional_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::is_signed	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr bool is_signed =$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::necessary_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int necessary_digits = integer_digits+fractional_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::promotion_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int promotion_digits = digits<rep_op_result>::value;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::rep_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int rep_exponent = -fractional_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::rep_exponent	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int rep_exponent = rep_op_exponent<_impl::multiply_op, Lhs, Rhs>::value;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::result_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int result_digits = _impl::max(sufficient_digits, digits<rep_op_result>::value);$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::sufficient_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr _digits_type sufficient_digits = sufficient_integer_digits+sufficient_fractional_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::sufficient_fractional_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int sufficient_fractional_digits = _impl::max(Lhs::fractional_digits,$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::sufficient_integer_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int sufficient_integer_digits = _impl::max(Lhs::integer_digits,$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::arithmetic::result::sufficient_sign_bits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int sufficient_sign_bits = std::is_signed<rep_op_result>::value;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sg14::_impl::fp::ct	include/sg14/bits/fixed_point_common_type.h	/^            namespace ct {$/;"	n	namespace:sg14::_impl::fp
sg14::_impl::fp::ct::common_type_mixed	include/sg14/bits/fixed_point_common_type.h	/^                struct common_type_mixed<$/;"	s	namespace:sg14::_impl::fp::ct	inherits:std::common_type
sg14::_impl::fp::ct::common_type_mixed	include/sg14/bits/fixed_point_common_type.h	/^                struct common_type_mixed<fixed_point$/;"	s	namespace:sg14::_impl::fp::ct	inherits:std::common_type
sg14::_impl::fp::dummy	include/sg14/bits/fixed_point_math.h	/^            template<class Rep, int Exponent, _impl::enable_if_t<(Exponent>=0), int> dummy = 0>$/;"	m	namespace:sg14::_impl::fp
sg14::_impl::fp::evaluate_polynomial	include/sg14/bits/fixed_point_math.h	/^            constexpr inline fixed_point<Rep, Exponent> evaluate_polynomial($/;"	f	namespace:sg14::_impl::fp	signature:( fixed_point<Rep, Exponent> xf)
sg14::_impl::fp::extras	include/sg14/bits/fixed_point_extras.h	/^            namespace extras {$/;"	n	namespace:sg14::_impl::fp
sg14::_impl::fp::extras::sqrt_bit	include/sg14/bits/fixed_point_extras.h	/^                constexpr Rep sqrt_bit(Rep n)$/;"	f	namespace:sg14::_impl::fp::extras	signature:(Rep n)
sg14::_impl::fp::extras::sqrt_bit	include/sg14/bits/fixed_point_extras.h	/^                constexpr Rep sqrt_bit(Rep n, Rep bit)$/;"	f	namespace:sg14::_impl::fp::extras	signature:(Rep n, Rep bit)
sg14::_impl::fp::extras::sqrt_solve1	include/sg14/bits/fixed_point_extras.h	/^                constexpr Rep sqrt_solve1(Rep n)$/;"	f	namespace:sg14::_impl::fp::extras	signature:(Rep n)
sg14::_impl::fp::extras::sqrt_solve3	include/sg14/bits/fixed_point_extras.h	/^                constexpr Rep sqrt_solve3($/;"	f	namespace:sg14::_impl::fp::extras	signature:( Rep n, Rep bit, Rep result)
sg14::_impl::fp::operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::division_named_function_tag>(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14::_impl::fp	signature:(lhs, rhs, _impl::divide_tag)
sg14::_impl::fp::poly_coeffs	include/sg14/bits/fixed_point_math.h	/^            struct poly_coeffs {$/;"	s	namespace:sg14::_impl::fp
sg14::_impl::fp::poly_coeffs::a1	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a1;$/;"	m	class:sg14::_impl::fp::poly_coeffs
sg14::_impl::fp::poly_coeffs::a2	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a2;$/;"	m	class:sg14::_impl::fp::poly_coeffs
sg14::_impl::fp::poly_coeffs::a3	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a3;$/;"	m	class:sg14::_impl::fp::poly_coeffs
sg14::_impl::fp::poly_coeffs::a4	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a4;$/;"	m	class:sg14::_impl::fp::poly_coeffs
sg14::_impl::fp::poly_coeffs::a5	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a5;$/;"	m	class:sg14::_impl::fp::poly_coeffs
sg14::_impl::fp::poly_coeffs::a6	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a6;$/;"	m	class:sg14::_impl::fp::poly_coeffs
sg14::_impl::fp::poly_coeffs::a7	include/sg14/bits/fixed_point_math.h	/^            constexpr CoeffType poly_coeffs<CoeffType>::a7;$/;"	m	class:sg14::_impl::fp::poly_coeffs
sg14::_impl::fp::rounding_conversion	include/sg14/bits/fixed_point_math.h	/^            constexpr FixedPoint rounding_conversion(double d) {$/;"	f	namespace:sg14::_impl::fp	signature:(double d)
sg14::_impl::from_rep	include/sg14/auxiliary/precise_integer.h	/^        -> decltype(from_rep<precise_integer<op_result<Operator, LhsRep, RhsRep>, RoundingTag>>(Operator()(lhs.data(), rhs.data())))$/;"	f	namespace:sg14::_impl	signature:(Operator(
sg14::_impl::from_value	include/sg14/bits/number_base.h	/^        -> decltype(op(static_cast<const LhsDerived &>(lhs), from_value<LhsDerived>(rhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs)
sg14::_impl::from_value	src/single_header/fixed_point.h	/^        -> decltype(op(static_cast<const LhsDerived &>(lhs), from_value<LhsDerived>(rhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs)
sg14::_impl::get_rep	include/sg14/auxiliary/elastic_integer.h	/^        struct get_rep<elastic_integer<Digits, Narrowest>> {$/;"	s	namespace:sg14::_impl
sg14::_impl::get_rep	include/sg14/auxiliary/precise_integer.h	/^        struct get_rep<precise_integer<Rep, RoundingTag>> {$/;"	s	namespace:sg14::_impl
sg14::_impl::get_rep	include/sg14/auxiliary/safe_integer.h	/^        struct get_rep<safe_integer<Rep, OverflowTag>> {$/;"	s	namespace:sg14::_impl
sg14::_impl::get_rep	include/sg14/bits/fixed_point_extras.h	/^        struct get_rep<fixed_point<Rep, Exponent>> {$/;"	s	namespace:sg14::_impl
sg14::_impl::get_rep	src/single_header/fixed_point.h	/^        struct get_rep<elastic_integer<Digits, Narrowest>> {$/;"	s	namespace:sg14::_impl
sg14::_impl::greater_than_or_equal_op	include/sg14/bits/common.h	/^        struct greater_than_or_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::greater_than_or_equal_op	src/single_header/fixed_point.h	/^        struct greater_than_or_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::identical	include/sg14/bits/type_traits.h	/^        constexpr bool identical(const A& a, const B& b)$/;"	f	namespace:sg14::_impl	signature:(const A& a, const B& b)
sg14::_impl::identical	src/single_header/fixed_point.h	/^        constexpr bool identical(const A& a, const B& b)$/;"	f	namespace:sg14::_impl	signature:(const A& a, const B& b)
sg14::_impl::is_class_derived_from_number_base	include/sg14/bits/number_base.h	/^        struct is_class_derived_from_number_base : std::false_type {};$/;"	s	namespace:sg14::_impl	inherits:std::false_type
sg14::_impl::is_class_derived_from_number_base	include/sg14/bits/number_base.h	/^        struct is_class_derived_from_number_base<$/;"	s	namespace:sg14::_impl	inherits:std::true_type
sg14::_impl::is_class_derived_from_number_base	src/single_header/fixed_point.h	/^        struct is_class_derived_from_number_base : std::false_type {};$/;"	s	namespace:sg14::_impl	inherits:std::false_type
sg14::_impl::is_class_derived_from_number_base	src/single_header/fixed_point.h	/^        struct is_class_derived_from_number_base<$/;"	s	namespace:sg14::_impl	inherits:std::true_type
sg14::_impl::is_derived_from_number_base	include/sg14/bits/number_base.h	/^        struct is_derived_from_number_base : std::false_type {};$/;"	s	namespace:sg14::_impl	inherits:std::false_type
sg14::_impl::is_derived_from_number_base	include/sg14/bits/number_base.h	/^        struct is_derived_from_number_base<Derived, enable_if_t<std::is_class<Derived>::value>>$/;"	s	namespace:sg14::_impl	inherits:is_class_derived_from_number_base
sg14::_impl::is_derived_from_number_base	src/single_header/fixed_point.h	/^        struct is_derived_from_number_base : std::false_type {};$/;"	s	namespace:sg14::_impl	inherits:std::false_type
sg14::_impl::is_derived_from_number_base	src/single_header/fixed_point.h	/^        struct is_derived_from_number_base<Derived, enable_if_t<std::is_class<Derived>::value>>$/;"	s	namespace:sg14::_impl	inherits:is_class_derived_from_number_base
sg14::_impl::less_than_op	include/sg14/bits/common.h	/^        struct less_than_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::less_than_op	src/single_header/fixed_point.h	/^        struct less_than_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::less_than_op::decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs<rhs)$/;"	f	struct:sg14::_impl::less_than_op	access:public	signature:(lhs<rhs) { return lhs<rhs; } }; struct greater_than_op : comparison_op { template<class Lhs, class Rhs> constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs>rhs)
sg14::_impl::less_than_op::decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs<rhs)$/;"	f	struct:sg14::_impl::less_than_op	access:public	signature:(lhs<rhs) { return lhs<rhs; } }; struct greater_than_op : comparison_op { template<class Lhs, class Rhs> constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs>rhs)
sg14::_impl::less_than_or_equal_op	include/sg14/bits/common.h	/^        struct less_than_or_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::less_than_or_equal_op	src/single_header/fixed_point.h	/^        struct less_than_or_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::less_than_or_equal_op::decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs<=rhs)$/;"	f	struct:sg14::_impl::less_than_or_equal_op	access:public	signature:(lhs<=rhs)
sg14::_impl::less_than_or_equal_op::decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs<=rhs)$/;"	f	struct:sg14::_impl::less_than_or_equal_op	access:public	signature:(lhs<=rhs)
sg14::_impl::make_safe_integer	include/sg14/auxiliary/safe_integer.h	/^        -> decltype(make_safe_integer<OverflowTag>(_overflow_impl::operate<OverflowTag, OperatorTag>()(lhs.data(), rhs.data())))$/;"	f	namespace:sg14::_impl	signature:(_overflow_impl::operate<OverflowTag, OperatorTag>(
sg14::_impl::max	include/sg14/bits/common.h	/^        constexpr T max(T a, T b)$/;"	f	namespace:sg14::_impl	signature:(T a, T b)
sg14::_impl::max	src/single_header/fixed_point.h	/^        constexpr T max(T a, T b)$/;"	f	namespace:sg14::_impl	signature:(T a, T b)
sg14::_impl::min	include/sg14/bits/common.h	/^        constexpr T min(T a, T b)$/;"	f	namespace:sg14::_impl	signature:(T a, T b)
sg14::_impl::min	src/single_header/fixed_point.h	/^        constexpr T min(T a, T b)$/;"	f	namespace:sg14::_impl	signature:(T a, T b)
sg14::_impl::minus_op	include/sg14/bits/common.h	/^        struct minus_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::minus_op	src/single_header/fixed_point.h	/^        struct minus_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::multiply_op	include/sg14/bits/common.h	/^        struct multiply_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::multiply_op	src/single_header/fixed_point.h	/^        struct multiply_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::multiply_op::decltype	include/sg14/bits/common.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs*rhs)$/;"	f	struct:sg14::_impl::multiply_op	access:public	signature:(lhs*rhs)
sg14::_impl::multiply_op::decltype	src/single_header/fixed_point.h	/^            constexpr auto operator()(const Lhs& lhs, const Rhs& rhs) const -> decltype(lhs*rhs)$/;"	f	struct:sg14::_impl::multiply_op	access:public	signature:(lhs*rhs)
sg14::_impl::not_equal_op	include/sg14/bits/common.h	/^        struct not_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::not_equal_op	src/single_header/fixed_point.h	/^        struct not_equal_op : comparison_op {$/;"	s	namespace:sg14::_impl	inherits:comparison_op
sg14::_impl::number_base	include/sg14/bits/number_base.h	/^        class number_base {$/;"	c	namespace:sg14::_impl
sg14::_impl::number_base	src/single_header/fixed_point.h	/^        class number_base {$/;"	c	namespace:sg14::_impl
sg14::_impl::number_base::_rep	include/sg14/bits/number_base.h	/^            rep _rep;$/;"	m	class:sg14::_impl::number_base	access:private
sg14::_impl::number_base::_rep	src/single_header/fixed_point.h	/^            rep _rep;$/;"	m	class:sg14::_impl::number_base	access:private
sg14::_impl::number_base::data	include/sg14/bits/number_base.h	/^            constexpr const rep& data() const$/;"	f	class:sg14::_impl::number_base	access:public	signature:() const
sg14::_impl::number_base::data	include/sg14/bits/number_base.h	/^            constexpr rep& data()$/;"	f	class:sg14::_impl::number_base	access:public	signature:()
sg14::_impl::number_base::data	src/single_header/fixed_point.h	/^            constexpr const rep& data() const$/;"	f	class:sg14::_impl::number_base	access:public	signature:() const
sg14::_impl::number_base::from_data	include/sg14/bits/number_base.h	/^            static constexpr Derived from_data(const rep& r)$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const rep& r)
sg14::_impl::number_base::from_data	src/single_header/fixed_point.h	/^            static constexpr Derived from_data(const rep& r)$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const rep& r)
sg14::_impl::number_base::number_base	include/sg14/bits/number_base.h	/^            constexpr number_base(const rep& r)$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const rep& r)
sg14::_impl::number_base::number_base	src/single_header/fixed_point.h	/^            constexpr number_base(const rep& r)$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const rep& r)
sg14::_impl::number_base::operator =	include/sg14/bits/number_base.h	/^            number_base& operator=(const T& r) {$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const T& r)
sg14::_impl::number_base::operator =	src/single_header/fixed_point.h	/^            number_base& operator=(const T& r) {$/;"	f	class:sg14::_impl::number_base	access:public	signature:(const T& r)
sg14::_impl::number_base::operator bool	include/sg14/bits/number_base.h	/^            explicit constexpr operator bool() const$/;"	f	class:sg14::_impl::number_base	access:public	signature:() const
sg14::_impl::number_base::operator bool	src/single_header/fixed_point.h	/^            explicit constexpr operator bool() const$/;"	f	class:sg14::_impl::number_base	access:public	signature:() const
sg14::_impl::op	include/sg14/auxiliary/elastic_integer.h	/^        -> decltype(op(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(lhs.data(), rhs.data())
sg14::_impl::op	include/sg14/bits/fixed_point_operators.h	/^        -> decltype(op(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(lhs.data(), rhs.data())
sg14::_impl::op	include/sg14/bits/number_base.h	/^        -> decltype(op(lhs, static_cast<Lhs>(static_cast<const RhsDerived&>(rhs))))$/;"	f	namespace:sg14::_impl	signature:(lhs, static_cast<Lhs>(static_cast<const RhsDerived&>(rhs)))
sg14::_impl::op	include/sg14/bits/number_base.h	/^        -> decltype(op(rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(rhs.data())
sg14::_impl::op	src/single_header/fixed_point.h	/^        -> decltype(op(lhs, static_cast<Lhs>(static_cast<const RhsDerived&>(rhs))))$/;"	f	namespace:sg14::_impl	signature:(lhs, static_cast<Lhs>(static_cast<const RhsDerived&>(rhs)))
sg14::_impl::op	src/single_header/fixed_point.h	/^        -> decltype(op(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(lhs.data(), rhs.data())
sg14::_impl::op	src/single_header/fixed_point.h	/^        -> decltype(op(rhs.data()))$/;"	f	namespace:sg14::_impl	signature:(rhs.data())
sg14::_impl::operate	include/sg14/auxiliary/safe_integer.h	/^        -> decltype(_overflow_impl::operate<OverflowTag, OperatorTag>()(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl	signature:()
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, add_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, add_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, bitwise_and_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_and_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, bitwise_or_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_or_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, bitwise_xor_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_xor_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, divide_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, divide_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, equal_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, greater_than_or_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, greater_than_or_equal_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, greater_than_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, greater_than_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, less_than_or_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, less_than_or_equal_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, less_than_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, less_than_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, multiply_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, multiply_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, not_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, not_equal_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(lhs, rhs, subtract_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, subtract_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(rhs, minus_tag))$/;"	f	namespace:sg14::_impl	signature:(rhs, minus_tag)
sg14::_impl::operate	include/sg14/bits/number_base.h	/^        -> decltype(operate(rhs, plus_tag))$/;"	f	namespace:sg14::_impl	signature:(rhs, plus_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, add_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, add_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, bitwise_and_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_and_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, bitwise_or_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_or_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, bitwise_xor_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, bitwise_xor_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, divide_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, divide_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, equal_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, greater_than_or_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, greater_than_or_equal_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, greater_than_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, greater_than_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, less_than_or_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, less_than_or_equal_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, less_than_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, less_than_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, multiply_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, multiply_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, not_equal_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, not_equal_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(lhs, rhs, subtract_tag))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs, subtract_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(rhs, minus_tag))$/;"	f	namespace:sg14::_impl	signature:(rhs, minus_tag)
sg14::_impl::operate	src/single_header/fixed_point.h	/^        -> decltype(operate(rhs, plus_tag))$/;"	f	namespace:sg14::_impl	signature:(rhs, plus_tag)
sg14::_impl::operate	src/test/p0675.cpp	/^        constexpr auto operate(smart_integer<LhsRep> const& lhs, smart_integer<RhsRep> const& rhs, multiply_op) {$/;"	f	namespace:sg14::_impl	signature:(smart_integer<LhsRep> const& lhs, smart_integer<RhsRep> const& rhs, multiply_op)
sg14::_impl::operate	src/test/p0675.cpp	/^        constexpr auto operate(smart_integer<LhsRep> const& lhs, smart_integer<RhsRep> const& rhs, subtract_op) {$/;"	f	namespace:sg14::_impl	signature:(smart_integer<LhsRep> const& lhs, smart_integer<RhsRep> const& rhs, subtract_op)
sg14::_impl::operate	src/test/p0675.cpp	/^        constexpr auto operate(smart_integer<Rep> const& lhs, smart_integer<Rep> const& rhs, equal_op) {$/;"	f	namespace:sg14::_impl	signature:(smart_integer<Rep> const& lhs, smart_integer<Rep> const& rhs, equal_op)
sg14::_impl::operate_common_tag	include/sg14/auxiliary/precise_integer.h	/^        -> decltype(operate_common_tag<Operator, common_type_t<LhsRoundingTag, RhsRoundingTag>>(lhs, rhs))$/;"	f	namespace:sg14::_impl	signature:(lhs, rhs)
sg14::_impl::operate_params	include/sg14/auxiliary/elastic_integer.h	/^        struct operate_params {$/;"	s	namespace:sg14::_impl
sg14::_impl::operate_params	src/single_header/fixed_point.h	/^        struct operate_params {$/;"	s	namespace:sg14::_impl
sg14::_impl::operate_params::narrowest_width	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr _digits_type narrowest_width = _impl::max($/;"	m	struct:sg14::_impl::operate_params	access:public
sg14::_impl::operate_params::narrowest_width	src/single_header/fixed_point.h	/^            static constexpr _digits_type narrowest_width = _impl::max($/;"	m	struct:sg14::_impl::operate_params	access:public
sg14::_impl::plus_op	include/sg14/bits/common.h	/^        struct plus_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::plus_op	src/single_header/fixed_point.h	/^        struct plus_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::add_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::bitwise_and_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::bitwise_or_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::bitwise_xor_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::divide_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::multiply_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	include/sg14/auxiliary/elastic_integer.h	/^        struct policy<_impl::subtract_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	src/single_header/fixed_point.h	/^        struct policy<_impl::add_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	src/single_header/fixed_point.h	/^        struct policy<_impl::bitwise_and_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	src/single_header/fixed_point.h	/^        struct policy<_impl::bitwise_or_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	src/single_header/fixed_point.h	/^        struct policy<_impl::bitwise_xor_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	src/single_header/fixed_point.h	/^        struct policy<_impl::divide_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	src/single_header/fixed_point.h	/^        struct policy<_impl::multiply_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy	src/single_header/fixed_point.h	/^        struct policy<_impl::subtract_op, LhsTraits, RhsTraits> {$/;"	s	namespace:sg14::_impl
sg14::_impl::policy::contribution	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int contribution(int operand_digits) { return operand_digits == 1 ? 0 : operand_digits; }$/;"	f	struct:sg14::_impl::policy	access:public	signature:(int operand_digits)
sg14::_impl::policy::contribution	src/single_header/fixed_point.h	/^            static constexpr int contribution(int operand_digits) { return operand_digits == 1 ? 0 : operand_digits; }$/;"	f	struct:sg14::_impl::policy	access:public	signature:(int operand_digits)
sg14::_impl::policy::digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = LhsTraits::digits;$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits) + (LhsTraits::is_signed | RhsTraits::is_signed);$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits)+1;$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits);$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = _impl::min(LhsTraits::digits, RhsTraits::digits);$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr int digits = max(1, contribution(LhsTraits::digits)+contribution(RhsTraits::digits));$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	src/single_header/fixed_point.h	/^            static constexpr int digits = LhsTraits::digits;$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	src/single_header/fixed_point.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits) + (LhsTraits::is_signed | RhsTraits::is_signed);$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	src/single_header/fixed_point.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits)+1;$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	src/single_header/fixed_point.h	/^            static constexpr int digits = _impl::max(LhsTraits::digits, RhsTraits::digits);$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	src/single_header/fixed_point.h	/^            static constexpr int digits = _impl::min(LhsTraits::digits, RhsTraits::digits);$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::digits	src/single_header/fixed_point.h	/^            static constexpr int digits = max(1, contribution(LhsTraits::digits)+contribution(RhsTraits::digits));$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::is_signed	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr bool is_signed = LhsTraits::is_signed || RhsTraits::is_signed; $/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::is_signed	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr bool is_signed = LhsTraits::is_signed || RhsTraits::is_signed;$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::is_signed	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr bool is_signed = true;$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::is_signed	src/single_header/fixed_point.h	/^            static constexpr bool is_signed = LhsTraits::is_signed || RhsTraits::is_signed;$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::policy::is_signed	src/single_header/fixed_point.h	/^            static constexpr bool is_signed = true;$/;"	m	struct:sg14::_impl::policy	access:public
sg14::_impl::precedes	include/sg14/bits/number_base.h	/^        struct precedes {$/;"	s	namespace:sg14::_impl
sg14::_impl::precedes	src/single_header/fixed_point.h	/^        struct precedes {$/;"	s	namespace:sg14::_impl
sg14::_impl::precedes::value	include/sg14/bits/number_base.h	/^            static constexpr bool value =$/;"	m	struct:sg14::_impl::precedes	access:public
sg14::_impl::precedes::value	src/single_header/fixed_point.h	/^            static constexpr bool value =$/;"	m	struct:sg14::_impl::precedes	access:public
sg14::_impl::scale	include/sg14/num_traits.h	/^        -> decltype(sg14::scale<T>()(i, base, exp)) {$/;"	f	namespace:sg14::_impl	signature:()
sg14::_impl::scale	src/single_header/fixed_point.h	/^        -> decltype(sg14::scale<T>()(i, base, exp)) {$/;"	f	namespace:sg14::_impl	signature:()
sg14::_impl::set_rep	include/sg14/auxiliary/elastic_integer.h	/^        struct set_rep<elastic_integer<Digits, OldNarrowest>, NewNarrowest> {$/;"	s	namespace:sg14::_impl
sg14::_impl::set_rep	include/sg14/auxiliary/precise_integer.h	/^        struct set_rep<precise_integer<OldRep, RoundingTag>, NewRep> {$/;"	s	namespace:sg14::_impl
sg14::_impl::set_rep	include/sg14/auxiliary/safe_integer.h	/^        struct set_rep<safe_integer<OldRep, OverflowTag>, NewRep> {$/;"	s	namespace:sg14::_impl
sg14::_impl::set_rep	include/sg14/bits/fixed_point_extras.h	/^        struct set_rep<fixed_point<OldRep, Exponent>, NewRep> {$/;"	s	namespace:sg14::_impl
sg14::_impl::set_rep	src/single_header/fixed_point.h	/^        struct set_rep<elastic_integer<Digits, OldNarrowest>, NewNarrowest> {$/;"	s	namespace:sg14::_impl
sg14::_impl::sg14	src/single_header/fixed_point.h	/^namespace sg14 {$/;"	n	namespace:sg14::_impl
sg14::_impl::sg14::_fixed_point_operators_impl	src/single_header/fixed_point.h	/^    namespace _fixed_point_operators_impl {$/;"	n	namespace:sg14::_impl::sg14
sg14::_impl::sg14::_fixed_point_operators_impl::is_heterogeneous	src/single_header/fixed_point.h	/^        constexpr bool is_heterogeneous() {$/;"	f	namespace:sg14::_impl::sg14::_fixed_point_operators_impl	signature:()
sg14::_impl::sg14::_impl	src/single_header/fixed_point.h	/^    namespace _impl {$/;"	n	namespace:sg14::_impl::sg14
sg14::_impl::sg14::_impl::fp	src/single_header/fixed_point.h	/^        namespace fp {$/;"	n	namespace:sg14::_impl::sg14::_impl
sg14::_impl::sg14::_impl::fp::ct	src/single_header/fixed_point.h	/^            namespace ct {$/;"	n	namespace:sg14::_impl::sg14::_impl::fp
sg14::_impl::sg14::_impl::fp::ct::common_type_mixed	src/single_header/fixed_point.h	/^                struct common_type_mixed<$/;"	s	namespace:sg14::_impl::sg14::_impl::fp::ct	inherits:std::common_type
sg14::_impl::sg14::_impl::fp::ct::common_type_mixed	src/single_header/fixed_point.h	/^                struct common_type_mixed<fixed_point$/;"	s	namespace:sg14::_impl::sg14::_impl::fp::ct	inherits:std::common_type
sg14::_impl::sg14::_impl::op	src/single_header/fixed_point.h	/^        -> decltype(op(lhs.data(), rhs.data()))$/;"	f	namespace:sg14::_impl::sg14::_impl	signature:(lhs.data(), rhs.data())
sg14::_impl::sg14::_impl::static_cast	src/single_header/fixed_point.h	/^        -> decltype(op(static_cast<_impl::common_type_t<Lhs, Rhs>>(lhs), static_cast<_impl::common_type_t<Lhs, Rhs>>(rhs)))$/;"	f	namespace:sg14::_impl::sg14::_impl	signature:(rhs)
sg14::_impl::sg14::fixed_point	src/single_header/fixed_point.h	/^    -> decltype(lhs*fixed_point<RhsInteger>(rhs))$/;"	f	namespace:sg14::_impl::sg14	signature:(rhs)
sg14::_impl::sg14::operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14::_impl::sg14	signature:(lhs, rhs, _impl::add_tag)
sg14::_impl::sg14::operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14::_impl::sg14	signature:(lhs, rhs, _impl::multiply_tag)
sg14::_impl::sg14::operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14::_impl::sg14	signature:(lhs, rhs, _impl::subtract_tag)
sg14::_impl::sg14::operate	src/single_header/fixed_point.h	/^    -> decltype(_impl::fp::operate<_impl::fp::division_arithmetic_operator_tag>(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14::_impl::sg14	signature:(lhs, rhs, _impl::divide_tag)
sg14::_impl::static_cast	include/sg14/auxiliary/elastic_integer.h	/^        -> decltype(static_cast<_impl::common_type_t<$/;"	f	namespace:sg14::_impl	signature:(from)
sg14::_impl::static_cast	include/sg14/bits/fixed_point_operators.h	/^        -> decltype(op(static_cast<_impl::common_type_t<Lhs, Rhs>>(lhs), static_cast<_impl::common_type_t<Lhs, Rhs>>(rhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs)
sg14::_impl::static_cast	include/sg14/bits/number_base.h	/^        -> decltype(op(_impl::from_value<RhsDerived>(lhs), static_cast<const RhsDerived&>(rhs))) {$/;"	f	namespace:sg14::_impl	signature:(rhs)
sg14::_impl::static_cast	src/single_header/fixed_point.h	/^        -> decltype(op(_impl::from_value<RhsDerived>(lhs), static_cast<const RhsDerived&>(rhs))) {$/;"	f	namespace:sg14::_impl	signature:(rhs)
sg14::_impl::static_cast	src/single_header/fixed_point.h	/^        -> decltype(static_cast<_impl::common_type_t<$/;"	f	namespace:sg14::_impl	signature:(from)
sg14::_impl::std	src/single_header/fixed_point.h	/^namespace std {$/;"	n	namespace:sg14::_impl
sg14::_impl::std::common_type	src/single_header/fixed_point.h	/^    struct common_type<Lhs, sg14::fixed_point<RhsRep, RhsExponent>> {$/;"	s	namespace:sg14::_impl::std
sg14::_impl::std::common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::fixed_point<LhsRep, LhsExponent>, Rhs> {$/;"	s	namespace:sg14::_impl::std
sg14::_impl::std::common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::fixed_point<LhsRep, LhsExponent>, sg14::fixed_point<RhsRep, RhsExponent>> {$/;"	s	namespace:sg14::_impl::std
sg14::_impl::std::common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::fixed_point<Rep, Exponent>> {$/;"	s	namespace:sg14::_impl::std
sg14::_impl::subtract_op	include/sg14/bits/common.h	/^        struct subtract_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::subtract_op	src/single_header/fixed_point.h	/^        struct subtract_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sg14::_impl::used_bits_symmetric	include/sg14/auxiliary/numeric.h	/^        constexpr int used_bits_symmetric(Integer value)$/;"	f	namespace:sg14::_impl	signature:(Integer value)
sg14::_impl::used_bits_symmetric	src/single_header/fixed_point.h	/^        constexpr int used_bits_symmetric(Integer value)$/;"	f	namespace:sg14::_impl	signature:(Integer value)
sg14::_integer_impl	include/sg14/auxiliary/safe_integer.h	/^    namespace _integer_impl {$/;"	n	namespace:sg14
sg14::_integer_impl::are_integer_class_operands	include/sg14/auxiliary/safe_integer.h	/^        struct are_integer_class_operands {$/;"	s	namespace:sg14::_integer_impl
sg14::_integer_impl::are_integer_class_operands::integer_class	include/sg14/auxiliary/safe_integer.h	/^            static constexpr int integer_class = is_safe_integer<Lhs>::value + is_safe_integer<Rhs>::value;$/;"	m	struct:sg14::_integer_impl::are_integer_class_operands	access:public
sg14::_integer_impl::are_integer_class_operands::integer_or_float	include/sg14/auxiliary/safe_integer.h	/^            static constexpr int integer_or_float = _impl::is_integer_or_float<Lhs>::value + _impl::is_integer_or_float<Rhs>::value;$/;"	m	struct:sg14::_integer_impl::are_integer_class_operands	access:public
sg14::_integer_impl::are_integer_class_operands::value	include/sg14/auxiliary/safe_integer.h	/^            static constexpr bool value = (integer_class >= 1) && (integer_or_float == 2);$/;"	m	struct:sg14::_integer_impl::are_integer_class_operands	access:public
sg14::_integer_impl::common_type	include/sg14/auxiliary/safe_integer.h	/^        struct common_type<$/;"	s	namespace:sg14::_integer_impl
sg14::_integer_impl::common_type	include/sg14/auxiliary/safe_integer.h	/^        struct common_type<Lhs, safe_integer<RhsRep, RhsOverflowTag>>$/;"	s	namespace:sg14::_integer_impl	inherits:common_type
sg14::_integer_impl::is_safe_integer	include/sg14/auxiliary/safe_integer.h	/^        struct is_safe_integer$/;"	s	namespace:sg14::_integer_impl	inherits:std::false_type
sg14::_integer_impl::is_safe_integer	include/sg14/auxiliary/safe_integer.h	/^        struct is_safe_integer<safe_integer<Rep, OverflowTag>>$/;"	s	namespace:sg14::_integer_impl	inherits:std::true_type
sg14::_num_traits_impl	include/sg14/num_traits.h	/^    namespace _num_traits_impl {$/;"	n	namespace:sg14
sg14::_num_traits_impl	src/single_header/fixed_point.h	/^    namespace _num_traits_impl {$/;"	n	namespace:sg14
sg14::_num_traits_impl::are_composite	include/sg14/num_traits.h	/^        struct are_composite<> : std::false_type {$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::false_type
sg14::_num_traits_impl::are_composite	include/sg14/num_traits.h	/^        struct are_composite<ArgHead, ArgTail...>$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::integral_constant
sg14::_num_traits_impl::are_composite	src/single_header/fixed_point.h	/^        struct are_composite<> : std::false_type {$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::false_type
sg14::_num_traits_impl::are_composite	src/single_header/fixed_point.h	/^        struct are_composite<ArgHead, ArgTail...>$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::integral_constant
sg14::_num_traits_impl::enable_for_range	include/sg14/num_traits.h	/^        struct enable_for_range$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::enable_ifsg14::from_value_t
sg14::_num_traits_impl::enable_for_range	src/single_header/fixed_point.h	/^        struct enable_for_range$/;"	s	namespace:sg14::_num_traits_impl	inherits:std::enable_ifsg14::from_value_t
sg14::_num_traits_impl::pow	include/sg14/num_traits.h	/^        constexpr scale_result_type<T> pow(int base, int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int base, int exp)
sg14::_num_traits_impl::pow	src/single_header/fixed_point.h	/^        constexpr scale_result_type<T> pow(int base, int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int base, int exp)
sg14::_num_traits_impl::pow2	include/sg14/num_traits.h	/^        constexpr scale_result_type<T> pow2(int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int exp)
sg14::_num_traits_impl::pow2	src/single_header/fixed_point.h	/^        constexpr scale_result_type<T> pow2(int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int exp)
sg14::_num_traits_impl::pown	include/sg14/num_traits.h	/^        constexpr scale_result_type<T> pown(int base, int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int base, int exp)
sg14::_num_traits_impl::pown	src/single_header/fixed_point.h	/^        constexpr scale_result_type<T> pown(int base, int exp) {$/;"	f	namespace:sg14::_num_traits_impl	signature:(int base, int exp)
sg14::_numeric_impl	include/sg14/auxiliary/numeric.h	/^    namespace _numeric_impl {$/;"	n	namespace:sg14
sg14::_numeric_impl	src/single_header/fixed_point.h	/^    namespace _numeric_impl {$/;"	n	namespace:sg14
sg14::_numeric_impl::trailing_bits	include/sg14/auxiliary/numeric.h	/^        struct trailing_bits {$/;"	s	namespace:sg14::_numeric_impl
sg14::_numeric_impl::trailing_bits	include/sg14/auxiliary/numeric.h	/^        struct trailing_bits<Integer, _impl::enable_if_t<std::numeric_limits<Integer>::is_signed>> {$/;"	s	namespace:sg14::_numeric_impl
sg14::_numeric_impl::trailing_bits	src/single_header/fixed_point.h	/^        struct trailing_bits {$/;"	s	namespace:sg14::_numeric_impl
sg14::_numeric_impl::trailing_bits	src/single_header/fixed_point.h	/^        struct trailing_bits<Integer, _impl::enable_if_t<std::numeric_limits<Integer>::is_signed>> {$/;"	s	namespace:sg14::_numeric_impl
sg14::_numeric_impl::trailing_bits::f	include/sg14/auxiliary/numeric.h	/^            static constexpr int f(Integer value)$/;"	f	struct:sg14::_numeric_impl::trailing_bits	access:public	signature:(Integer value)
sg14::_numeric_impl::trailing_bits::f	src/single_header/fixed_point.h	/^            static constexpr int f(Integer value)$/;"	f	struct:sg14::_numeric_impl::trailing_bits	access:public	signature:(Integer value)
sg14::_numeric_impl::trailing_bits_positive	include/sg14/auxiliary/numeric.h	/^        constexpr int trailing_bits_positive(Integer value, int mask_bits = sizeof(Integer)*CHAR_BIT\/2)$/;"	f	namespace:sg14::_numeric_impl	signature:(Integer value, int mask_bits = sizeof(Integer)*CHAR_BIT/2)
sg14::_numeric_impl::trailing_bits_positive	src/single_header/fixed_point.h	/^        constexpr int trailing_bits_positive(Integer value, int mask_bits = sizeof(Integer)*8\/2)$/;"	f	namespace:sg14::_numeric_impl	signature:(Integer value, int mask_bits = sizeof(Integer)*8/2)
sg14::_numeric_impl::used_bits	include/sg14/auxiliary/numeric.h	/^        struct used_bits {$/;"	s	namespace:sg14::_numeric_impl
sg14::_numeric_impl::used_bits	src/single_header/fixed_point.h	/^        struct used_bits {$/;"	s	namespace:sg14::_numeric_impl
sg14::_numeric_impl::used_bits::operator ()	include/sg14/auxiliary/numeric.h	/^            constexpr _impl::enable_if_t<!std::numeric_limits<Integer>::is_signed, int> operator()(Integer value) const$/;"	f	struct:sg14::_numeric_impl::used_bits	access:public	signature:(Integer value) const
sg14::_numeric_impl::used_bits::operator ()	include/sg14/auxiliary/numeric.h	/^            constexpr int operator()(Integer value) const$/;"	f	struct:sg14::_numeric_impl::used_bits	access:public	signature:(Integer value) const
sg14::_numeric_impl::used_bits::operator ()	src/single_header/fixed_point.h	/^            constexpr _impl::enable_if_t<!std::numeric_limits<Integer>::is_signed, int> operator()(Integer value) const$/;"	f	struct:sg14::_numeric_impl::used_bits	access:public	signature:(Integer value) const
sg14::_numeric_impl::used_bits::operator ()	src/single_header/fixed_point.h	/^            constexpr int operator()(Integer value) const$/;"	f	struct:sg14::_numeric_impl::used_bits	access:public	signature:(Integer value) const
sg14::_numeric_impl::used_bits_positive	include/sg14/auxiliary/numeric.h	/^        constexpr int used_bits_positive(Integer value, int mask_bits = sizeof(Integer)*CHAR_BIT\/2)$/;"	f	namespace:sg14::_numeric_impl	signature:(Integer value, int mask_bits = sizeof(Integer)*CHAR_BIT/2)
sg14::_numeric_impl::used_bits_positive	src/single_header/fixed_point.h	/^        constexpr int used_bits_positive(Integer value, int mask_bits = sizeof(Integer)*8\/2)$/;"	f	namespace:sg14::_numeric_impl	signature:(Integer value, int mask_bits = sizeof(Integer)*8/2)
sg14::_overflow_impl	include/sg14/auxiliary/overflow.h	/^    namespace _overflow_impl {$/;"	n	namespace:sg14
sg14::_overflow_impl::negative_digits	include/sg14/auxiliary/overflow.h	/^        struct negative_digits$/;"	s	namespace:sg14::_overflow_impl	inherits:std::integral_constant
sg14::_overflow_impl::positive_digits	include/sg14/auxiliary/overflow.h	/^        struct positive_digits : public std::integral_constant<int, std::numeric_limits<T>::digits> {$/;"	s	namespace:sg14::_overflow_impl	inherits:std::integral_constant
sg14::_overflow_impl::return_if	include/sg14/auxiliary/overflow.h	/^        constexpr Result return_if(bool condition, const Result& value, const char* )$/;"	f	namespace:sg14::_overflow_impl	signature:(bool condition, const Result& value, const char* )
sg14::_precise_integer_impl	include/sg14/auxiliary/precise_integer.h	/^    namespace _precise_integer_impl {$/;"	n	namespace:sg14
sg14::_precise_integer_impl::is_precise_integer	include/sg14/auxiliary/precise_integer.h	/^        struct is_precise_integer : std::false_type {$/;"	s	namespace:sg14::_precise_integer_impl	inherits:std::false_type
sg14::_precise_integer_impl::is_precise_integer	include/sg14/auxiliary/precise_integer.h	/^        struct is_precise_integer<precise_integer<Rep, RoundingTag>> : std::true_type {$/;"	s	namespace:sg14::_precise_integer_impl	inherits:std::true_type
sg14::_sized_integer_impl	include/sg14/auxiliary/boost.multiprecision.h	/^    namespace _sized_integer_impl {$/;"	n	namespace:sg14
sg14::_sized_integer_impl	include/sg14/auxiliary/multiprecision.h	/^    namespace _sized_integer_impl {$/;"	n	namespace:sg14
sg14::closest_rounding_tag	include/sg14/auxiliary/precise_integer.h	/^    struct closest_rounding_tag {$/;"	s	namespace:sg14
sg14::closest_rounding_tag::convert	include/sg14/auxiliary/precise_integer.h	/^        static constexpr To convert(const From& from)$/;"	f	struct:sg14::closest_rounding_tag	access:public	signature:(const From& from)
sg14::compare	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::compare(lhs, rhs, _impl::equal_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::equal_tag)
sg14::compare	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::compare(lhs, rhs, _impl::equal_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::equal_tag)
sg14::const_integer	include/sg14/auxiliary/const_integer.h	/^    class const_integer {$/;"	c	namespace:sg14
sg14::const_integer	src/single_header/fixed_point.h	/^    class const_integer {$/;"	c	namespace:sg14
sg14::const_integer::digits	include/sg14/auxiliary/const_integer.h	/^        static constexpr int digits = Digits;$/;"	m	class:sg14::const_integer	access:public
sg14::const_integer::digits	src/single_header/fixed_point.h	/^        static constexpr int digits = Digits;$/;"	m	class:sg14::const_integer	access:public
sg14::const_integer::exponent	include/sg14/auxiliary/const_integer.h	/^        static constexpr int exponent = Exponent;$/;"	m	class:sg14::const_integer	access:public
sg14::const_integer::exponent	src/single_header/fixed_point.h	/^        static constexpr int exponent = Exponent;$/;"	m	class:sg14::const_integer	access:public
sg14::const_integer::operator T	include/sg14/auxiliary/const_integer.h	/^        constexpr explicit operator T() const { return value; }$/;"	f	class:sg14::const_integer	access:public	signature:() const
sg14::const_integer::operator T	src/single_header/fixed_point.h	/^        constexpr explicit operator T() const { return value; }$/;"	f	class:sg14::const_integer	access:public	signature:() const
sg14::const_integer::static_assert	include/sg14/auxiliary/const_integer.h	/^        static_assert($/;"	p	class:sg14::const_integer	access:public	signature:( digits == used_bits(Value), Ó)
sg14::const_integer::static_assert	include/sg14/auxiliary/const_integer.h	/^        static_assert($/;"	p	class:sg14::const_integer	access:public	signature:( exponent == trailing_bits(Value), Ó)
sg14::const_integer::static_assert	src/single_header/fixed_point.h	/^        static_assert($/;"	p	class:sg14::const_integer	access:public	signature:( digits == used_bits(Value), Ó)
sg14::const_integer::static_assert	src/single_header/fixed_point.h	/^        static_assert($/;"	p	class:sg14::const_integer	access:public	signature:( exponent == trailing_bits(Value), Ó)
sg14::const_integer::value	include/sg14/auxiliary/const_integer.h	/^        static constexpr value_type value = Value;$/;"	m	class:sg14::const_integer	access:public
sg14::const_integer::value	src/single_header/fixed_point.h	/^        static constexpr value_type value = Value;$/;"	m	class:sg14::const_integer	access:public
sg14::digits	include/sg14/auxiliary/boost.multiprecision.h	/^    struct digits<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>>$/;"	s	namespace:sg14	inherits:std::integral_constant
sg14::digits	include/sg14/auxiliary/boost.multiprecision.h	/^    struct digits<_bmp::number<Backend, ExpressionTemplates>>$/;"	s	namespace:sg14	inherits:digits
sg14::digits	include/sg14/auxiliary/elastic_integer.h	/^    struct digits<elastic_integer<Digits, Narrowest>> : std::integral_constant<_digits_type, Digits> {$/;"	s	namespace:sg14	inherits:std::integral_constant
sg14::digits	include/sg14/auxiliary/multiprecision.h	/^    struct digits<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>>$/;"	s	namespace:sg14	inherits:std::integral_constant
sg14::digits	include/sg14/auxiliary/multiprecision.h	/^    struct digits<_bmp::number<Backend, ExpressionTemplates>>$/;"	s	namespace:sg14	inherits:digits
sg14::digits	include/sg14/auxiliary/precise_integer.h	/^    struct digits<precise_integer<Rep, RoundingTag>> : digits<Rep> {$/;"	s	namespace:sg14	inherits:digits
sg14::digits	include/sg14/auxiliary/safe_integer.h	/^    struct digits<safe_integer<Rep, OverflowTag>> : digits<Rep> {$/;"	s	namespace:sg14	inherits:digits
sg14::digits	include/sg14/bits/fixed_point_extras.h	/^        struct digits<fixed_point<Rep, Exponent>> : digits<Rep> {$/;"	s	namespace:sg14	inherits:digits
sg14::digits	src/single_header/fixed_point.h	/^    struct digits<elastic_integer<Digits, Narrowest>> : std::integral_constant<_digits_type, Digits> {$/;"	s	namespace:sg14	inherits:std::integral_constant
sg14::digits::value	include/sg14/auxiliary/elastic_integer.h	/^        static constexpr _digits_type value = Digits;$/;"	m	struct:sg14::digits	access:public
sg14::digits::value	src/single_header/fixed_point.h	/^        static constexpr _digits_type value = Digits;$/;"	m	struct:sg14::digits	access:public
sg14::elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^    class elastic_integer : public _elastic_integer_impl::base_class_t<Digits, Narrowest> {$/;"	c	namespace:sg14	inherits:_elastic_integer_impl::base_class_t
sg14::elastic_integer	src/single_header/fixed_point.h	/^    class elastic_integer : public _elastic_integer_impl::base_class_t<Digits, Narrowest> {$/;"	c	namespace:sg14	inherits:_elastic_integer_impl::base_class_t
sg14::elastic_integer::digits	include/sg14/auxiliary/elastic_integer.h	/^        static constexpr int digits = Digits;$/;"	m	class:sg14::elastic_integer	access:public
sg14::elastic_integer::digits	src/single_header/fixed_point.h	/^        static constexpr int digits = Digits;$/;"	m	class:sg14::elastic_integer	access:public
sg14::elastic_integer::elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        constexpr elastic_integer(Number n)$/;"	f	class:sg14::elastic_integer	access:public	signature:(Number n)
sg14::elastic_integer::elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        constexpr elastic_integer(const elastic_integer& rhs)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const elastic_integer& rhs)
sg14::elastic_integer::elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        constexpr elastic_integer(const_integer<Integral, Value, Digits, Exponent>)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const_integer<Integral, Value, Digits, Exponent>)
sg14::elastic_integer::elastic_integer	include/sg14/auxiliary/elastic_integer.h	/^        explicit constexpr elastic_integer(const elastic_integer<FromWidth, FromNarrowest>& rhs)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const elastic_integer<FromWidth, FromNarrowest>& rhs)
sg14::elastic_integer::elastic_integer	src/single_header/fixed_point.h	/^        constexpr elastic_integer(Number n)$/;"	f	class:sg14::elastic_integer	access:public	signature:(Number n)
sg14::elastic_integer::elastic_integer	src/single_header/fixed_point.h	/^        constexpr elastic_integer(const elastic_integer& rhs)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const elastic_integer& rhs)
sg14::elastic_integer::elastic_integer	src/single_header/fixed_point.h	/^        constexpr elastic_integer(const_integer<Integral, Value, Digits, Exponent>)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const_integer<Integral, Value, Digits, Exponent>)
sg14::elastic_integer::elastic_integer	src/single_header/fixed_point.h	/^        explicit constexpr elastic_integer(const elastic_integer<FromWidth, FromNarrowest>& rhs)$/;"	f	class:sg14::elastic_integer	access:public	signature:(const elastic_integer<FromWidth, FromNarrowest>& rhs)
sg14::elastic_integer::operator =	include/sg14/auxiliary/elastic_integer.h	/^        elastic_integer& operator=(S s)$/;"	f	class:sg14::elastic_integer	access:public	signature:(S s)
sg14::elastic_integer::operator =	src/single_header/fixed_point.h	/^        elastic_integer& operator=(S s)$/;"	f	class:sg14::elastic_integer	access:public	signature:(S s)
sg14::elastic_integer::operator S	include/sg14/auxiliary/elastic_integer.h	/^        explicit constexpr operator S() const$/;"	f	class:sg14::elastic_integer	access:public	signature:() const
sg14::elastic_integer::operator S	src/single_header/fixed_point.h	/^        explicit constexpr operator S() const$/;"	f	class:sg14::elastic_integer	access:public	signature:() const
sg14::fixed_point	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(lhs*fixed_point<RhsInteger>(rhs))$/;"	f	namespace:sg14	signature:(rhs)
sg14::from_rep	include/sg14/bits/number_base.h	/^    struct from_rep<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
sg14::from_rep	src/single_header/fixed_point.h	/^    struct from_rep<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
sg14::from_value	include/sg14/auxiliary/elastic_integer.h	/^    struct from_value<elastic_integer<Digits, Narrowest>, Value> {$/;"	s	namespace:sg14
sg14::from_value	include/sg14/auxiliary/precise_integer.h	/^    struct from_value<precise_integer<Rep, RoundingTag>, Value> {$/;"	s	namespace:sg14
sg14::from_value	include/sg14/auxiliary/safe_integer.h	/^    struct from_value<safe_integer<Rep, OverflowTag>, Value> {$/;"	s	namespace:sg14
sg14::from_value	include/sg14/bits/fixed_point_extras.h	/^    struct from_value<fixed_point<Rep, Exponent>, Value> {$/;"	s	namespace:sg14
sg14::from_value	src/single_header/fixed_point.h	/^    struct from_value<elastic_integer<Digits, Narrowest>, Value> {$/;"	s	namespace:sg14
sg14::is_composite	include/sg14/bits/number_base.h	/^    struct is_composite<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> : std::true_type {$/;"	s	namespace:sg14	inherits:std::true_type
sg14::is_composite	include/sg14/num_traits.h	/^    struct is_composite : std::false_type {$/;"	s	namespace:sg14	inherits:std::false_type
sg14::is_composite	src/single_header/fixed_point.h	/^    struct is_composite : std::false_type {$/;"	s	namespace:sg14	inherits:std::false_type
sg14::is_composite	src/single_header/fixed_point.h	/^    struct is_composite<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> : std::true_type {$/;"	s	namespace:sg14	inherits:std::true_type
sg14::is_composite_v	include/sg14/num_traits.h	/^    constexpr auto is_composite_v = is_composite<T>::value;$/;"	m	namespace:sg14
sg14::is_const_integer	include/sg14/auxiliary/const_integer.h	/^    struct is_const_integer : std::false_type {};$/;"	s	namespace:sg14	inherits:std::false_type
sg14::is_const_integer	include/sg14/auxiliary/const_integer.h	/^    struct is_const_integer<const_integer<Integral, Value>> : std::true_type {};$/;"	s	namespace:sg14	inherits:std::true_type
sg14::is_const_integer	src/single_header/fixed_point.h	/^    struct is_const_integer : std::false_type {};$/;"	s	namespace:sg14	inherits:std::false_type
sg14::is_const_integer	src/single_header/fixed_point.h	/^    struct is_const_integer<const_integer<Integral, Value>> : std::true_type {};$/;"	s	namespace:sg14	inherits:std::true_type
sg14::leading_bits	include/sg14/auxiliary/numeric.h	/^    constexpr int leading_bits(const Integer& value)$/;"	f	namespace:sg14	signature:(const Integer& value)
sg14::leading_bits	include/sg14/auxiliary/numeric.h	/^    constexpr int leading_bits(int value)$/;"	f	namespace:sg14	signature:(int value)
sg14::leading_bits	src/single_header/fixed_point.h	/^    constexpr int leading_bits(const Integer& value)$/;"	f	namespace:sg14	signature:(const Integer& value)
sg14::literals	include/sg14/auxiliary/const_integer.h	/^    namespace literals {$/;"	n	namespace:sg14
sg14::literals	include/sg14/auxiliary/elastic_fixed_point.h	/^    namespace literals {$/;"	n	namespace:sg14
sg14::literals	src/single_header/fixed_point.h	/^    namespace literals {$/;"	n	namespace:sg14
sg14::literals::make_elastic_fixed_point	include/sg14/auxiliary/elastic_fixed_point.h	/^        -> decltype(make_elastic_fixed_point<int, std::intmax_t, _const_integer_impl::digits_to_integral<Digits...>::value>()) {$/;"	f	namespace:sg14::literals	signature:()
sg14::make_elastic_fixed_point	include/sg14/auxiliary/elastic_fixed_point.h	/^    make_elastic_fixed_point(Integral value)$/;"	f	namespace:sg14	signature:(Integral value)
sg14::make_elastic_fixed_point	include/sg14/auxiliary/elastic_fixed_point.h	/^    make_elastic_fixed_point(const_integer<Integral, Value> = const_integer<Integral, Value>{})$/;"	f	namespace:sg14	signature:(const_integer<Integral, Value> = const_integer<Integral, Value>{})
sg14::make_precise_elastic	src/test/precise_elastic_integer.cpp	/^    constexpr make_precise_elastic(Input const& input)$/;"	f	namespace:sg14	signature:(Input const& input)
sg14::make_psefp	src/test/precise_safe_elastic_fixed_point.cpp	/^    constexpr make_psefp(Input const& input)$/;"	f	namespace:sg14	signature:(Input const& input)
sg14::make_psefp	src/test/precise_safe_elastic_fixed_point.cpp	/^    constexpr make_psefp(const const_integer<Integral, Value, Digits, Exponent>&)$/;"	f	namespace:sg14	signature:(const const_integer<Integral, Value, Digits, Exponent>&)
sg14::make_psei	src/test/precise_safe_elastic_integer.cpp	/^    constexpr make_psei(Input const& input)$/;"	f	namespace:sg14	signature:(Input const& input)
sg14::make_safe_elastic	src/test/safe_elastic_integer.cpp	/^    constexpr make_safe_elastic(Input const& input)$/;"	f	namespace:sg14	signature:(Input const& input)
sg14::make_signed	include/sg14/auxiliary/boost.multiprecision.h	/^    struct make_signed<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>> {$/;"	s	namespace:sg14
sg14::make_signed	include/sg14/auxiliary/boost.multiprecision.h	/^    struct make_signed<_bmp::number<Backend, ExpressionTemplates>> {$/;"	s	namespace:sg14
sg14::make_signed	include/sg14/auxiliary/boost.simd.h	/^    struct make_signed<boost::simd::pack<T, N>> {$/;"	s	namespace:sg14
sg14::make_signed	include/sg14/auxiliary/multiprecision.h	/^    struct make_signed<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>> {$/;"	s	namespace:sg14
sg14::make_signed	include/sg14/auxiliary/multiprecision.h	/^    struct make_signed<_bmp::number<Backend, ExpressionTemplates>> {$/;"	s	namespace:sg14
sg14::make_signed	include/sg14/bits/number_base.h	/^    struct make_signed<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
sg14::make_signed	src/single_header/fixed_point.h	/^    struct make_signed<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
sg14::make_unsigned	include/sg14/auxiliary/boost.multiprecision.h	/^    struct make_unsigned<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>> {$/;"	s	namespace:sg14
sg14::make_unsigned	include/sg14/auxiliary/boost.multiprecision.h	/^    struct make_unsigned<_bmp::number<Backend, ExpressionTemplates>> {$/;"	s	namespace:sg14
sg14::make_unsigned	include/sg14/auxiliary/boost.simd.h	/^    struct make_unsigned<boost::simd::pack<T, N>> {$/;"	s	namespace:sg14
sg14::make_unsigned	include/sg14/auxiliary/multiprecision.h	/^    struct make_unsigned<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>> {$/;"	s	namespace:sg14
sg14::make_unsigned	include/sg14/auxiliary/multiprecision.h	/^    struct make_unsigned<_bmp::number<Backend, ExpressionTemplates>> {$/;"	s	namespace:sg14
sg14::make_unsigned	include/sg14/bits/number_base.h	/^    struct make_unsigned<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
sg14::make_unsigned	src/single_header/fixed_point.h	/^    struct make_unsigned<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
sg14::native_overflow	include/sg14/auxiliary/overflow.h	/^    } native_overflow{};$/;"	s	namespace:sg14
sg14::native_overflow_tag	include/sg14/auxiliary/overflow.h	/^    static constexpr struct native_overflow_tag {$/;"	s	namespace:sg14
sg14::operate	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::add_tag)
sg14::operate	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::divide_tag)
sg14::operate	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::multiply_tag)
sg14::operate	include/sg14/auxiliary/const_integer.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::subtract_tag)
sg14::operate	include/sg14/bits/fixed_point_named.h	/^    -> decltype(_impl::fp::operate<_impl::fp::division_named_function_tag>(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::divide_tag)
sg14::operate	include/sg14/bits/fixed_point_named.h	/^    -> decltype(_impl::fp::operate<_impl::fp::named_function_tag>(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::add_tag)
sg14::operate	include/sg14/bits/fixed_point_named.h	/^    -> decltype(_impl::fp::operate<_impl::fp::named_function_tag>(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::multiply_tag)
sg14::operate	include/sg14/bits/fixed_point_named.h	/^    -> decltype(_impl::fp::operate<_impl::fp::named_function_tag>(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::subtract_tag)
sg14::operate	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::add_tag)
sg14::operate	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::multiply_tag)
sg14::operate	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(_impl::fp::operate<_impl::fp::arithmetic_operator_tag>(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::subtract_tag)
sg14::operate	include/sg14/bits/fixed_point_operators.h	/^    -> decltype(_impl::fp::operate<_impl::fp::division_arithmetic_operator_tag>(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::divide_tag)
sg14::operate	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::add_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::add_tag)
sg14::operate	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::divide_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::divide_tag)
sg14::operate	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::multiply_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::multiply_tag)
sg14::operate	src/single_header/fixed_point.h	/^    -> decltype(_const_integer_impl::operate(lhs, rhs, _impl::subtract_tag))$/;"	f	namespace:sg14	signature:(lhs, rhs, _impl::subtract_tag)
sg14::operator <<	include/sg14/auxiliary/boost.simd.h	/^    ::std::ostream& operator<<(::std::ostream& out, const fixed_point<boost::simd::pack<T, N>, Exponent>& fp)$/;"	f	namespace:sg14	signature:(::std::ostream& out, const fixed_point<boost::simd::pack<T, N>, Exponent>& fp)
sg14::operator <<	include/sg14/bits/fixed_point_extras.h	/^    ::std::ostream& operator<<(::std::ostream& out, const fixed_point <Rep, Exponent>& fp)$/;"	f	namespace:sg14	signature:(::std::ostream& out, const fixed_point <Rep, Exponent>& fp)
sg14::operator >>	include/sg14/bits/fixed_point_extras.h	/^    ::std::istream& operator>>(::std::istream& in, fixed_point <Rep, Exponent>& fp)$/;"	f	namespace:sg14	signature:(::std::istream& in, fixed_point <Rep, Exponent>& fp)
sg14::precise_integer	include/sg14/auxiliary/precise_integer.h	/^    class precise_integer : public _impl::number_base<precise_integer<Rep, RoundingTag>, Rep> {$/;"	c	namespace:sg14	inherits:_impl::number_base
sg14::precise_integer::operator T	include/sg14/auxiliary/precise_integer.h	/^        constexpr explicit operator T() const$/;"	f	class:sg14::precise_integer	access:public	signature:() const
sg14::precise_integer::precise_integer	include/sg14/auxiliary/precise_integer.h	/^        constexpr precise_integer(const T& v)$/;"	f	class:sg14::precise_integer	access:public	signature:(const T& v)
sg14::safe_integer	include/sg14/auxiliary/safe_integer.h	/^    class safe_integer : public _impl::number_base<safe_integer<Rep, OverflowTag>, Rep> {$/;"	c	namespace:sg14	inherits:_impl::number_base
sg14::safe_integer::operator T	include/sg14/auxiliary/safe_integer.h	/^        constexpr explicit operator T() const$/;"	f	class:sg14::safe_integer	access:public	signature:() const
sg14::safe_integer::safe_integer	include/sg14/auxiliary/safe_integer.h	/^        constexpr safe_integer(const Rhs& rhs)$/;"	f	class:sg14::safe_integer	access:public	signature:(const Rhs& rhs)
sg14::safe_integer::safe_integer	include/sg14/auxiliary/safe_integer.h	/^        constexpr safe_integer(const safe_integer<RhsRep, RhsOverflowTag>& rhs)$/;"	f	class:sg14::safe_integer	access:public	signature:(const safe_integer<RhsRep, RhsOverflowTag>& rhs)
sg14::safe_integer::safe_integer	include/sg14/auxiliary/safe_integer.h	/^        constexpr safe_integer(const_integer<Integral, Value, Digits, Exponent>)$/;"	f	class:sg14::safe_integer	access:public	signature:(const_integer<Integral, Value, Digits, Exponent>)
sg14::saturated_overflow	include/sg14/auxiliary/overflow.h	/^    } saturated_overflow{};$/;"	s	namespace:sg14
sg14::saturated_overflow_tag	include/sg14/auxiliary/overflow.h	/^    static constexpr struct saturated_overflow_tag {$/;"	s	namespace:sg14
sg14::scale	include/sg14/auxiliary/elastic_integer.h	/^    struct scale<elastic_integer<Digits, Narrowest>> {$/;"	s	namespace:sg14
sg14::scale	include/sg14/auxiliary/precise_integer.h	/^    struct scale<precise_integer<Rep, RoundingTag>>$/;"	s	namespace:sg14	inherits:scale
sg14::scale	include/sg14/auxiliary/safe_integer.h	/^    struct scale<safe_integer<Rep, OverflowTag>> {$/;"	s	namespace:sg14
sg14::scale	include/sg14/bits/number_base.h	/^    struct scale<_impl::number_base<Derived, Rep>> {$/;"	s	namespace:sg14
sg14::scale	include/sg14/num_traits.h	/^    struct scale {$/;"	s	namespace:sg14
sg14::scale	src/single_header/fixed_point.h	/^    struct scale {$/;"	s	namespace:sg14
sg14::scale	src/single_header/fixed_point.h	/^    struct scale<_impl::number_base<Derived, Rep>> {$/;"	s	namespace:sg14
sg14::scale	src/single_header/fixed_point.h	/^    struct scale<elastic_integer<Digits, Narrowest>> {$/;"	s	namespace:sg14
sg14::scale::_num_traits_impl::pow	include/sg14/auxiliary/safe_integer.h	/^        -> decltype(_impl::to_rep(i) * _num_traits_impl::pow<value_type>(base, exp)) {$/;"	f	class:sg14::scale::_num_traits_impl	access:public	signature:(base, exp)
sg14::scale::operator ()	include/sg14/auxiliary/elastic_integer.h	/^        constexpr _value_type operator()(const _value_type& i, int base, int exp) const {$/;"	f	struct:sg14::scale	access:public	signature:(const _value_type& i, int base, int exp) const
sg14::scale::operator ()	include/sg14/bits/number_base.h	/^        constexpr Rep operator()(const Input &i, int base, int exp) const {$/;"	f	struct:sg14::scale	access:public	signature:(const Input &i, int base, int exp) const
sg14::scale::operator ()	src/single_header/fixed_point.h	/^        constexpr Rep operator()(const Input &i, int base, int exp) const {$/;"	f	struct:sg14::scale	access:public	signature:(const Input &i, int base, int exp) const
sg14::scale::operator ()	src/single_header/fixed_point.h	/^        constexpr _value_type operator()(const _value_type& i, int base, int exp) const {$/;"	f	struct:sg14::scale	access:public	signature:(const _value_type& i, int base, int exp) const
sg14::set_digits	include/sg14/auxiliary/boost.multiprecision.h	/^    struct set_digits<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>, MinNumDigits> {$/;"	s	namespace:sg14
sg14::set_digits	include/sg14/auxiliary/boost.multiprecision.h	/^    struct set_digits<_bmp::number<Backend, ExpressionTemplates>, MinNumDigits> {$/;"	s	namespace:sg14
sg14::set_digits	include/sg14/auxiliary/boost.simd.h	/^    struct set_digits<boost::simd::pack<T, N>, Digits> {$/;"	s	namespace:sg14
sg14::set_digits	include/sg14/auxiliary/elastic_integer.h	/^    struct set_digits<elastic_integer<Digits, Narrowest>, MinNumBits> {$/;"	s	namespace:sg14
sg14::set_digits	include/sg14/auxiliary/multiprecision.h	/^    struct set_digits<_bmp::cpp_int_backend<NumBits, NumBits, SignType, Checked, Allocator>, MinNumDigits> {$/;"	s	namespace:sg14
sg14::set_digits	include/sg14/auxiliary/multiprecision.h	/^    struct set_digits<_bmp::number<Backend, ExpressionTemplates>, MinNumDigits> {$/;"	s	namespace:sg14
sg14::set_digits	include/sg14/auxiliary/precise_integer.h	/^    struct set_digits<precise_integer<Rep, RoundingTag>, MinNumBits> {$/;"	s	namespace:sg14
sg14::set_digits	include/sg14/auxiliary/safe_integer.h	/^    struct set_digits<safe_integer<Rep, OverflowTag>, MinNumBits> {$/;"	s	namespace:sg14
sg14::set_digits	include/sg14/bits/fixed_point_extras.h	/^    struct set_digits<fixed_point<Rep, Exponent>, MinNumBits> {$/;"	s	namespace:sg14
sg14::set_digits	src/single_header/fixed_point.h	/^    struct set_digits<elastic_integer<Digits, Narrowest>, MinNumBits> {$/;"	s	namespace:sg14
sg14::set_digits::width	include/sg14/auxiliary/boost.multiprecision.h	/^        static constexpr unsigned width = MinNumDigits + (SignType == _bmp::signed_magnitude);$/;"	m	struct:sg14::set_digits	access:public
sg14::set_digits::width	include/sg14/auxiliary/multiprecision.h	/^        static constexpr unsigned width = MinNumDigits + (SignType == _bmp::signed_magnitude);$/;"	m	struct:sg14::set_digits	access:public
sg14::sqrt	include/sg14/bits/fixed_point_extras.h	/^    sqrt(const fixed_point <Rep, Exponent>& x)$/;"	f	namespace:sg14	signature:(const fixed_point <Rep, Exponent>& x)
sg14::throwing_overflow	include/sg14/auxiliary/overflow.h	/^    } throwing_overflow{};$/;"	s	namespace:sg14
sg14::throwing_overflow_tag	include/sg14/auxiliary/overflow.h	/^    static constexpr struct throwing_overflow_tag {$/;"	s	namespace:sg14
sg14::to_rep	include/sg14/bits/number_base.h	/^    struct to_rep<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
sg14::to_rep	src/single_header/fixed_point.h	/^    struct to_rep<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
sg14::to_rep::decltype	include/sg14/bits/number_base.h	/^        -> decltype(number.data()){$/;"	f	struct:sg14::to_rep	access:public	signature:(number.data())
sg14::to_rep::decltype	src/single_header/fixed_point.h	/^        -> decltype(number.data()){$/;"	f	struct:sg14::to_rep	access:public	signature:(number.data())
sg14::trailing_bits	include/sg14/auxiliary/numeric.h	/^    constexpr int trailing_bits(Integer value)$/;"	f	namespace:sg14	signature:(Integer value)
sg14::trailing_bits	src/single_header/fixed_point.h	/^    constexpr int trailing_bits(Integer value)$/;"	f	namespace:sg14	signature:(Integer value)
sg14::used_bits	include/sg14/auxiliary/numeric.h	/^    constexpr int used_bits(Integer value)$/;"	f	namespace:sg14	signature:(Integer value)
sg14::used_bits	src/single_header/fixed_point.h	/^    constexpr int used_bits(Integer value)$/;"	f	namespace:sg14	signature:(Integer value)
shift_left	src/test/fixed_point_common.h	/^static_assert(shift_left<1, int8>(int8(0))==0, "sg14::shift_left test failed");$/;"	p	signature:(int8(
shift_left	src/test/fixed_point_common.h	/^static_assert(shift_left<1, int8>(uint8(0))==0, "sg14::shift_left test failed");$/;"	p	signature:(uint8(
signed_elastic_test	src/test/elastic_fixed_point.cpp	/^struct signed_elastic_test :$/;"	s	file:	inherits:test_traits,positive_elastic_test
signed_elastic_test::is_equal_to	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(negative_min, negative_min), "comparison test error");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(negative_min, negative_min)
signed_elastic_test::is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than(negative_min, min), "numeric_limits test failed");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(negative_min, min)
signed_elastic_test::is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than<elastic_type>(negative_min, min), "comparison test error");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(negative_min, min)
signed_elastic_test::is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than<elastic_type>(negative_min, zero), "comparison test error");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(negative_min, zero)
signed_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(is_same<sg14::make_signed_t<elastic_type>, elastic_type>::value,$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(is_same<sg14::make_signed_t<elastic_type>, elastic_type>::value, Ó)
signed_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(numeric_limits::is_signed, "numeric_limits test failed");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(numeric_limits::is_signed, Ó)
signed_elastic_test::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<elastic_type>::is_signed, "subject of test class is not reported as signed");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(std::numeric_limits<elastic_type>::is_signed, Ó)
sizeof	src/test/make_elastic_fixed_point.cpp	/^        sizeof(make_elastic_fixed_point(const_integer<std::intmax_t, unsigned_limit>())) == sizeof(int),$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^        sizeof(make_elastic_fixed_point<char>(const_integer<std::intmax_t, unsigned_limit>{})) == sizeof(char),$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(-127_c)) == sizeof(int), "using too many bytes to represent -127");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(-128_c)) == sizeof(int), "using too many bytes to represent -128");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(-129_c)) == sizeof(int), "using too many bytes to represent -129");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(-1_c)) == sizeof(int), "using too many bytes to represent -1");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(-254_c)) == sizeof(int), "using too many bytes to represent -254");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(-255_c)) == sizeof(int), "using too many bytes to represent -255");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(-256_c)) == sizeof(int), "using too many bytes to represent -256");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(0_c)) <= sizeof(int), "using too many bytes to represent 0");$/;"	p	file:	signature:(make_elastic_fixed_point(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(1_c)) == sizeof(int), "using too many bytes to represent 1");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(255_c)) == sizeof(int), "using too many bytes to represent 255");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(256_c)) == sizeof(int), "using too many bytes to represent 256");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(257_c)) == sizeof(int), "using too many bytes to represent 257");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(510_c)) == sizeof(int), "using too many bytes to represent 510");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(511_c)) == sizeof(int), "using too many bytes to represent 511");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point(512_c)) == sizeof(int), "using too many bytes to represent 512");$/;"	v
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(-127_c)) == 1, "using too many bytes to represent -127");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(-128_c)) == 1, "using too many bytes to represent -128");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(-129_c)) == 2, "using too many bytes to represent -129");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(-1_c)) == 1, "using too many bytes to represent -1");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(-254_c)) == 1, "using too many bytes to represent -254");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(-255_c)) == 2, "using too many bytes to represent -255");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(-256_c)) == 1, "using too many bytes to represent -256");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(0_c)) == 1, "using too many bytes to represent 0");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(1_c)) == 1, "using too many bytes to represent 1");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(255_c)) == 2, "using too many bytes to represent 255");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(256_c)) == 1, "using too many bytes to represent 256");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(257_c)) == 2, "using too many bytes to represent 257");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(510_c)) == 2, "using too many bytes to represent 510");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(511_c)) == 2, "using too many bytes to represent 511");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
sizeof	src/test/make_elastic_fixed_point.cpp	/^static_assert(sizeof(make_elastic_fixed_point<signed char>(512_c)) == 1, "using too many bytes to represent 512");$/;"	p	file:	signature:(make_elastic_fixed_point<signed char>(
smart_integer	src/test/p0675.cpp	/^        constexpr smart_integer(const Rep& rhs) : sg14::_impl::number_base<smart_integer<Rep>, Rep>{rhs} {}$/;"	f	struct:__anon6::smart_integer	access:public	signature:(const Rep& rhs)
smart_integer	src/test/p0675.cpp	/^    struct smart_integer : public sg14::_impl::number_base<smart_integer<Rep>, Rep> {$/;"	s	namespace:__anon6	file:	inherits:sg14::_impl::number_base
specifiying	src/test/p0381.cpp	/^namespace specifiying {$/;"	n	file:
specifiying::static_assert	src/test/p0381.cpp	/^    static_assert(is_same<set_digits_t<uint64_t, 16>, uint16_t>::value, "a 64-bit unsigned integer was narrowed to 16-bits");$/;"	p	namespace:specifiying	file:	signature:(is_same<set_digits_t<uint64_t, 16>, uint16_t>::value, Ó)
specifiying::static_assert	src/test/p0381.cpp	/^    static_assert(is_same<set_digits_t<unsigned, 32>, uint32_t>::value, "uint32_t is an unsigned 32-bit integer");$/;"	p	namespace:specifiying	file:	signature:(is_same<set_digits_t<unsigned, 32>, uint32_t>::value, Ó)
sqrt	include/sg14/bits/fixed_point_extras.h	/^    sqrt(const fixed_point <Rep, Exponent>& x)$/;"	f	namespace:sg14	signature:(const fixed_point <Rep, Exponent>& x)
sqrt_bit	include/sg14/bits/fixed_point_extras.h	/^                constexpr Rep sqrt_bit(Rep n)$/;"	f	namespace:sg14::_impl::fp::extras	signature:(Rep n)
sqrt_bit	include/sg14/bits/fixed_point_extras.h	/^                constexpr Rep sqrt_bit(Rep n, Rep bit)$/;"	f	namespace:sg14::_impl::fp::extras	signature:(Rep n, Rep bit)
sqrt_solve1	include/sg14/bits/fixed_point_extras.h	/^                constexpr Rep sqrt_solve1(Rep n)$/;"	f	namespace:sg14::_impl::fp::extras	signature:(Rep n)
sqrt_solve3	include/sg14/bits/fixed_point_extras.h	/^                constexpr Rep sqrt_solve3($/;"	f	namespace:sg14::_impl::fp::extras	signature:( Rep n, Rep bit, Rep result)
square	src/test/cppnow2017.cpp	/^    auto square(acme::integer<short> f)$/;"	f	namespace:acme_debug	signature:(acme::integer<short> f)
square	src/test/cppnow2017.cpp	/^    auto square(acme::integer<short> f)$/;"	f	namespace:acme_ndebug	signature:(acme::integer<short> f)
square_elastic	src/test/zero_cost_square.cpp	/^float square_elastic(float input) {$/;"	f	signature:(float input)
square_elastic_integer	src/test/zero_cost_square.cpp	/^float square_elastic_integer(float input) {$/;"	f	signature:(float input)
square_fixed_point	src/test/zero_cost_square.cpp	/^float square_fixed_point(float input) {$/;"	f	signature:(float input)
square_int	src/test/zero_cost_square.cpp	/^float square_int(float input) {$/;"	f	signature:(float input)
static_assert	include/sg14/auxiliary/const_integer.h	/^        static_assert($/;"	p	class:sg14::const_integer	access:public	signature:( digits == used_bits(Value), Ó)
static_assert	include/sg14/auxiliary/const_integer.h	/^        static_assert($/;"	p	class:sg14::const_integer	access:public	signature:( exponent == trailing_bits(Value), Ó)
static_assert	include/sg14/bits/fixed_point_arithmetic.h	/^                    static_assert(std::numeric_limits<Lhs>::is_integer,$/;"	p	struct:sg14::_impl::fp::arithmetic::binary_pair	access:public	signature:(std::numeric_limits<Lhs>::is_integer, Ó)
static_assert	include/sg14/bits/fixed_point_arithmetic.h	/^                    static_assert(std::numeric_limits<Rhs>::is_integer,$/;"	p	struct:sg14::_impl::fp::arithmetic::binary_pair	access:public	signature:(std::numeric_limits<Rhs>::is_integer, Ó)
static_assert	src/single_header/fixed_point.h	/^        static_assert($/;"	p	class:sg14::const_integer	access:public	signature:( digits == used_bits(Value), Ó)
static_assert	src/single_header/fixed_point.h	/^        static_assert($/;"	p	class:sg14::const_integer	access:public	signature:( exponent == trailing_bits(Value), Ó)
static_assert	src/test/boost.simd.cpp	/^        static_assert(std::numeric_limits<pack < float>>::is_iec559, "");$/;"	p	namespace:__anon5::test_numeric_limits	file:	signature:(std::numeric_limits<pack < float>>::is_iec559, Ó)
static_assert	src/test/boost.simd.cpp	/^        static_assert(std::numeric_limits<pack<int>>::is_integer, "");$/;"	p	namespace:__anon5::test_numeric_limits	file:	signature:(std::numeric_limits<pack<int>>::is_integer, Ó)
static_assert	src/test/cppnow2017.cpp	/^    static_assert($/;"	p	namespace:operator_overload1	file:	signature:( is_same<decltype(safe_integer<short>{2}*safe_integer<short>{3}), safe_integer<short>>::value, Ó)
static_assert	src/test/cppnow2017.cpp	/^    static_assert($/;"	p	namespace:operator_overload2	file:	signature:( is_same<decltype(safe_integer<short>{2}*safe_integer<short>{3}), safe_integer<int>>::value, Ó)
static_assert	src/test/cppnow2017.cpp	/^    static_assert($/;"	p	namespace:operator_overload2	file:	signature:( is_same<decltype(safe_integer<short>{6}*safe_integer<int>{7}), safe_integer<int>>::value, Ó)
static_assert	src/test/cppnow2017.cpp	/^    static_assert(is_same<decltype(a), safe_elastic_integer<7>>::value, "error in CppNow 2017 slide");$/;"	p	namespace:composite	file:	signature:(is_same<decltype(a), safe_elastic_integer<7>>::value, Ó)
static_assert	src/test/cppnow2017.cpp	/^    static_assert(is_same<decltype(square(2)), int>::value, "error in CppNow 2017 slide");$/;"	p	namespace:acme_debug	file:	signature:(is_same<decltype(square(2)), int>::value, Ó)
static_assert	src/test/cppnow2017.cpp	/^    static_assert(is_same<decltype(square(2)), int>::value, "error in CppNow 2017 slide");$/;"	p	namespace:acme_ndebug	file:	signature:(is_same<decltype(square(2)), int>::value, Ó)
static_assert	src/test/cppnow2017.cpp	/^    static_assert(is_same<decltype(square(2)), safe_integer<int>>::value, "error in CppNow 2017 slide");$/;"	p	namespace:acme_debug	file:	signature:(is_same<decltype(square(2)), safe_integer<int>>::value, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert($/;"	p	struct:positive_elastic_test	file:	access:public	signature:( negate_result::fractional_digits==elastic_type::fractional_digits, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(digits<set_digits_t<elastic_integer<15, uint8_t>, 22>>::value == 22, "sg14::elastic_integer test failed");$/;"	p	namespace:__anon9	file:	signature:(digits<set_digits_t<elastic_integer<15, uint8_t>, 22>>::value == 22, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to((min+min)\/make_elastic_fixed_point(2_c), min), "operator\/ test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(min+min)/make_elastic_fixed_point(2_c), min
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to((min+min+min)\/make_elastic_fixed_point(3_c), min), "operator\/ test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(min+min+min)/make_elastic_fixed_point(3_c), min
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(is_same<sg14::make_signed_t<elastic_type>, elastic_type>::value,$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(is_same<sg14::make_signed_t<elastic_type>, elastic_type>::value, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(is_signed<sg14::make_signed_t<T>>::value,$/;"	p	struct:test_traits	file:	access:public	signature:(is_signed<sg14::make_signed_t<T>>::value, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(min==elastic_type::from_data(rep{1}), "numeric_limits test failed");$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(min==elastic_type::from_data(rep{1}), Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(numeric_limits::is_signed, "numeric_limits test failed");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(numeric_limits::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<T>::is_signed==IsSigned,$/;"	p	struct:test_traits	file:	access:public	signature:(std::numeric_limits<T>::is_signed==IsSigned, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(signed_type{zero}*unsigned_type{zero})>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(signed_type{zero}*unsigned_type{zero})>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(signed_type{zero}+unsigned_type{zero})>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(signed_type{zero}+unsigned_type{zero})>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(signed_type{zero}-unsigned_type{zero})>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(signed_type{zero}-unsigned_type{zero})>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(signed_type{zero}\/unsigned_type{zero})>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(signed_type{zero}/unsigned_type{zero})>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero*zero)>::is_signed$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero*zero)>::is_signed ==std::numeric_limits<decltype(zero)>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero*zero)>::is_signed$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero*zero)>::is_signed ==std::numeric_limits<elastic_type>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero+zero)>::is_signed$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero+zero)>::is_signed ==std::numeric_limits<elastic_type>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero-zero)>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero-zero)>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<decltype(zero\/zero)>::is_signed$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<decltype(zero/zero)>::is_signed ==std::numeric_limits<elastic_type>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<elastic_type>::is_signed, "subject of test class is not reported as signed");$/;"	p	struct:signed_elastic_test	file:	access:public	signature:(std::numeric_limits<elastic_type>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<elastic_type>::is_signed==numeric_limits::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<elastic_type>::is_signed==numeric_limits::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<elastic_type>::is_signed==std::numeric_limits<rep>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<elastic_type>::is_signed==std::numeric_limits<rep>::is_signed, Ó)
static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<signed_type>::is_signed,$/;"	p	struct:positive_elastic_test	file:	access:public	signature:(std::numeric_limits<signed_type>::is_signed, Ó)
static_assert	src/test/elastic_integer.cpp	/^        static_assert(is_elastic_integer<elastic_integer<10, int>>::value,$/;"	p	namespace:__anon1::test_is_elastic_integer	file:	signature:(is_elastic_integer<elastic_integer<10, int>>::value, Ó)
static_assert	src/test/elastic_integer.cpp	/^        static_assert(is_signed==std::numeric_limits<narrowest>::is_signed, "narrowest is different signedness");$/;"	p	struct:__anon1::elastic_integer_test	file:	access:public	signature:(is_signed==std::numeric_limits<narrowest>::is_signed, Ó)
static_assert	src/test/elastic_integer.cpp	/^        static_assert(is_signed==std::numeric_limits<typename value_type::rep>::is_signed,$/;"	p	struct:__anon1::elastic_integer_test	file:	access:public	signature:(is_signed==std::numeric_limits<typename value_type::rep>::is_signed, Ó)
static_assert	src/test/elastic_integer.cpp	/^        static_assert(numeric_limits::is_integer, "numeric_limits<elastic_integer<>>::is_integer test failed");$/;"	p	struct:__anon1::elastic_integer_test	file:	access:public	signature:(numeric_limits::is_integer, Ó)
static_assert	src/test/elastic_integer.cpp	/^        static_assert(precedes<elastic_integer<1>, int32_t>::value, "");$/;"	p	namespace:__anon1::test_operate	file:	signature:(precedes<elastic_integer<1>, int32_t>::value, Ó)
static_assert	src/test/elastic_integer.cpp	/^        static_assert(sg14::_impl::precedes<elastic_integer<1>, int32_t>::value, "");$/;"	p	namespace:__anon1::test_multiply	file:	signature:(sg14::_impl::precedes<elastic_integer<1>, int32_t>::value, Ó)
static_assert	src/test/elastic_integer.cpp	/^        static_assert(zero==0., "elastic_integer comparison test failed");$/;"	p	struct:__anon1::elastic_integer_test	file:	access:public	signature:(zero==0., Ó)
static_assert	src/test/elastic_integer.cpp	/^    static_assert(std::is_same<elastic_integer<7, int>::rep, int>::value, "");$/;"	p	namespace:__anon1	file:	signature:(std::is_same<elastic_integer<7, int>::rep, int>::value, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( exponent == fixed_point::exponent, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< decltype(min + min), ::fixed_point<decltype(declval<rep>() + declval<rep>()), exponent>>::value, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< decltype(min - min), ::fixed_point<decltype(declval<rep>() - declval<rep>()), exponent>>::value, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< fixed_point, sg14::_impl::common_type_t<fixed_point, fixed_point>>::value, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< fixed_point, sg14::_impl::common_type_t<fixed_point>>::value, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same< sg14::_impl::common_type_t<fixed_point>, sg14::_impl::common_type_t<fixed_point, fixed_point>>::value, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert($/;"	p	struct:FixedPointTesterOutsize	access:public	signature:( is_same<rep, typename fixed_point::rep>::value, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert((7 * min) - (4 * min) == divide(6 * min, 2), "basic arithmetic isn't working");$/;"	p	struct:FixedPointTester	access:public	signature:(7 * min) - (4 * min) == divide(6 * min, 2), Ó
static_assert	src/test/fixed_point_common.h	/^    static_assert(is_same<$/;"	p	struct:FixedPointTesterOutsize	access:public	signature:(is_same< sg14::_impl::common_type_t<fixed_point>, ::fixed_point< typename std::common_type<Rep>::type, Exponent>>::value, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert(min.data() == rep(1), "all Rep types should be able to store the number 1!");$/;"	p	struct:FixedPointTesterOutsize	access:public	signature:(min.data() == rep(1), Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert(rep_op_exponent<divide_op, make_fixed<1, 14>, make_fixed<7, 0>>::value==-14,$/;"	p	namespace:test_operate	signature:(rep_op_exponent<divide_op, make_fixed<1, 14>, make_fixed<7, 0>>::value==-14, Ó)
static_assert	src/test/fixed_point_common.h	/^    static_assert(sg14::_num_traits_impl::are_composite<fixed_point<test_int>>::value, "sg14::is_composite<fixed_point<>> test failed");$/;"	p	namespace:test_is_composite	signature:(sg14::_num_traits_impl::are_composite<fixed_point<test_int>>::value, Ó)
static_assert	src/test/make_elastic_fixed_point.cpp	/^    static_assert(Value<=0 || (Value >> sg14::_impl::max<int>(0, type::integer_digits-1))!=0, "elastic_fixed_point type capacity is too small");$/;"	p	struct:make_elastic_test	file:	access:public	signature:(Value<=0 || (Value >> sg14::_impl::max<int>(0, type::integer_digits-1))!=0, Ó)
static_assert	src/test/make_elastic_fixed_point.cpp	/^    static_assert(Value==((Value\/lsz)*lsz), "fractional_digits is too low");$/;"	p	struct:make_elastic_test	file:	access:public	signature:(Value==((Value/lsz)*lsz), Ó)
static_assert	src/test/make_elastic_fixed_point.cpp	/^    static_assert(Value==0 || Value!=((Value\/lsz1)*lsz1), "fractional_digits is too high");$/;"	p	struct:make_elastic_test	file:	access:public	signature:(Value==0 || Value!=((Value/lsz1)*lsz1), Ó)
static_assert	src/test/make_elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<type>::is_signed, "signage doesn't match value");$/;"	p	struct:make_elastic_test	file:	access:public	signature:(std::numeric_limits<type>::is_signed, Ó)
static_assert	src/test/num_traits.cpp	/^        static_assert(is_integer_or_float<float>::value, "sg14::_integer_impl::is_integer_or_float test failed");$/;"	p	namespace:__anon8::test_is_integer_or_float	file:	signature:(is_integer_or_float<float>::value, Ó)
static_assert	src/test/num_traits.cpp	/^        static_assert(std::is_same<$/;"	p	namespace:__anon8::test_digits_type	file:	signature:(std::is_same< typename std::remove_cv<decltype(std::numeric_limits<void>::digits)>::type, sg14::_digits_type>::value, Ó)
static_assert	src/test/number_test.h	/^    static_assert(numeric_limits::is_specialized, "std::numeric_limits is not specialized for this type");$/;"	p	struct:number_test	access:public	signature:(numeric_limits::is_specialized, Ó)
static_assert	src/test/number_test.h	/^    static_assert(sg14::digits<value_type>::value$/;"	p	struct:number_test	access:public	signature:(sg14::digits<value_type>::value ==sg14::digits<sg14::set_digits_t<value_type, sg14::digits<value_type>::value>>::value, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<int16_t>::value==15,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<int16_t>::value==15, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<int32_t>::value==31,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<int32_t>::value==31, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<int64_t>::value==63,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<int64_t>::value==63, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<int8_t>::value==7,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<int8_t>::value==7, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<uint16_t>::value==0,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<uint16_t>::value==0, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<uint32_t>::value==0,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<uint32_t>::value==0, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<uint64_t>::value==0,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<uint64_t>::value==0, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(negative_digits<uint8_t>::value==0,$/;"	p	namespace:__anon10::test_impl	file:	signature:(negative_digits<uint8_t>::value==0, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<int16_t>::value==15,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<int16_t>::value==15, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<int32_t>::value==31,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<int32_t>::value==31, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<int64_t>::value==63,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<int64_t>::value==63, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<uint16_t>::value==16,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<uint16_t>::value==16, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<uint32_t>::value==32,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<uint32_t>::value==32, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<uint64_t>::value==64,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<uint64_t>::value==64, Ó)
static_assert	src/test/overflow.cpp	/^        static_assert(positive_digits<uint8_t>::value==8,$/;"	p	namespace:__anon10::test_impl	file:	signature:(positive_digits<uint8_t>::value==8, Ó)
static_assert	src/test/p0381.cpp	/^    static_assert(UCHAR_MAX*UCHAR_MAX==65025, "incorrect assumption about value of UCHAR_MAX");$/;"	p	namespace:sample1	file:	signature:(UCHAR_MAX*UCHAR_MAX==65025, Ó)
static_assert	src/test/p0381.cpp	/^    static_assert(is_same<decltype(declval<unsigned>()*declval<unsigned>()), unsigned>::value,$/;"	p	namespace:sample2	file:	signature:(is_same<decltype(declval<unsigned>()*declval<unsigned>()), unsigned>::value, Ó)
static_assert	src/test/p0381.cpp	/^    static_assert(is_same<set_digits_t<uint64_t, 16>, uint16_t>::value, "a 64-bit unsigned integer was narrowed to 16-bits");$/;"	p	namespace:specifiying	file:	signature:(is_same<set_digits_t<uint64_t, 16>, uint16_t>::value, Ó)
static_assert	src/test/p0381.cpp	/^    static_assert(is_same<set_digits_t<unsigned, 32>, uint32_t>::value, "uint32_t is an unsigned 32-bit integer");$/;"	p	namespace:specifiying	file:	signature:(is_same<set_digits_t<unsigned, 32>, uint32_t>::value, Ó)
static_assert	src/test/p0381.cpp	/^    static_assert(is_same<uint32_t, decltype(multiply(declval<uint16_t>(), declval<uint16_t>()))>::value,$/;"	p	namespace:sample5	file:	signature:(is_same<uint32_t, decltype(multiply(declval<uint16_t>(), declval<uint16_t>()))>::value, Ó)
static_assert	src/test/p0381.cpp	/^    static_assert(is_same<uint64_t, decltype(multiply(declval<uint32_t>(), declval<uint32_t>()))>::value,$/;"	p	namespace:sample3	file:	signature:(is_same<uint64_t, decltype(multiply(declval<uint32_t>(), declval<uint32_t>()))>::value, Ó)
static_assert	src/test/p0381.cpp	/^    static_assert(is_same<uint64_t, decltype(multiply(declval<uint32_t>(), declval<uint32_t>()))>::value,$/;"	p	namespace:sample5	file:	signature:(is_same<uint64_t, decltype(multiply(declval<uint32_t>(), declval<uint32_t>()))>::value, Ó)
static_assert	src/test/p0675.cpp	/^        static_assert(is_composite_v<fixed_point<short>>);$/;"	p	namespace:__anon7::desirata	file:	signature:(is_composite_v<fixed_point<short>>)
static_assert	src/test/p0675.cpp	/^        static_assert(num_digits_v<int64_t> == 63);$/;"	p	namespace:__anon7::desirata	file:	signature:(num_digits_v<int64_t> == 63)
static_assert	src/test/precise_fixed_point.cpp	/^        static_assert(std::numeric_limits<precise_integer<>>::is_integer, "std::numeric_limits<precise_integer<>> test failed");$/;"	p	namespace:__anon19::test_numeric_limits	file:	signature:(std::numeric_limits<precise_integer<>>::is_integer, Ó)
static_assert	src/test/precise_fixed_point.cpp	/^        static_assert(std::numeric_limits<precise_integer<>>::is_specialized, "std::numeric_limits<precise_integer<>> test failed");$/;"	p	namespace:__anon19::test_numeric_limits	file:	signature:(std::numeric_limits<precise_integer<>>::is_specialized, Ó)
static_assert	src/test/precise_integer.cpp	/^            static_assert($/;"	p	namespace:__anon22::test_traits::test_make_unsigned_t	file:	signature:( std::is_same<precise_integer<unsigned long long>, make_unsigned_t<precise_integer<long long>>>::value, Ó)
static_assert	src/test/precise_integer.cpp	/^            static_assert(std::is_same<precise_integer<short>, make_signed_t<precise_integer<unsigned short>>>::value,$/;"	p	namespace:__anon22::test_traits::test_make_signed_t	file:	signature:(std::is_same<precise_integer<short>, make_signed_t<precise_integer<unsigned short>>>::value, Ó)
static_assert	src/test/precise_integer.cpp	/^        static_assert(is_derived_from_number_base<precise_integer<>>::value, "");$/;"	p	namespace:__anon22::number_base_traits	file:	signature:(is_derived_from_number_base<precise_integer<>>::value, Ó)
static_assert	src/test/precise_integer.cpp	/^        static_assert(is_same<precise_integer<>::rep, default_rep>::value, "sg14::precise_integer parameter default test failed");$/;"	p	namespace:__anon22::default_parameters	file:	signature:(is_same<precise_integer<>::rep, default_rep>::value, Ó)
static_assert	src/test/precise_integer.cpp	/^        static_assert(is_same<precise_integer<>::rounding, default_tag<default_rep>>::value, "sg14::precise_integer parameter default test failed");$/;"	p	namespace:__anon22::default_parameters	file:	signature:(is_same<precise_integer<>::rounding, default_tag<default_rep>>::value, Ó)
static_assert	src/test/safe_elastic_integer.cpp	/^        static_assert($/;"	p	namespace:__anon15::default_parameters	file:	signature:( is_same<safe_elastic_integer<1>::rep::rep, int>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^        static_assert(default_initialized == 0, "sg14::safe_integer test failed");$/;"	p	struct:__anon12::test_safe_integer	file:	access:public	signature:(default_initialized == 0, Ó)
static_assert	src/test/safe_integer.cpp	/^        static_assert(default_initialized*default_initialized == default_initialized, "sg14::safe_integer test failed");$/;"	p	struct:__anon12::test_safe_integer	file:	access:public	signature:(default_initialized*default_initialized == default_initialized, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<int16_t>>::type, saturated_integer<int16_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<int16_t>>::type, saturated_integer<int16_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<int32_t>>::type, saturated_integer<int32_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<int32_t>>::type, saturated_integer<int32_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<int64_t>>::type, saturated_integer<int64_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<int64_t>>::type, saturated_integer<int64_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<uint16_t>>::type, saturated_integer<int16_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<uint16_t>>::type, saturated_integer<int16_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<uint32_t>>::type, saturated_integer<int32_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<uint32_t>>::type, saturated_integer<int32_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<uint64_t>>::type, saturated_integer<int64_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<uint64_t>>::type, saturated_integer<int64_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<uint8_t >>::type, saturated_integer<int8_t >>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<uint8_t >>::type, saturated_integer<int8_t >>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<int16_t>>::type, saturated_integer<uint16_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<int16_t>>::type, saturated_integer<uint16_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<int32_t>>::type, saturated_integer<uint32_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<int32_t>>::type, saturated_integer<uint32_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<int64_t>>::type, saturated_integer<uint64_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<int64_t>>::type, saturated_integer<uint64_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<uint16_t>>::type, saturated_integer<uint16_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<uint16_t>>::type, saturated_integer<uint16_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<uint32_t>>::type, saturated_integer<uint32_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<uint32_t>>::type, saturated_integer<uint32_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<uint64_t>>::type, saturated_integer<uint64_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<uint64_t>>::type, saturated_integer<uint64_t>>::value, Ó)
static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<uint8_t >>::type, saturated_integer<uint8_t >>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<uint8_t >>::type, saturated_integer<uint8_t >>::value, Ó)
static_assert	src/test/snippets.cpp	/^static_assert(n==-2.75, "fixed-point type was unable to store the value");$/;"	p	namespace:__anon3::define_a_fixed_point_value	file:	signature:(n==-2.75, Ó)
static_assert	src/test/snippets.cpp	/^static_assert(n==0xAA, "n now has the value, 1024");$/;"	p	namespace:__anon3::define_a_fast_object_using_make_elastic	file:	signature:(n==0xAA, Ó)
static_assert	src/test/snippets.cpp	/^static_assert(n==1536, "n now has the value, 1536");$/;"	p	namespace:__anon3::define_a_small_object_using_make_elastic	file:	signature:(n==1536, Ó)
static_assert	src/test/snippets.cpp	/^static_assert(n==34, "n now has the value, 1536");$/;"	p	namespace:__anon3::define_a_fast_object_using_elastic_literal	file:	signature:(n==34, Ó)
static_assert	src/test/snippets.cpp	/^static_assert(std::is_same<decltype(n), const elastic_fixed_point<11, -9, char>>::value, "by default make_elastic_fixed_point uses the most efficient type it can");$/;"	p	namespace:__anon3::define_a_small_object_using_make_elastic	file:	signature:(std::is_same<decltype(n), const elastic_fixed_point<11, -9, char>>::value, Ó)
static_assert	src/test/snippets.cpp	/^static_assert(std::is_same<decltype(n), const elastic_fixed_point<6, -1>>::value, "type only uses 1 bit of range");$/;"	p	namespace:__anon3::define_a_fast_object_using_elastic_literal	file:	signature:(std::is_same<decltype(n), const elastic_fixed_point<6, -1>>::value, Ó)
static_assert	src/test/snippets.cpp	/^static_assert(std::is_same<decltype(n), const elastic_fixed_point<8, -1, int>>::value, "by default make_elastic_fixed_point uses the most efficient type it can");$/;"	p	namespace:__anon3::define_a_fast_object_using_make_elastic	file:	signature:(std::is_same<decltype(n), const elastic_fixed_point<8, -1, int>>::value, Ó)
static_assert	src/test/snippets.cpp	/^static_assert(std::is_same<make_fixed<7, 8, signed>, fixed_point<int16_t, -8>>::value, "failed to use make_fixed");$/;"	p	namespace:__anon3::use_make_fixed	file:	signature:(std::is_same<make_fixed<7, 8, signed>, fixed_point<int16_t, -8>>::value, Ó)
static_assert	src/test/utils.cpp	/^static_assert(static_cast<int>((fixed_point<uint64_t, -8>(65535)\/fixed_point<uint64_t, -8>(256)))==255,$/;"	p	file:	signature:(fixed_point<uint64_t, -8>(65535)/fixed_point<uint64_t, -8>(256))
static_cast	include/sg14/auxiliary/elastic_integer.h	/^        -> decltype(static_cast<_impl::common_type_t<$/;"	f	namespace:sg14::_impl	signature:(from)
static_cast	include/sg14/bits/fixed_point_operators.h	/^        -> decltype(op(static_cast<_impl::common_type_t<Lhs, Rhs>>(lhs), static_cast<_impl::common_type_t<Lhs, Rhs>>(rhs)))$/;"	f	namespace:sg14::_impl	signature:(rhs)
static_cast	include/sg14/bits/number_base.h	/^        -> decltype(op(_impl::from_value<RhsDerived>(lhs), static_cast<const RhsDerived&>(rhs))) {$/;"	f	namespace:sg14::_impl	signature:(rhs)
static_cast	src/single_header/fixed_point.h	/^        -> decltype(op(_impl::from_value<RhsDerived>(lhs), static_cast<const RhsDerived&>(rhs))) {$/;"	f	namespace:sg14::_impl	signature:(rhs)
static_cast	src/single_header/fixed_point.h	/^        -> decltype(op(static_cast<_impl::common_type_t<Lhs, Rhs>>(lhs), static_cast<_impl::common_type_t<Lhs, Rhs>>(rhs)))$/;"	f	namespace:sg14::_impl::sg14::_impl	signature:(rhs)
static_cast	src/single_header/fixed_point.h	/^        -> decltype(static_cast<_impl::common_type_t<$/;"	f	namespace:sg14::_impl	signature:(from)
static_cast	src/test/fixed_point_common.h	/^static_assert(static_cast<float>(sqrt(make_fixed<7, 24>(3.141592654)))<1.7724537849427, "sg14::sqrt test failed");$/;"	p	signature:(sqrt(
std	include/sg14/auxiliary/boost.simd.h	/^namespace std {$/;"	n
std	include/sg14/auxiliary/const_integer.h	/^namespace std {$/;"	n
std	include/sg14/auxiliary/elastic_integer.h	/^namespace std {$/;"	n
std	include/sg14/auxiliary/safe_integer.h	/^namespace std {$/;"	n
std	include/sg14/bits/fixed_point_common_type.h	/^namespace std {$/;"	n
std	include/sg14/bits/fixed_point_extras.h	/^namespace std {$/;"	n
std	include/sg14/bits/limits.h	/^namespace std {$/;"	n
std	include/sg14/bits/number_base.h	/^namespace std {$/;"	n
std	src/single_header/fixed_point.h	/^namespace std {$/;"	n
std	src/single_header/fixed_point.h	/^namespace std {$/;"	n	namespace:sg14::_impl
std::_elastic_integer_impl	include/sg14/auxiliary/elastic_integer.h	/^    namespace _elastic_integer_impl {$/;"	n	namespace:std
std::_elastic_integer_impl	src/single_header/fixed_point.h	/^    namespace _elastic_integer_impl {$/;"	n	namespace:std
std::_elastic_integer_impl::lowest	include/sg14/auxiliary/elastic_integer.h	/^        struct lowest<Rep, false> {$/;"	s	namespace:std::_elastic_integer_impl
std::_elastic_integer_impl::lowest	include/sg14/auxiliary/elastic_integer.h	/^        struct lowest<Rep, true> {$/;"	s	namespace:std::_elastic_integer_impl
std::_elastic_integer_impl::lowest	src/single_header/fixed_point.h	/^        struct lowest<Rep, false> {$/;"	s	namespace:std::_elastic_integer_impl
std::_elastic_integer_impl::lowest	src/single_header/fixed_point.h	/^        struct lowest<Rep, true> {$/;"	s	namespace:std::_elastic_integer_impl
std::common_type	include/sg14/auxiliary/const_integer.h	/^    struct common_type<Lhs, sg14::const_integer<Integral, Value, Digits, Zeros>>$/;"	s	namespace:std	inherits:common_type
std::common_type	include/sg14/auxiliary/const_integer.h	/^    struct common_type<sg14::const_integer<Integral, Value, Digits, Zeros>, Rhs>$/;"	s	namespace:std	inherits:common_type
std::common_type	include/sg14/auxiliary/elastic_integer.h	/^    struct common_type<Lhs, sg14::elastic_integer<RhsDigits, RhsNarrowest>>$/;"	s	namespace:std	inherits:common_type
std::common_type	include/sg14/auxiliary/elastic_integer.h	/^    struct common_type<sg14::elastic_integer<LhsDigits, LhsNarrowest>, Rhs>$/;"	s	namespace:std	inherits:common_type
std::common_type	include/sg14/auxiliary/elastic_integer.h	/^    struct common_type<sg14::elastic_integer<LhsDigits, LhsNarrowest>, sg14::elastic_integer<RhsDigits, RhsNarrowest>> {$/;"	s	namespace:std
std::common_type	include/sg14/auxiliary/safe_integer.h	/^    struct common_type<$/;"	s	namespace:std	inherits:sg14::_integer_impl::common_type
std::common_type	include/sg14/auxiliary/safe_integer.h	/^    struct common_type<$/;"	s	namespace:std	inherits:std::common_type
std::common_type	include/sg14/bits/fixed_point_common_type.h	/^    struct common_type<Lhs, sg14::fixed_point<RhsRep, RhsExponent>> {$/;"	s	namespace:std
std::common_type	include/sg14/bits/fixed_point_common_type.h	/^    struct common_type<sg14::fixed_point<LhsRep, LhsExponent>, Rhs> {$/;"	s	namespace:std
std::common_type	include/sg14/bits/fixed_point_common_type.h	/^    struct common_type<sg14::fixed_point<LhsRep, LhsExponent>, sg14::fixed_point<RhsRep, RhsExponent>> {$/;"	s	namespace:std
std::common_type	include/sg14/bits/fixed_point_common_type.h	/^    struct common_type<sg14::fixed_point<Rep, Exponent>> {$/;"	s	namespace:std
std::common_type	src/single_header/fixed_point.h	/^    struct common_type<Lhs, sg14::const_integer<Integral, Value, Digits, Zeros>>$/;"	s	namespace:std	inherits:common_type
std::common_type	src/single_header/fixed_point.h	/^    struct common_type<Lhs, sg14::elastic_integer<RhsDigits, RhsNarrowest>>$/;"	s	namespace:std	inherits:common_type
std::common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::const_integer<Integral, Value, Digits, Zeros>, Rhs>$/;"	s	namespace:std	inherits:common_type
std::common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::elastic_integer<LhsDigits, LhsNarrowest>, Rhs>$/;"	s	namespace:std	inherits:common_type
std::common_type	src/single_header/fixed_point.h	/^    struct common_type<sg14::elastic_integer<LhsDigits, LhsNarrowest>, sg14::elastic_integer<RhsDigits, RhsNarrowest>> {$/;"	s	namespace:std
std::numeric_limits	include/sg14/auxiliary/boost.simd.h	/^    struct numeric_limits<boost::simd::pack<T, N>> : numeric_limits<T> {};$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits	include/sg14/auxiliary/const_integer.h	/^    struct numeric_limits<sg14::const_integer<Integral, Value, Digits, Zeros>>$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits	include/sg14/auxiliary/elastic_integer.h	/^    struct numeric_limits<sg14::elastic_integer<Digits, Narrowest>>$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits	include/sg14/auxiliary/safe_integer.h	/^    struct numeric_limits<sg14::safe_integer<Rep, OverflowTag>>$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits	include/sg14/bits/fixed_point_extras.h	/^    struct numeric_limits<sg14::fixed_point<Rep, Exponent>>$/;"	s	namespace:std	inherits:std::numeric_limits
std::numeric_limits	include/sg14/bits/limits.h	/^    struct numeric_limits<SG14_INT128> : numeric_limits<long long> {$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits	include/sg14/bits/limits.h	/^    struct numeric_limits<SG14_UINT128> : numeric_limits<unsigned long long> {$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits	include/sg14/bits/number_base.h	/^    struct numeric_limits<sg14::_impl::number_base<Derived, Rep>>$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits	src/single_header/fixed_point.h	/^    struct numeric_limits<sg14::_impl::number_base<Derived, Rep>>$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits	src/single_header/fixed_point.h	/^    struct numeric_limits<sg14::const_integer<Integral, Value, Digits, Zeros>>$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits	src/single_header/fixed_point.h	/^    struct numeric_limits<sg14::elastic_integer<Digits, Narrowest>>$/;"	s	namespace:std	inherits:numeric_limits
std::numeric_limits::_s	include/sg14/bits/limits.h	/^        struct _s {$/;"	s	struct:std::numeric_limits	access:public
std::numeric_limits::_s::_s	include/sg14/bits/limits.h	/^            constexpr _s(uint64_t upper, uint64_t lower) : value(lower + (SG14_INT128{upper} << 64)) {}$/;"	f	struct:std::numeric_limits::_s	access:public	signature:(uint64_t upper, uint64_t lower)
std::numeric_limits::_s::_s	include/sg14/bits/limits.h	/^            constexpr _s(uint64_t upper, uint64_t lower) : value(lower + (SG14_UINT128{upper} << 64)) {}$/;"	f	struct:std::numeric_limits::_s	access:public	signature:(uint64_t upper, uint64_t lower)
std::numeric_limits::_s::operator SG14_INT128	include/sg14/bits/limits.h	/^            constexpr operator SG14_INT128() const { return value; }$/;"	f	struct:std::numeric_limits::_s	access:public	signature:() const
std::numeric_limits::_s::value	include/sg14/bits/limits.h	/^            SG14_INT128 value;$/;"	m	struct:std::numeric_limits::_s	access:public
std::numeric_limits::_s::value	include/sg14/bits/limits.h	/^            SG14_UINT128 value;$/;"	m	struct:std::numeric_limits::_s	access:public
std::numeric_limits::digits	include/sg14/auxiliary/const_integer.h	/^        static constexpr int digits = Digits;$/;"	m	struct:std::numeric_limits	access:public
std::numeric_limits::digits	include/sg14/auxiliary/elastic_integer.h	/^        static constexpr int digits = Digits;$/;"	m	struct:std::numeric_limits	access:public
std::numeric_limits::digits	include/sg14/bits/limits.h	/^        static const int digits = CHAR_BIT*sizeof(SG14_INT128)-1;$/;"	m	struct:std::numeric_limits	access:public
std::numeric_limits::digits	include/sg14/bits/limits.h	/^        static const int digits = CHAR_BIT*sizeof(SG14_INT128);$/;"	m	struct:std::numeric_limits	access:public
std::numeric_limits::digits	src/single_header/fixed_point.h	/^        static constexpr int digits = Digits;$/;"	m	struct:std::numeric_limits	access:public
std::numeric_limits::digits10	include/sg14/bits/limits.h	/^        static const int digits10 = 38;$/;"	m	struct:std::numeric_limits	access:public
std::numeric_limits::is_integer	include/sg14/bits/fixed_point_extras.h	/^        static constexpr bool is_integer = false;$/;"	m	struct:std::numeric_limits	access:public
std::numeric_limits::lowest	include/sg14/bits/limits.h	/^        static constexpr SG14_INT128 lowest()$/;"	f	struct:std::numeric_limits	access:public	signature:()
std::numeric_limits::max	include/sg14/bits/limits.h	/^        static constexpr SG14_INT128 max()$/;"	f	struct:std::numeric_limits	access:public	signature:()
std::numeric_limits::min	include/sg14/bits/limits.h	/^        static constexpr SG14_INT128 min()$/;"	f	struct:std::numeric_limits	access:public	signature:()
stl	src/test/cppnow2017.cpp	/^namespace stl {$/;"	n	file:
sub	src/benchmark/benchmark.cpp	/^FIXED_POINT_BENCHMARK_COMPLETE(sub);$/;"	v
sub	src/benchmark/benchmark.cpp	/^static void sub(benchmark::State& state)$/;"	f	file:	signature:(benchmark::State& state)
subtract_op	include/sg14/bits/common.h	/^        struct subtract_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
subtract_op	src/single_header/fixed_point.h	/^        struct subtract_op : arithmetic_op {$/;"	s	namespace:sg14::_impl	inherits:arithmetic_op
sufficient_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr _digits_type sufficient_digits = sufficient_integer_digits+sufficient_fractional_digits;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sufficient_fractional_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int sufficient_fractional_digits = _impl::max(Lhs::fractional_digits,$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sufficient_integer_digits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int sufficient_integer_digits = _impl::max(Lhs::integer_digits,$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sufficient_sign_bits	include/sg14/bits/fixed_point_arithmetic.h	/^                    static constexpr int sufficient_sign_bits = std::is_signed<rep_op_result>::value;$/;"	m	struct:sg14::_impl::fp::arithmetic::result	access:public
sum_from_rows	src/benchmark/report.py	/^def sum_from_rows(rows):$/;"	f	access:public
table_from_benchmarks	src/benchmark/report.py	/^def table_from_benchmarks(table):$/;"	f	access:public
test_add	src/test/safe_elastic_integer.cpp	/^    namespace test_add {$/;"	n	namespace:__anon15	file:
test_bitwise_not	src/test/elastic_integer.cpp	/^    namespace test_bitwise_not {$/;"	n	namespace:__anon1	file:
test_closest_rounding_tag	src/test/precise_integer.cpp	/^    namespace test_closest_rounding_tag {$/;"	n	namespace:__anon22	file:
test_compare	src/test/elastic_integer.cpp	/^    namespace test_compare {$/;"	n	namespace:__anon1	file:
test_comparison	src/test/precise_integer.cpp	/^    namespace test_comparison {$/;"	n	namespace:__anon22	file:
test_comparison	src/test/safe_elastic_integer.cpp	/^    namespace test_comparison {$/;"	n	namespace:__anon15	file:
test_const_integer	src/test/const_integer.cpp	/^    namespace test_const_integer {$/;"	n	namespace:__anon20	file:
test_const_integer_impl	src/test/const_integer.cpp	/^    namespace test_const_integer_impl {$/;"	n	namespace:__anon20	file:
test_constructor	src/test/safe_integer.cpp	/^namespace test_constructor {$/;"	n	file:
test_conversion_operator	src/test/precise_integer.cpp	/^    namespace test_conversion_operator {$/;"	n	namespace:__anon22	file:
test_ctor	src/test/elastic_integer.cpp	/^    namespace test_ctor {$/;"	n	namespace:__anon1	file:
test_ctor	src/test/precise_fixed_point.cpp	/^    namespace test_ctor {$/;"	n	namespace:__anon19	file:
test_digits	src/test/elastic_integer.cpp	/^    namespace test_digits {$/;"	n	namespace:__anon1	file:
test_digits	src/test/safe_elastic_integer.cpp	/^    namespace test_digits {$/;"	n	namespace:__anon15	file:
test_digits	src/test/safe_integer.cpp	/^namespace test_digits {$/;"	n	file:
test_digits_to_integral	src/test/const_integer.cpp	/^        namespace test_digits_to_integral {$/;"	n	namespace:__anon20::test_const_integer_impl	file:
test_digits_type	src/test/num_traits.cpp	/^    namespace test_digits_type {$/;"	n	namespace:__anon8	file:
test_divide	src/test/elastic_integer.cpp	/^    namespace test_divide {$/;"	n	namespace:__anon1	file:
test_elastic_constant_literal	src/test/elastic_fixed_point.cpp	/^namespace test_elastic_constant_literal {$/;"	n	file:
test_equal	src/test/safe_integer.cpp	/^namespace test_equal {$/;"	n	file:
test_from_rep	src/test/fixed_point_common.h	/^namespace test_from_rep {$/;"	n
test_from_rep	src/test/precise_integer.cpp	/^        namespace test_from_rep {$/;"	n	namespace:__anon22::test_traits	file:
test_from_rep	src/test/safe_integer.cpp	/^namespace test_from_rep {$/;"	n	file:
test_from_rep::from_rep	src/test/safe_integer.cpp	/^    static_assert(from_rep<native_integer<short>>()(1), "");$/;"	p	namespace:test_from_rep	file:	signature:()
test_from_rep::from_rep	src/test/safe_integer.cpp	/^    static_assert(from_rep<throwing_integer<short>>()(1), "");$/;"	p	namespace:test_from_rep	file:	signature:()
test_from_value	src/test/elastic_integer.cpp	/^    namespace test_from_value {$/;"	n	namespace:__anon1	file:
test_from_value	src/test/precise_integer.cpp	/^        namespace test_from_value {$/;"	n	namespace:__anon22::test_traits	file:
test_function	src/test/index.cpp	/^void test_function(void(* function)(), char const* output)$/;"	f	signature:(void(* function)(), char const* output)
test_glvalue_error	src/test/fixed_point_common.h	/^namespace test_glvalue_error {$/;"	n
test_glvalue_error::q	src/test/fixed_point_common.h	/^    constexpr auto q = fixed_point<test_int, 0>{1}\/1;$/;"	m	namespace:test_glvalue_error
test_impl	src/test/overflow.cpp	/^    namespace test_impl {$/;"	n	namespace:__anon10	file:
test_impl_from_rep	src/test/safe_integer.cpp	/^namespace test_impl_from_rep {$/;"	n	file:
test_impl_scale	src/test/safe_integer.cpp	/^namespace test_impl_scale {$/;"	n	file:
test_is_composite	src/test/fixed_point_common.h	/^namespace test_is_composite {$/;"	n
test_is_composite	src/test/safe_elastic_integer.cpp	/^    namespace test_is_composite {$/;"	n	namespace:__anon15	file:
test_is_composite::static_assert	src/test/fixed_point_common.h	/^    static_assert(sg14::_num_traits_impl::are_composite<fixed_point<test_int>>::value, "sg14::is_composite<fixed_point<>> test failed");$/;"	p	namespace:test_is_composite	signature:(sg14::_num_traits_impl::are_composite<fixed_point<test_int>>::value, Ó)
test_is_elastic_integer	src/test/elastic_integer.cpp	/^    namespace test_is_elastic_integer {$/;"	n	namespace:__anon1	file:
test_is_integer_or_float	src/test/num_traits.cpp	/^    namespace test_is_integer_or_float {$/;"	n	namespace:__anon8	file:
test_leading_bits	src/test/fixed_point_common.h	/^namespace test_leading_bits {$/;"	n
test_leading_bits	src/test/numeric.cpp	/^    namespace test_leading_bits {$/;"	n	namespace:__anon13	file:
test_leading_bits	src/test/safe_elastic_integer.cpp	/^    namespace test_leading_bits {$/;"	n	namespace:__anon15	file:
test_literals	src/test/const_integer.cpp	/^    namespace test_literals {$/;"	n	namespace:__anon20	file:
test_make_elastic_integer	src/test/elastic_integer.cpp	/^    namespace test_make_elastic_integer {$/;"	n	namespace:__anon1	file:
test_make_precise_elastic	src/test/precise_elastic_integer.cpp	/^    namespace test_make_precise_elastic {$/;"	n	namespace:__anon18	file:
test_make_psefp	src/test/precise_safe_elastic_fixed_point.cpp	/^    namespace test_make_psefp {$/;"	n	namespace:__anon21	file:
test_make_psei	src/test/precise_safe_elastic_integer.cpp	/^    namespace test_make_psei {$/;"	n	namespace:__anon16	file:
test_make_safe_elastic	src/test/safe_elastic_integer.cpp	/^    namespace test_make_safe_elastic {$/;"	n	namespace:__anon15	file:
test_make_signed	src/test/safe_integer.cpp	/^namespace test_make_signed {$/;"	n	file:
test_make_signed::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<int16_t>>::type, saturated_integer<int16_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<int16_t>>::type, saturated_integer<int16_t>>::value, Ó)
test_make_signed::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<int32_t>>::type, saturated_integer<int32_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<int32_t>>::type, saturated_integer<int32_t>>::value, Ó)
test_make_signed::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<int64_t>>::type, saturated_integer<int64_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<int64_t>>::type, saturated_integer<int64_t>>::value, Ó)
test_make_signed::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<uint16_t>>::type, saturated_integer<int16_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<uint16_t>>::type, saturated_integer<int16_t>>::value, Ó)
test_make_signed::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<uint32_t>>::type, saturated_integer<int32_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<uint32_t>>::type, saturated_integer<int32_t>>::value, Ó)
test_make_signed::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<uint64_t>>::type, saturated_integer<int64_t>>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<uint64_t>>::type, saturated_integer<int64_t>>::value, Ó)
test_make_signed::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_signed<saturated_integer<uint8_t >>::type, saturated_integer<int8_t >>::value,$/;"	p	namespace:test_make_signed	file:	signature:(is_same<make_signed<saturated_integer<uint8_t >>::type, saturated_integer<int8_t >>::value, Ó)
test_make_signed_t	src/test/precise_integer.cpp	/^        namespace test_make_signed_t {$/;"	n	namespace:__anon22::test_traits	file:
test_make_unsigned	src/test/safe_integer.cpp	/^namespace test_make_unsigned {$/;"	n	file:
test_make_unsigned::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<int16_t>>::type, saturated_integer<uint16_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<int16_t>>::type, saturated_integer<uint16_t>>::value, Ó)
test_make_unsigned::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<int32_t>>::type, saturated_integer<uint32_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<int32_t>>::type, saturated_integer<uint32_t>>::value, Ó)
test_make_unsigned::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<int64_t>>::type, saturated_integer<uint64_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<int64_t>>::type, saturated_integer<uint64_t>>::value, Ó)
test_make_unsigned::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<uint16_t>>::type, saturated_integer<uint16_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<uint16_t>>::type, saturated_integer<uint16_t>>::value, Ó)
test_make_unsigned::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<uint32_t>>::type, saturated_integer<uint32_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<uint32_t>>::type, saturated_integer<uint32_t>>::value, Ó)
test_make_unsigned::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<uint64_t>>::type, saturated_integer<uint64_t>>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<uint64_t>>::type, saturated_integer<uint64_t>>::value, Ó)
test_make_unsigned::static_assert	src/test/safe_integer.cpp	/^    static_assert(is_same<make_unsigned<saturated_integer<uint8_t >>::type, saturated_integer<uint8_t >>::value,$/;"	p	namespace:test_make_unsigned	file:	signature:(is_same<make_unsigned<saturated_integer<uint8_t >>::type, saturated_integer<uint8_t >>::value, Ó)
test_make_unsigned_t	src/test/precise_integer.cpp	/^        namespace test_make_unsigned_t {$/;"	n	namespace:__anon22::test_traits	file:
test_max	src/test/common.cpp	/^    namespace test_max {$/;"	n	namespace:__anon17	file:
test_min	src/test/common.cpp	/^    namespace test_min {$/;"	n	namespace:__anon17	file:
test_multiply	src/test/elastic_integer.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon1	file:
test_multiply	src/test/precise_elastic_integer.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon18	file:
test_multiply	src/test/precise_safe_elastic_fixed_point.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon21	file:
test_multiply	src/test/precise_safe_elastic_integer.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon16	file:
test_multiply	src/test/safe_elastic_integer.cpp	/^    namespace test_multiply {$/;"	n	namespace:__anon15	file:
test_native_overflow	src/test/overflow.cpp	/^    namespace test_native_overflow {$/;"	n	namespace:__anon10	file:
test_numeric_impl	src/test/numeric.cpp	/^    namespace test_numeric_impl {$/;"	n	namespace:__anon13	file:
test_numeric_limits	src/test/boost.simd.cpp	/^    namespace test_numeric_limits {$/;"	n	namespace:__anon5	file:
test_numeric_limits	src/test/precise_fixed_point.cpp	/^    namespace test_numeric_limits {$/;"	n	namespace:__anon19	file:
test_numeric_limits	src/test/safe_elastic_integer.cpp	/^    namespace test_numeric_limits {$/;"	n	namespace:__anon15	file:
test_operate	src/test/const_integer.cpp	/^        namespace test_operate {$/;"	n	namespace:__anon20::test_const_integer_impl	file:
test_operate	src/test/elastic_integer.cpp	/^    namespace test_operate {$/;"	n	namespace:__anon1	file:
test_operate	src/test/fixed_point_common.h	/^namespace test_operate {$/;"	n
test_operate	src/test/precise_integer.cpp	/^    namespace test_operate {$/;"	n	namespace:__anon22	file:
test_operate::static_assert	src/test/fixed_point_common.h	/^    static_assert(rep_op_exponent<divide_op, make_fixed<1, 14>, make_fixed<7, 0>>::value==-14,$/;"	p	namespace:test_operate	signature:(rep_op_exponent<divide_op, make_fixed<1, 14>, make_fixed<7, 0>>::value==-14, Ó)
test_safe_elastic_integer	src/test/safe_elastic_integer.cpp	/^struct test_safe_elastic_integer {$/;"	s	file:
test_safe_integer	src/test/safe_integer.cpp	/^    struct test_safe_integer {$/;"	s	namespace:__anon12	file:
test_saturated	src/test/overflow.cpp	/^    namespace test_saturated {$/;"	n	namespace:__anon10	file:
test_scale	src/test/elastic_integer.cpp	/^    namespace test_scale {$/;"	n	namespace:__anon1	file:
test_scale	src/test/num_traits.cpp	/^    namespace test_scale {$/;"	n	namespace:__anon8	file:
test_scale	src/test/precise_elastic_integer.cpp	/^    namespace test_scale {$/;"	n	namespace:__anon18	file:
test_scale	src/test/safe_elastic_integer.cpp	/^    namespace test_scale {$/;"	n	namespace:__anon15	file:
test_scale	src/test/safe_integer.cpp	/^namespace test_scale {$/;"	n	file:
test_set_digits	src/test/boost.simd.cpp	/^    namespace test_set_digits {$/;"	n	namespace:__anon5	file:
test_set_digits	src/test/num_traits.cpp	/^    namespace test_set_digits {$/;"	n	namespace:__anon8	file:
test_set_make_signed	src/test/boost.simd.cpp	/^    namespace test_set_make_signed {$/;"	n	namespace:__anon5	file:
test_set_make_unsigned	src/test/boost.simd.cpp	/^    namespace test_set_make_unsigned {$/;"	n	namespace:__anon5	file:
test_subtract	src/test/elastic_integer.cpp	/^    namespace test_subtract {$/;"	n	namespace:__anon1	file:
test_throwing_overflow	src/test/overflow.cpp	/^    namespace test_throwing_overflow {$/;"	n	namespace:__anon10	file:
test_to_rep	src/test/fixed_point_common.h	/^namespace test_to_rep {$/;"	n
test_to_rep	src/test/num_traits.cpp	/^    namespace test_to_rep {$/;"	n	namespace:__anon8	file:
test_to_rep	src/test/precise_integer.cpp	/^        namespace test_to_rep {$/;"	n	namespace:__anon22::test_traits	file:
test_to_rep	src/test/safe_integer.cpp	/^namespace test_to_rep {$/;"	n	file:
test_trailing_bits	src/test/numeric.cpp	/^    namespace test_trailing_bits {$/;"	n	namespace:__anon13	file:
test_trailing_bits_positive	src/test/numeric.cpp	/^        namespace test_trailing_bits_positive {$/;"	n	namespace:__anon13::test_numeric_impl	file:
test_traits	src/test/elastic_fixed_point.cpp	/^struct test_traits {$/;"	s	file:
test_traits	src/test/precise_integer.cpp	/^    namespace test_traits {$/;"	n	namespace:__anon22	file:
test_traits::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(is_signed<sg14::make_signed_t<T>>::value,$/;"	p	struct:test_traits	file:	access:public	signature:(is_signed<sg14::make_signed_t<T>>::value, Ó)
test_traits::static_assert	src/test/elastic_fixed_point.cpp	/^    static_assert(std::numeric_limits<T>::is_signed==IsSigned,$/;"	p	struct:test_traits	file:	access:public	signature:(std::numeric_limits<T>::is_signed==IsSigned, Ó)
test_unary_add	src/test/elastic_integer.cpp	/^    namespace test_unary_add {$/;"	n	namespace:__anon1	file:
test_unary_subtract	src/test/elastic_integer.cpp	/^    namespace test_unary_subtract {$/;"	n	namespace:__anon1	file:
test_used_bits	src/test/fixed_point_common.h	/^namespace test_used_bits {$/;"	n
test_used_bits	src/test/numeric.cpp	/^    namespace test_used_bits {$/;"	n	namespace:__anon13	file:
test_used_bits	src/test/safe_elastic_integer.cpp	/^    namespace test_used_bits {$/;"	n	namespace:__anon15	file:
test_used_bits_positive	src/test/numeric.cpp	/^        namespace test_used_bits_positive {$/;"	n	namespace:__anon13::test_numeric_impl	file:
test_used_bits_symmetric	src/test/numeric.cpp	/^    namespace test_used_bits_symmetric {$/;"	n	namespace:__anon13	file:
throw_exception	src/test/boost.multiprecision.cpp	/^    void throw_exception(std::exception const &) {$/;"	f	namespace:boost	signature:(std::exception const &)
throw_exception	src/test/multiprecision.cpp	/^    void throw_exception(std::exception const &) {$/;"	f	namespace:boost	signature:(std::exception const &)
throwing_overflow	include/sg14/auxiliary/overflow.h	/^    } throwing_overflow{};$/;"	s	namespace:sg14
throwing_overflow_tag	include/sg14/auxiliary/overflow.h	/^    static constexpr struct throwing_overflow_tag {$/;"	s	namespace:sg14
to_rep	include/sg14/bits/number_base.h	/^    struct to_rep<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
to_rep	src/single_header/fixed_point.h	/^    struct to_rep<Number, _impl::enable_if_t<_impl::is_derived_from_number_base<Number>::value>> {$/;"	s	namespace:sg14
trailing_bits	include/sg14/auxiliary/numeric.h	/^        struct trailing_bits {$/;"	s	namespace:sg14::_numeric_impl
trailing_bits	include/sg14/auxiliary/numeric.h	/^        struct trailing_bits<Integer, _impl::enable_if_t<std::numeric_limits<Integer>::is_signed>> {$/;"	s	namespace:sg14::_numeric_impl
trailing_bits	include/sg14/auxiliary/numeric.h	/^    constexpr int trailing_bits(Integer value)$/;"	f	namespace:sg14	signature:(Integer value)
trailing_bits	src/single_header/fixed_point.h	/^        struct trailing_bits {$/;"	s	namespace:sg14::_numeric_impl
trailing_bits	src/single_header/fixed_point.h	/^        struct trailing_bits<Integer, _impl::enable_if_t<std::numeric_limits<Integer>::is_signed>> {$/;"	s	namespace:sg14::_numeric_impl
trailing_bits	src/single_header/fixed_point.h	/^    constexpr int trailing_bits(Integer value)$/;"	f	namespace:sg14	signature:(Integer value)
trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<int64_t>::lowest()+1)==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<int64_t>::lowest(
trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<int64_t>::max())==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<int64_t>::max(
trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<int64_t>::min()+1)==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<int64_t>::min(
trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<uint64_t>::max())==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<uint64_t>::max(
trailing_bits	src/test/numeric.cpp	/^        static_assert(trailing_bits(std::numeric_limits<uint64_t>::min())==0,$/;"	p	namespace:__anon13::test_trailing_bits	file:	signature:(std::numeric_limits<uint64_t>::min(
trailing_bits_positive	include/sg14/auxiliary/numeric.h	/^        constexpr int trailing_bits_positive(Integer value, int mask_bits = sizeof(Integer)*CHAR_BIT\/2)$/;"	f	namespace:sg14::_numeric_impl	signature:(Integer value, int mask_bits = sizeof(Integer)*CHAR_BIT/2)
trailing_bits_positive	src/single_header/fixed_point.h	/^        constexpr int trailing_bits_positive(Integer value, int mask_bits = sizeof(Integer)*8\/2)$/;"	f	namespace:sg14::_numeric_impl	signature:(Integer value, int mask_bits = sizeof(Integer)*8/2)
type_safe	src/test/p0554.cpp	/^    namespace type_safe {$/;"	n	namespace:__anon14	file:
u	src/test/elastic_fixed_point.cpp	/^    static_assert(shift_left<1, sg14::elastic_integer<32, unsigned>>(0) == 0u, "");$/;"	m	namespace:__anon9	file:
u	src/test/elastic_fixed_point.cpp	/^    static_assert(shift_left<1, sg14::elastic_integer<64, unsigned>>(0) == 0u, "");$/;"	m	namespace:__anon9	file:
unsigned_elastic_test	src/test/elastic_fixed_point.cpp	/^struct unsigned_elastic_test :$/;"	s	file:	inherits:test_traits,positive_elastic_test
unsigned_elastic_test::is_equal_to	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(lowest, zero), "numeric_limits test failed");$/;"	p	struct:unsigned_elastic_test	file:	access:public	signature:(lowest, zero)
unsigned_elastic_test::is_less_than	src/test/elastic_fixed_point.cpp	/^    static_assert(is_less_than(lowest, min), "numeric_limits test failed");$/;"	p	struct:unsigned_elastic_test	file:	access:public	signature:(lowest, min)
unsigned_limit	src/test/make_elastic_fixed_point.cpp	/^static constexpr auto unsigned_limit = std::intmax_t{std::numeric_limits<unsigned>::max()} + 1;$/;"	v	file:
use_make_fixed	src/test/snippets.cpp	/^namespace use_make_fixed {$/;"	n	namespace:__anon3	file:
use_resize_1	src/test/snippets.cpp	/^namespace use_resize_1 {$/;"	n	namespace:__anon3	file:
use_resize_2	src/test/snippets.cpp	/^namespace use_resize_2 {$/;"	n	namespace:__anon3	file:
use_resize_3	src/test/snippets.cpp	/^namespace use_resize_3 {$/;"	n	namespace:__anon3	file:
used_bits	include/sg14/auxiliary/numeric.h	/^        struct used_bits {$/;"	s	namespace:sg14::_numeric_impl
used_bits	include/sg14/auxiliary/numeric.h	/^    constexpr int used_bits(Integer value)$/;"	f	namespace:sg14	signature:(Integer value)
used_bits	src/single_header/fixed_point.h	/^        struct used_bits {$/;"	s	namespace:sg14::_numeric_impl
used_bits	src/single_header/fixed_point.h	/^    constexpr int used_bits(Integer value)$/;"	f	namespace:sg14	signature:(Integer value)
used_bits	src/test/number_test.h	/^    static_assert(sg14::used_bits(zero)==0, "used_bits test failed");$/;"	p	struct:number_test	access:public	signature:(zero)
used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(UINT64_C(0))==0,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(UINT64_C(
used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<int64_t>::lowest())==63,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<int64_t>::lowest(
used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<int64_t>::lowest()+1)==63,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<int64_t>::lowest(
used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<int64_t>::max())==63,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<int64_t>::max(
used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<int64_t>::min()+1)==63,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<int64_t>::min(
used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<uint64_t>::max())==64,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<uint64_t>::max(
used_bits	src/test/numeric.cpp	/^        static_assert(used_bits(std::numeric_limits<uint64_t>::min())==0,$/;"	p	namespace:__anon13::test_used_bits	file:	signature:(std::numeric_limits<uint64_t>::min(
used_bits_positive	include/sg14/auxiliary/numeric.h	/^        constexpr int used_bits_positive(Integer value, int mask_bits = sizeof(Integer)*CHAR_BIT\/2)$/;"	f	namespace:sg14::_numeric_impl	signature:(Integer value, int mask_bits = sizeof(Integer)*CHAR_BIT/2)
used_bits_positive	src/single_header/fixed_point.h	/^        constexpr int used_bits_positive(Integer value, int mask_bits = sizeof(Integer)*8\/2)$/;"	f	namespace:sg14::_numeric_impl	signature:(Integer value, int mask_bits = sizeof(Integer)*8/2)
used_bits_positive	src/test/numeric.cpp	/^            static_assert(used_bits_positive(std::numeric_limits<int64_t>::max())==63,$/;"	p	namespace:__anon13::test_numeric_impl::test_used_bits_positive	file:	signature:(std::numeric_limits<int64_t>::max(
used_bits_positive	src/test/numeric.cpp	/^            static_assert(used_bits_positive(std::numeric_limits<uint64_t>::max())==64,$/;"	p	namespace:__anon13::test_numeric_impl::test_used_bits_positive	file:	signature:(std::numeric_limits<uint64_t>::max(
used_bits_symmetric	include/sg14/auxiliary/numeric.h	/^        constexpr int used_bits_symmetric(Integer value)$/;"	f	namespace:sg14::_impl	signature:(Integer value)
used_bits_symmetric	src/single_header/fixed_point.h	/^        constexpr int used_bits_symmetric(Integer value)$/;"	f	namespace:sg14::_impl	signature:(Integer value)
used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<int64_t>::lowest()+1)==63,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<int64_t>::lowest(
used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<int64_t>::max())==63,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<int64_t>::max(
used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<int64_t>::min()+1)==63,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<int64_t>::min(
used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<uint64_t>::max())==64,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<uint64_t>::max(
used_bits_symmetric	src/test/numeric.cpp	/^        static_assert(_impl::used_bits_symmetric(std::numeric_limits<uint64_t>::min())==0,$/;"	p	namespace:__anon13::test_used_bits_symmetric	file:	signature:(std::numeric_limits<uint64_t>::min(
value	include/sg14/auxiliary/const_integer.h	/^            static constexpr std::intmax_t value = combine(10, 0, parse_dec(Digits)...);$/;"	m	struct:sg14::_const_integer_impl::digits_to_integral	access:public
value	include/sg14/auxiliary/const_integer.h	/^            static constexpr std::intmax_t value = combine(16, 0, parse_hex(Digits)...);$/;"	m	struct:sg14::_const_integer_impl::digits_to_integral	access:public
value	include/sg14/auxiliary/const_integer.h	/^        static constexpr value_type value = Value;$/;"	m	class:sg14::const_integer	access:public
value	include/sg14/auxiliary/elastic_integer.h	/^            static constexpr bool value = (integer_class>=1) && (integer_or_float==2);$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
value	include/sg14/auxiliary/elastic_integer.h	/^        static constexpr _digits_type value = Digits;$/;"	m	struct:sg14::digits	access:public
value	include/sg14/auxiliary/safe_integer.h	/^            static constexpr bool value = (integer_class >= 1) && (integer_or_float == 2);$/;"	m	struct:sg14::_integer_impl::are_integer_class_operands	access:public
value	include/sg14/bits/limits.h	/^            SG14_INT128 value;$/;"	m	struct:std::numeric_limits::_s	access:public
value	include/sg14/bits/limits.h	/^            SG14_UINT128 value;$/;"	m	struct:std::numeric_limits::_s	access:public
value	include/sg14/bits/number_base.h	/^            static constexpr bool value =$/;"	m	struct:sg14::_impl::precedes	access:public
value	src/single_header/fixed_point.h	/^            static constexpr bool value = (integer_class>=1) && (integer_or_float==2);$/;"	m	struct:sg14::_elastic_integer_impl::are_integer_class_operands	access:public
value	src/single_header/fixed_point.h	/^            static constexpr bool value =$/;"	m	struct:sg14::_impl::precedes	access:public
value	src/single_header/fixed_point.h	/^            static constexpr std::intmax_t value = combine(10, 0, parse_dec(Digits)...);$/;"	m	struct:sg14::_const_integer_impl::digits_to_integral	access:public
value	src/single_header/fixed_point.h	/^            static constexpr std::intmax_t value = combine(16, 0, parse_hex(Digits)...);$/;"	m	struct:sg14::_const_integer_impl::digits_to_integral	access:public
value	src/single_header/fixed_point.h	/^        static constexpr _digits_type value = Digits;$/;"	m	struct:sg14::digits	access:public
value	src/single_header/fixed_point.h	/^        static constexpr value_type value = Value;$/;"	m	class:sg14::const_integer	access:public
value	src/test/make_elastic_fixed_point.cpp	/^    static constexpr auto value = const_integer<std::int64_t, Value>{};$/;"	m	struct:make_elastic_test	file:	access:public
value	src/test/number_test.h	/^    static_assert(sg14::leading_bits(zero)==sg14::digits<value_type>::value, "leading_bits test failed");$/;"	m	class:number_test::sg14::digits	access:public
value	src/test/number_test.h	/^    static_assert(sg14::used_bits(max)==sg14::digits<value_type>::value, "used_bits test failed");$/;"	m	class:number_test::sg14::digits	access:public
width	include/sg14/auxiliary/boost.multiprecision.h	/^        static constexpr unsigned width = MinNumDigits + (SignType == _bmp::signed_magnitude);$/;"	m	struct:sg14::set_digits	access:public
width	include/sg14/auxiliary/multiprecision.h	/^        static constexpr unsigned width = MinNumDigits + (SignType == _bmp::signed_magnitude);$/;"	m	struct:sg14::set_digits	access:public
x0	src/test/fixed_point_common.h	/^static_assert(shift_left<-8, uint16>((uint8) 0x1234)==0x0, "sg14::shift_left test failed");$/;"	v
x0	src/test/fixed_point_common.h	/^static_assert(shift_left<-8, uint16>((uint8) 0x34)==0x0, "sg14::shift_left test failed");$/;"	v
x0	src/test/fixed_point_common.h	/^static_assert(shift_left<8, uint8>((uint16) 0x1234)==0x0, "sg14::shift_left test failed");$/;"	v
x12	src/test/fixed_point_common.h	/^static_assert(shift_left<-8, uint16>((uint16) 0x1234)==0x12, "sg14::shift_left test failed");$/;"	v
x12	src/test/fixed_point_common.h	/^static_assert(shift_left<-8, uint8>((uint16) 0x1234)==0x12, "sg14::shift_left test failed");$/;"	v
x3400	src/test/fixed_point_common.h	/^static_assert(shift_left<8, uint16>((uint16) 0x1234)==0x3400, "sg14::shift_left test failed");$/;"	v
x3400	src/test/fixed_point_common.h	/^static_assert(shift_left<8, uint16>((uint8) 0x1234)==0x3400, "sg14::shift_left test failed");$/;"	v
x40000000	src/test/num_traits.cpp	/^        static_assert(scale<int32_t>(1, 2, 30) == 0x40000000, "sg14::scale test failed");$/;"	m	namespace:__anon8::test_scale	file:
xff	src/test/fixed_point_common.h	/^static_assert(shift_left<8, uint8>((uint16)0x1234) == 0xff, "sg14::shift_left test failed");$/;"	v
xff00	src/test/fixed_point_common.h	/^static_assert(shift_left<8, uint16>((uint8)0x1234) == 0xff00, "sg14::shift_left test failed");$/;"	v
xffff	src/test/fixed_point_common.h	/^static_assert(shift_left<8, uint16>((uint16)0x1234) == 0xffff, "sg14::shift_left test failed");$/;"	v
y	src/test/fixed_point_common.h	/^static constexpr auto y = 6.5*x - 4;$/;"	v
zero	src/test/elastic_fixed_point.cpp	/^    static_assert(is_equal_to(min*make_elastic_fixed_point(0_c), zero), "operator* test failed");$/;"	m	struct:positive_elastic_test	file:	access:public
zero	src/test/number_test.h	/^    static constexpr value_type zero = sg14::_impl::from_rep<value_type>(0);$/;"	m	struct:number_test	access:public
zero_from_rep	src/test/number_test.h	/^    static constexpr auto zero_from_rep = sg14::_impl::from_rep<value_type>(sg14::_impl::to_rep(zero));$/;"	m	struct:number_test	access:public
zero_squared	src/test/elastic_integer.cpp	/^        static constexpr auto zero_squared = zero*zero;$/;"	m	struct:__anon1::elastic_integer_test	file:	access:public
~FFT	src/test/fft.h	/^        ~FFT();$/;"	p	class:Algorithms::FFT	access:public	signature:()
~FFT	src/test/fft.h	/^    FFT<T>::~FFT() {$/;"	f	class:Algorithms::FFT	signature:()
